fragment_downloaded_cb({"url":"Reference-manual.html#find_program","fragment":"find_program()\nprogram_name1 here is a string that can be an executable or script\nto be searched for in PATH or other places inside the project.\nThe search order is:\n(since 0.37.0) program_name2 and later positional arguments are used as fallback\nstrings to search for. This is meant to be used for cases where the\nprogram may have many alternative names, such as foo and\nfoo.py. The function will check for the arguments one by one and the\nfirst one that is found is returned.\nKeyword arguments are the following:\nrequired By default, required is set to true and Meson will\nabort if no program can be found. If required is set to false,\nMeson continue even if none of the programs can be found. You can\nthen use the .found() method on the returned object to check\nwhether it was found or not. (since 0.47.0) The value of a\nfeature option can also be passed to the\nrequired keyword argument.\nnative (since 0.43.0): defines how this executable should be searched. By default\nit is set to false, which causes Meson to first look for the\nexecutable in the cross file (when cross building) and if it is not\ndefined there, then from the system. If set to true, the cross\nfile is ignored and the program is only searched from the system.\ndisabler (since 0.49.0): if true and the program couldn't be found, return a\ndisabler object instead of a not-found object.\nversion (since 0.52.0): specifies the required version, see\ndependency() for argument format. The version of the program\nis determined by running program_name --version command. If stdout is empty\nit fallbacks to stderr. If the output contains more text than simply a version\nnumber, only the first occurrence of numbers separated by dots is kept.\nIf the output is more complicated than that, the version checking will have to\nbe done manually using run_command().\ndirs (since 0.53.0): extra list of absolute paths where to look for program\nnames.\nMeson will also autodetect scripts with a shebang line and run them\nwith the executable/interpreter specified in it both on Windows\n(because the command invocator will reject the command otherwise) and\nUnixes (if the script file does not have the executable bit set).\nHence, you must not manually add the interpreter while using this\nscript as part of a list of commands.\nIf you need to check for a program in a non-standard location, you can\njust pass an absolute path to find_program, e.g.\nIt is also possible to pass an array to find_program in case you\nneed to construct the set of paths to search on the fly:\nThe returned object also has methods that are documented in the\nobject methods section below.\n\nIf you use the return value of configure_file(), the\ncurrent subdir inside the build tree is used instead\n\n\n\nrequired By default, required is set to true and Meson will\nabort if no program can be found. If required is set to false,\nMeson continue even if none of the programs can be found. You can\nthen use the .found() method on the returned object to check\nwhether it was found or not. (since 0.47.0) The value of a\nfeature option can also be passed to the\nrequired keyword argument.\n\n\nnative (since 0.43.0): defines how this executable should be searched. By default\nit is set to false, which causes Meson to first look for the\nexecutable in the cross file (when cross building) and if it is not\ndefined there, then from the system. If set to true, the cross\nfile is ignored and the program is only searched from the system.\n\n\ndisabler (since 0.49.0): if true and the program couldn't be found, return a\ndisabler object instead of a not-found object.\n\n\nversion (since 0.52.0): specifies the required version, see\ndependency() for argument format. The version of the program\nis determined by running program_name --version command. If stdout is empty\nit fallbacks to stderr. If the output contains more text than simply a version\nnumber, only the first occurrence of numbers separated by dots is kept.\nIf the output is more complicated than that, the version checking will have to\nbe done manually using run_command().\n\n\ndirs (since 0.53.0): extra list of absolute paths where to look for program\nnames.\n\n\n"});