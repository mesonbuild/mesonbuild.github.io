fragment_downloaded_cb({"url":"Wrap-dependency-system-manual.html#cargo-wraps","fragment":"Cargo wraps\nCargo subprojects automatically override the <package_name>-rs dependency name.\npackage_name is defined in [package] name = ... section of the Cargo.toml\nand -rs suffix is added. That means the .wrap file should have\ndependency_names = foo-rs in their [provide] section when Cargo.toml has\npackage name foo.\nCargo subprojects require a toml parser. Python >= 3.11 have one built-in, older\nPython versions require either the external tomli module or toml2json program.\nFor example, a Cargo project with the package name foo-bar would have a wrap\nfile like that:\nCargo features are exposed as Meson boolean options, with the feature- prefix.\nFor example the default feature is named feature-default and can be set from\nthe command line with -Dfoo-rs:feature-default=false. When a cargo subproject\ndepends on another cargo subproject, it will automatically enable features it\nneeds using the dependency('foo-rs', default_options: ...) mechanism. However,\nunlike Cargo, the set of enabled features is not managed globally. Let's assume\nthe main project depends on foo-rs and bar-rs, and they both depend on\ncommon-rs. The main project will first look up foo-rs which itself will\nconfigure common-rs with a set of features. Later, when bar-rs does a lookup\nfor common-rs it has already been configured and the set of features cannot be\nchanged. If bar-rs wants extra features from common-rs, Meson will error out.\nIt is currently the responsability of the main project to resolve those\nissues by enabling extra features on each subproject:\nIn addition, if the file meson/meson.build exists, Meson will call subdir('meson')\nwhere the project can add manual logic that would usually be part of build.rs.\nSome naming conventions need to be respected:\n\nThe extra_args variable is pre-defined and can be used to add any Rust arguments.\nThis is typically used as extra_args += ['--cfg', 'foo'].\nThe extra_deps variable is pre-defined and can be used to add extra dependencies.\nThis is typically used as extra_deps += dependency('foo').\n\n"});