fragment_downloaded_cb({"url":"Wrap-dependency-system-manual.html#cargo-wraps","fragment":"Cargo wraps\nCargo subprojects automatically override the <package_name>-<version>-rs dependency\nname:\nThat means the .wrap file should have dependency_names = foo-1-rs in their\n[provide] section when Cargo.toml has package name foo and version 1.2.\nNote that the version component was added in Meson 1.4, previous versions were\nusing <package_name>-rs format.\nCargo subprojects require a toml parser. Python >= 3.11 have one built-in, older\nPython versions require either the external tomli module or toml2json program.\nFor example, a Cargo project with the package name foo-bar would have a wrap\nfile like that:\nCargo features are exposed as Meson boolean options, with the feature- prefix.\nFor example the default feature is named feature-default and can be set from\nthe command line with -Dfoo-1-rs:feature-default=false. When a cargo subproject\ndepends on another cargo subproject, it will automatically enable features it\nneeds using the dependency('foo-1-rs', default_options: ...) mechanism. However,\nunlike Cargo, the set of enabled features is not managed globally. Let's assume\nthe main project depends on foo-1-rs and bar-1-rs, and they both depend on\ncommon-1-rs. The main project will first look up foo-1-rs which itself will\nconfigure common-rs with a set of features. Later, when bar-1-rs does a lookup\nfor common-1-rs it has already been configured and the set of features cannot be\nchanged. If bar-1-rs wants extra features from common-1-rs, Meson will error out.\nIt is currently the responsibility of the main project to resolve those\nissues by enabling extra features on each subproject:\nIn addition, if the file meson/meson.build exists, Meson will call subdir('meson')\nwhere the project can add manual logic that would usually be part of build.rs.\nSome naming conventions need to be respected:\nSince 1.5.0 Cargo wraps can also be provided with Cargo.lock file at the root\nof (sub)project source tree. Meson will automatically load that file and convert\nit into a series of wraps definitions.\n\n\npackage_name is defined in [package] name = ... section of the Cargo.toml.\n\nversion is the API version deduced from [package] version = ... as follow:\n\n\nx.y.z -> 'x'\n\n0.x.y -> '0.x'\n\n0.0.x -> '0'\nIt allows to make different dependencies for incompatible versions of the same\ncrate.\n\n\n\n-rs suffix is added to distinguish from regular system dependencies, for\nexample gstreamer-1.0 is a system pkg-config dependency and gstreamer-0.22-rs\nis a Cargo dependency.\n\n\n\nx.y.z -> 'x'\n\n0.x.y -> '0.x'\n\n0.0.x -> '0'\nIt allows to make different dependencies for incompatible versions of the same\ncrate.\n\n\nThe extra_args variable is pre-defined and can be used to add any Rust arguments.\nThis is typically used as extra_args += ['--cfg', 'foo'].\nThe extra_deps variable is pre-defined and can be used to add extra dependencies.\nThis is typically used as extra_deps += dependency('foo').\n\n"});