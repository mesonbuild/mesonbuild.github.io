fragment_downloaded_cb({"url":"Quick-guide.html#compiling-a-meson-project","fragment":"Compiling a Meson project\nThe most common use case of Meson is compiling code on a code base you\nare working on. The steps to take are very simple.\nThe only thing to note is that you need to create a separate build\ndirectory. Meson will not allow you to build source code inside your\nsource tree. All build artifacts are stored in the build directory.\nThis allows you to have multiple build trees with different\nconfigurations at the same time. This way generated files are not\nadded into revision control by accident.\nTo recompile after code changes, just type meson compile. The build\ncommand is always the same. You can do arbitrary changes to source\ncode and build system files and Meson will detect those and will do\nthe right thing. If you want to build optimized binaries, just use the\nargument --buildtype=debugoptimized when running Meson. It is\nrecommended that you keep one build directory for unoptimized builds\nand one for optimized ones. To compile any given configuration, just\ngo into the corresponding build directory and run meson compile.\nMeson will automatically add compiler flags to enable debug\ninformation and compiler warnings (i.e. -g and -Wall). This means\nthe user does not have to deal with them and can instead focus on\ncoding.\n"});