fragment_downloaded_cb({"url":"Reference-manual_functions.html#arguments14","fragment":"Arguments\nThe function custom_target() accepts the following positional arguments:\nThe unique id of the custom target\nThis posarg is optional since 0.60.0. It defaults to the basename\nof the first output.\n[optional]\n\nFinally, custom_target()\naccepts the following keyword arguments:\nIf true this target is always considered out of\ndate and is rebuilt every time.  Equivalent to setting both\nbuild_always_stale and build_by_default to true.\nDEPRECATED\nin 0.47.0\nIf true the target is always considered out of date.\nUseful for things such as build timestamps or revision control tags.\nThe associated command is run even if the outputs are up to date.\n(since 0.47.0)\ndefault =\n  false\nCauses, when set to true, to\nhave this target be built by default. This means it will be built when\nmeson compile is called without any arguments. The default value is false.\n(since 0.50.0) If build_by_default is explicitly set to false, install\nwill no longer override it. If build_by_default is not set, install will\nstill determine its default.\n(since 0.38.0)\nThere are some compilers that can't be told to write\ntheir output to a file but instead write it to standard output. When\nthis argument is set to true, Meson captures stdout and writes it\nto the target file. Note that your command argument list may not\ncontain @OUTPUT@ when capture mode is active.\ndefault =\n  false\nCommand to run to create outputs from inputs. The command\nmay be strings or the return value of functions that return file-like\nobjects such as find_program(),\nexecutable(), configure_file(),\nfiles(), custom_target(), etc.\nMeson will automatically insert the appropriate dependencies on\ntargets and files listed in this keyword argument.\nNote: always specify commands in array form ['commandname', '-arg1', '-arg2'] rather than as a string 'commandname -arg1 -arg2' as the latter will not work.\nKeyword argument conflicts with capture, and is meant\nfor commands that are resource-intensive and take a long time to\nfinish. With the Ninja backend, setting this will add this target\nto Ninja's console pool,\nwhich has special properties such as not buffering stdout and\nserializing all targets in this pool.\n(since 0.48.0)\nfiles (str,\nfile, or the return value of configure_file() that\nthis target depends on but are not listed in the command keyword\nargument. Useful for adding regen dependencies.\nSpecifies that this target depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where you have a tool that\ne.g. does globbing internally. Usually you should just put the\ngenerated sources as inputs and Meson will set up all dependencies\nautomatically.\nA dependency file that the command can write listing\nall the additional files this target depends on, for example a C\ncompiler would list all the header files it included, and a change\nin any one of these files triggers a recompilation.\n(since 0.47.0) the @BASENAME@ and @PLAINNAME@ substitutions\nare also accepted.\nenvironment variables to set, such as\n{'NAME1': 'value1', 'NAME2': 'value2'} or ['NAME1=value1', 'NAME2=value2'],\nor an env object which allows more\nsophisticated environment juggling.\n(since 0.57.0)\nThere are some compilers that can't be told to read\ntheir input from a file and instead read it from standard input. When this\nargument is set to true, Meson feeds the input file to stdin. Note that\nyour argument list may not contain @INPUT@ when feed mode is active.\n(since 0.59.0)\ndefault =\n  false\nList of source files. (since 0.41.0) the list is flattened.\nWhen true, one or more files of this target are installed during the install step (see install_dir for details).\nIf only one install_dir is provided, all outputs are installed there.\nSince 0.40.0 Allows you to specify the installation directory for each\ncorresponding output. For example:\nThis would install first.file to somedir and second.file to otherdir.\nTo only install some outputs, pass false for the outputs that you\ndon't want installed. For example:\nThis would install second.file to otherdir and not install first.file.\nThe file mode and optionally the owner/uid and group/gid.\nSee the install_mode kwarg of install_data() for more information.\n(since 0.47.0)\nA list of strings, one per output, used by the meson install --tags command\nto install only a subset of the files.\nBy default all outputs have no install tag which means they are not being\ninstalled when --tags argument is specified. If only one tag is specified,\nit is assumed that all outputs have the same tag. false can be used for\noutputs that have no tag or are not installed.\n(since 0.60.0)\nList of output files.\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        name\n        str\n        \n        \nThe unique id of the custom target\nThis posarg is optional since 0.60.0. It defaults to the basename\nof the first output.\n  \n        \n\n  [optional]\n  \n  \n      \n    \n  \n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        build_always\n        bool\n        \n        \nIf true this target is always considered out of\ndate and is rebuilt every time.  Equivalent to setting both\nbuild_always_stale and build_by_default to true.\n  \n        \n\n  \n      DEPRECATED\n      in 0.47.0\n  \n  \n  \n      \n      \n        build_always_stale\n        bool\n        \n        \nIf true the target is always considered out of date.\nUseful for things such as build timestamps or revision control tags.\nThe associated command is run even if the outputs are up to date.\n  \n        \n\n  (since 0.47.0)\n  default =\n  false\n  \n  \n      \n      \n        build_by_default\n        bool\n        \n        \nCauses, when set to true, to\nhave this target be built by default. This means it will be built when\nmeson compile is called without any arguments. The default value is false.\n(since 0.50.0) If build_by_default is explicitly set to false, install\nwill no longer override it. If build_by_default is not set, install will\nstill determine its default.\n  \n        \n\n  (since 0.38.0)\n  \n  \n      \n      \n        capture\n        bool\n        \n        \nThere are some compilers that can't be told to write\ntheir output to a file but instead write it to standard output. When\nthis argument is set to true, Meson captures stdout and writes it\nto the target file. Note that your command argument list may not\ncontain @OUTPUT@ when capture mode is active.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        command\n        \nlist[str | file | exe | external_program]\n        \n        \nCommand to run to create outputs from inputs. The command\nmay be strings or the return value of functions that return file-like\nobjects such as find_program(),\nexecutable(), configure_file(),\nfiles(), custom_target(), etc.\nMeson will automatically insert the appropriate dependencies on\ntargets and files listed in this keyword argument.\nNote: always specify commands in array form ['commandname', '-arg1', '-arg2'] rather than as a string 'commandname -arg1 -arg2' as the latter will not work.\n  \n        \n\n  \n  \n      \n      \n        console\n        bool\n        \n        \nKeyword argument conflicts with capture, and is meant\nfor commands that are resource-intensive and take a long time to\nfinish. With the Ninja backend, setting this will add this target\nto Ninja's console pool,\nwhich has special properties such as not buffering stdout and\nserializing all targets in this pool.\n  \n        \n\n  (since 0.48.0)\n  \n  \n      \n      \n        depend_files\n        \nlist[str | file]\n        \n        \nfiles (str,\nfile, or the return value of configure_file() that\nthis target depends on but are not listed in the command keyword\nargument. Useful for adding regen dependencies.\n  \n        \n\n  \n  \n      \n      \n        depends\n        \nlist[build_tgt | custom_tgt]\n        \n        \nSpecifies that this target depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where you have a tool that\ne.g. does globbing internally. Usually you should just put the\ngenerated sources as inputs and Meson will set up all dependencies\nautomatically.\n  \n        \n\n  \n  \n      \n      \n        depfile\n        str\n        \n        \nA dependency file that the command can write listing\nall the additional files this target depends on, for example a C\ncompiler would list all the header files it included, and a change\nin any one of these files triggers a recompilation.\n(since 0.47.0) the @BASENAME@ and @PLAINNAME@ substitutions\nare also accepted.\n  \n        \n\n  \n  \n      \n      \n        env\n        \nenv | list[str] | dict[str]\n        \n        \nenvironment variables to set, such as\n{'NAME1': 'value1', 'NAME2': 'value2'} or ['NAME1=value1', 'NAME2=value2'],\nor an env object which allows more\nsophisticated environment juggling.\n  \n        \n\n  (since 0.57.0)\n  \n  \n      \n      \n        feed\n        bool\n        \n        \nThere are some compilers that can't be told to read\ntheir input from a file and instead read it from standard input. When this\nargument is set to true, Meson feeds the input file to stdin. Note that\nyour argument list may not contain @INPUT@ when feed mode is active.\n  \n        \n\n  (since 0.59.0)\n  default =\n  false\n  \n  \n      \n      \n        input\n        \nlist[str | file]\n        \n        \nList of source files. (since 0.41.0) the list is flattened.\n  \n        \n\n  \n  \n      \n      \n        install\n        bool\n        \n        \nWhen true, one or more files of this target are installed during the install step (see install_dir for details).\n  \n        \n\n  \n  \n      \n      \n        install_dir\n        \nstr | list[str | bool]\n        \n        \nIf only one install_dir is provided, all outputs are installed there.\nSince 0.40.0 Allows you to specify the installation directory for each\ncorresponding output. For example:\ncustom_target('different-install-dirs',\n  output : ['first.file', 'second.file'],\n  install : true,\n  install_dir : ['somedir', 'otherdir'])\n\nThis would install first.file to somedir and second.file to otherdir.\nTo only install some outputs, pass false for the outputs that you\ndon't want installed. For example:\n    custom_target('only-install-second',\n      output : ['first.file', 'second.file'],\n      install : true,\n      install_dir : [false, 'otherdir'])\n\nThis would install second.file to otherdir and not install first.file.\n  \n        \n\n  \n  \n      \n      \n        install_mode\n        \nlist[str | int]\n        \n        \nThe file mode and optionally the owner/uid and group/gid.\nSee the install_mode kwarg of install_data() for more information.\n  \n        \n\n  (since 0.47.0)\n  \n  \n      \n      \n        install_tag\n        \nlist[str]\n        \n        \nA list of strings, one per output, used by the meson install --tags command\nto install only a subset of the files.\nBy default all outputs have no install tag which means they are not being\ninstalled when --tags argument is specified. If only one tag is specified,\nit is assumed that all outputs have the same tag. false can be used for\noutputs that have no tag or are not installed.\n  \n        \n\n  (since 0.60.0)\n  \n  \n      \n      \n        output\n        \nlist[str]\n        \n        \nList of output files.\n  \n        \n\n  \n  \n      \n    \n  \n"});