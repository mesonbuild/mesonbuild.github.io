fragment_downloaded_cb({"url":"Adding-new-projects-to-wrapdb.html#creating-the-wrap-contents","fragment":"Creating the wrap contents\nNew release branches require a project.wrap file, so create one if\nneeded.\nThe file format is simple, see any existing wrapdb subproject for the\ncontent. The checksum is SHA-256 and can be calculated with the\nfollowing command on most unix-like operating systems:\nUnder macOS the command is the following:\nNext you need to add the entries that define what dependencies the\ncurrent project provides. This is important, as it is what makes\nMeson's automatic dependency resolver work.\nAssuming the project that you are creating\na wrap file for has called meson.override_dependency, then you\ncan declare those overridden dependencies in the provide section\nof the wrap file:\nIn the case that you do not control the upstream Meson configuration\nand it does not already make a call to meson.override_dependency,\nthen you can still expose dependency variables in the wrap file, using\na syntax like:\nThe arrow and arrow_compute parts on the left refer to the dependency\nnames, which should be the same as their Pkg-Config name. arrow_dep and\narrow_compute_dep on the right refer to the variables in the build\ndefinition that provide the dependencies. Most commonly, they hold the\nresult of a declare_dependency call. If a variable of that name is\nnot defined, Meson will exit with a hard error. For further details see\nthe main Wrap manual.\nHowever, it is strongly advised in such cases to request that the upstream\nrepository use meson.override_dependency for its next release, so that\nthe variable names chosen in the upstream configuration file can be\ndecoupled from the wrap file contents.\nNow you can create the build files, if the upstream project does not\ncontain any, and work on them until the project builds correctly.\nRemember that all files go in the directory\nsubprojects/packagefiles/<project-name>.\nIn order to apply the locally added build files to the upstream\nrelease tarball, the wrap-file section must contain a\npatch_directory property naming the subdirectory in\nsubprojects/packagefiles/ with the build files inside, as this is\ncentral to the way the wrapdb works. It will be used by the wrapdb\nmeson.build, and when a release is created, the files from this\ndirectory will be converted into an archive and a patch_url will be\nadded to the wrap file.\nWhen you are satisfied with the results, add the build files to Git, update\nreleases.json as described in\nREADME.md, and push the result\nto GitHub.\nNow you should create a pull request on GitHub.\nIf packaging review requires you to do changes, use the --amend\nargument to commit so that your branch will have only one commit.\n"});