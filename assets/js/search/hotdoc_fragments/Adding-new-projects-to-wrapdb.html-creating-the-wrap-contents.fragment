fragment_downloaded_cb({"url":"Adding-new-projects-to-wrapdb.html#creating-the-wrap-contents","fragment":"Creating the wrap contents\nSetting up the contents might seem a bit counterintuitive at first.\nJust remember that the outcome needs to have one (and only one) commit\nthat has all the build definition files (i.e. meson.build and\nmeson_options.txt files) and nothing else. It is good practice to\nhave this commit in a branch whose name matches the release as\ndescribed above.\nFirst you need to fork the repository to your own page using GitHub's\nfork button. Then you can clone the repo to your local machine.\nCreate a new branch for your work:\nIf you are adding new changes to an existing branch, leave out the\n-b argument.\nNow you need to copy the source code for the original project to this\ndirectory. If you already have it extracted somewhere, you'd do\nsomething like this:\nNow all the files should be in the wrap directory. Do not add them\nto Git, though. Neither now or at any time during this process. The\nrepo must contain only the newly created build files.\nNew release branches require an upstream.wrap file, so create one if\nneeded.\nThe file format is simple, see any existing wrapdb repo for the\ncontent. The checksum is SHA-256 and can be calculated with the\nfollowing command on most unix-like operating systems:\nUnder macOS the command is the following:\nNext you need to add the entries that define what dependencies the\ncurrent project provides. This is important, as it is what makes\nMeson's automatic dependency resolver work. It is done by adding a\nprovide entry at the end of the upstream.wrap file. Using the Ogg\nlibrary as an example, this is what it would look like:\nThe ogg part on the left refers to the dependency name, which should\nbe the same as its Pkg-Config name. ogg_dep on the right refers to\nthe variable in the build definitions that provides the dependency.\nMost commonly it holds the result of a declare_dependency call. If a\nvariable of that name is not defined, Meson will exit with a hard\nerror. For further details see the main Wrap\nmanual.\nNow you can create the build files and work on them until the project\nbuilds correctly.\nWhen you are satisfied with the results, add the build files to Git\nand push the result to GitHub.\nNow you should create a pull request on GitHub. Try to create it\nagainst the correct branch rather than master (1.0.0 branch in this\nexample). GitHub should do this automatically.\nIf the branch doesn't exist file a pull request against master.\nWrapDB maintainers can fix it before merging.\nIf packaging review requires you to do changes, use the --amend\nargument to commit so that your branch will continue to have only\none commit.\n"});