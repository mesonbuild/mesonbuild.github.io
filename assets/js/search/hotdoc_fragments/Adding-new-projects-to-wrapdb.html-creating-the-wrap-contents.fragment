fragment_downloaded_cb({"url":"Adding-new-projects-to-wrapdb.html#creating-the-wrap-contents","fragment":"Creating the wrap contents\nNew release branches require a project.wrap file, so create one if\nneeded.\nThe file format is simple, see any existing wrapdb subproject for the\ncontent. The checksum is SHA-256 and can be calculated with the\nfollowing command on most unix-like operating systems:\nUnder macOS the command is the following:\nNext you need to add the entries that define what dependencies the\ncurrent project provides. This is important, as it is what makes\nMeson's automatic dependency resolver work. It is done by adding a\nprovide entry at the end of the upstream.wrap file. Using the Ogg\nlibrary as an example, this is what it would look like:\nThe ogg part on the left refers to the dependency name, which should\nbe the same as its Pkg-Config name. ogg_dep on the right refers to\nthe variable in the build definitions that provides the dependency.\nMost commonly it holds the result of a declare_dependency call. If a\nvariable of that name is not defined, Meson will exit with a hard\nerror. For further details see the main Wrap\nmanual.\nNow you can create the build files, if the upstream project does not\ncontain any, and work on them until the project builds correctly.\nRemember that all files go in the directory\nsubprojects/packagefiles/<project-name>.\nIn order to apply the locally added build files to the upstream\nrelease tarball, the wrap-file section must contain a\npatch_directory property naming the subdirectory in\nsubprojects/packagefiles/ with the build files inside, as this is\ncentral to the way the wrapdb works. It will be used by the wrapdb\nmeson.build, and when a release is created, the files from this\ndirectory will be converted into an archive and a patch_url will be\nadded to the wrap file.\nWhen you are satisfied with the results, add the build files to Git, update\nreleases.json as described in\nREADME.md, and push the result\nto GitHub.\nNow you should create a pull request on GitHub.\nIf packaging review requires you to do changes, use the --amend\nargument to commit so that your branch will have only one commit.\n"});