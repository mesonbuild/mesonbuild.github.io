fragment_downloaded_cb({"url":"Adding-arguments.html#page-description","fragment":"Often you need to specify extra compiler arguments. Meson provides two\ndifferent ways to achieve this: global arguments and per-target\narguments.\nGlobal compiler arguments are set with the following command. As an\nexample you could do this.\nThis makes Meson add the define to all C compilations. Usually you\nwould use this setting for flags for global settings. Note that for\nsetting the C/C++ language standard (the -std=c99 argument in GCC),\nyou would probably want to use a default option of the project()\nfunction. For details see the reference manual.\nGlobal arguments have certain limitations. They all have to be defined\nbefore any build targets are specified. This ensures that the global\nflags are the same for every single source file built in the entire\nproject with one exception. Compilation tests that are run as part of\nyour project configuration do not use these flags. The reason for that\nis that you may need to run a test compile with and without a given\nflag to determine your build setup. For this reason tests do not use\nthese global arguments.\nYou should set only the most essential flags with this setting, you\nshould not set debug or optimization flags. Instead they should be\nspecified by selecting an appropriate build type.\nProject arguments work similar to global arguments except that they\nare valid only within the current subproject. The usage is simple:\nThis would add the compiler flags to all C sources in the current\nproject.\nPer target arguments are just as simple to define.\nHere we create a C++ executable with an extra argument that is used\nduring compilation but not for linking.\nYou can find the parameter name for other languages in the reference\ntables.\nSpecifying extra linker arguments is done in the same way:\n"});