fragment_downloaded_cb({"url":"Adding-new-projects-to-wrapdb.html#how-it-works","fragment":"How it works\nEach wrap repository has a master branch with only one initial commit\nand no wrap files. And that is the only commit ever made on that\nbranch.\nFor every release of a project a new branch is created. The new branch\nis named after the the upstream release number (e.g. 1.0.0). This\nbranch holds a wrap file for this particular release.\nThere are two types of wraps on WrapDB - regular wraps and wraps with\nMeson build definition patches. A wrap file in a repository on WrapDB\nmust have a name upstream.wrap.\nWraps with Meson build definition patches work in much the same way as\nDebian: we take the unaltered upstream source package and add a new\nbuild system to it as a patch. These build systems are stored as Git\nrepositories on GitHub. They only contain build definition files. You\nmay also think of them as an overlay to upstream source.\nWhenever a new commit is pushed into GitHub's project branch, a new\nwrap is generated with an incremented version number. All the old\nreleases remain unaltered. New commits are always done via GitHub\nmerge requests and must be reviewed by someone other than the\nsubmitter.\nNote that your Git repo with wrap must not contain the subdirectory of\nthe source release. That gets added automatically by the service. You\nalso must not commit any source code from the original tarball into\nthe wrap repository.\n"});