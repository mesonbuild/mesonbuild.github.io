fragment_downloaded_cb({"url":"Reference-manual_functions.html#arguments22","fragment":"Arguments\nThe function find_program() accepts the following positional arguments:\n\nAdditionally, the\nfunction accepts between 0 and infinity variadic\narguments (fallback...) of type str | file.\nThese parameters are used as fallback names to search for.\nThis is meant to be used for cases where the\nprogram may have many alternative names, such as foo and\nfoo.py. The function will check for the arguments one by one and the\nfirst one that is found is returned.\n(since 0.37.0)\n\nFinally, find_program()\naccepts the following keyword arguments:\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        program_name\n        \nstr | file\n\n        \n        \nThe name of the program to search, or a file object to be used\nwithout searching.\n  \n        \n\n  \n  \n      \n    \n  \n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        default_options\n        \nlist[str] | dict[str | bool | int | list[str]]\n        \n        \nAn array of default option values\nthat override those set in the subproject's meson.options\n(like default_options in project(), they only have\neffect when Meson is run for the first time, and command line\narguments override any default options in build files)\n  \n        \n\n  (since 1.3.0)\n  \n  \n      \n      \n        dirs\n        \nlist[str]\n        \n        \nextra list of absolute paths where to look for program names.\n  \n        \n\n  (since 0.53.0)\n  \n  \n      \n      \n        disabler\n        bool\n        \n        \nIf true and the program couldn't be found, return a disabler object\ninstead of a not-found object.\n  \n        \n\n  (since 0.49.0)\n  default =\n  false\n  \n  \n      \n      \n        native\n        bool\n        \n        \nDefines how this executable should be searched. By default\nit is set to false, which causes Meson to first look for the\nexecutable in the cross file (when cross building) and if it is not\ndefined there, then from the system. If set to true, the cross\nfile is ignored and the program is only searched from the system.\n  \n        \n\n  (since 0.43.0)\n  default =\n  false\n  \n  \n      \n      \n        required\n        \nbool | feature\n\n        \n        \nWhen true, Meson will abort if no program can be found.\nIf required is set to false,\nMeson continue even if none of the programs can be found. You can\nthen use the .found() method on the returned external_program to check\nwhether it was found or not. (since 0.47.0) The value of a\nfeature option can also be passed to the\nrequired keyword argument.\n  \n        \n\n  default =\n  true\n  \n  \n      \n      \n        version\n        str\n        \n        \nspecifies the required version, see\ndependency() for argument format. The version of the program\nis determined by running program_name --version command. If stdout is empty\nit fallbacks to stderr. If the output contains more text than simply a version\nnumber, only the first occurrence of numbers separated by dots is kept.\nIf the output is more complicated than that, the version checking will have to\nbe done manually using run_command().\n  \n        \n\n  (since 0.52.0)\n  \n  \n      \n    \n  \n"});