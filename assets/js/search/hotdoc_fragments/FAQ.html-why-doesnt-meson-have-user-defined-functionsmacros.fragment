fragment_downloaded_cb({"url":"FAQ.html#why-doesnt-meson-have-user-defined-functionsmacros","fragment":"Why doesn't meson have user defined functions/macros?\nThe tl;dr answer to this is that meson's design is focused on solving specific\nproblems rather than providing a general purpose language to write complex\ncode solutions in build files. Build systems should be quick to write and\nquick to understand, functions muddle this simplicity.\nThe long answer is twofold:\nFirst, Meson aims to provide a rich set of tools that solve specific problems\nsimply out of the box. This is similar to the \"batteries included\" mentality of\nPython. By providing tools that solve common problems in the simplest way\npossible in Meson we are solving that problem for everyone instead of forcing\neveryone to solve that problem for themselves over and over again, often\nbadly. One example of this are Meson's dependency wrappers around various\nconfig-tool executables (sdl-config, llvm-config, etc). In other build\nsystems each user of that dependency writes a wrapper and deals with the\ncorner cases (or doesn't, as is often the case), in Meson we handle them\ninternally, everyone gets fixes and the corner cases are ironed out for\neveryone. Providing user defined functions or macros goes directly against\nthis design goal.\nSecond, functions and macros makes the build system more difficult to reason\nabout. When you encounter some function call, you can refer to the reference\nmanual to see that function and its signature. Instead of spending\nfrustrating hours trying to interpret some bit of m4 or follow long include\npaths to figure out what function1 (which calls function2, which calls\nfunction3, ad infinitum), you know what the build system is doing. Unless\nyou're actively developing Meson itself, it's just a tool to orchestrate\nbuilding the thing you actually care about. We want you to spend as little\ntime worrying about build systems as possible so you can spend more time on\nyour code.\nMany times user defined functions are used due to a lack of loops or\nbecause loops are tedious to use in the language. Meson has both arrays/lists\nand hashes/dicts natively. Compare the following pseudo code:\nThe loop is both less code and is much easier to reason about than the function\nversion is, especially if the function were to live in a separate file, as is\ncommon in other popular build systems.\nBuild system DSLs also tend to be badly thought out as generic programming\nlanguages, Meson tries to make it easy to use external scripts or programs\nfor handling complex problems. While one can't always convert build logic\ninto a scripting language (or compiled language), when it can be done this is\noften a better solution. External languages tend to be well-thought-out and\ntested, generally don't regress, and users are more likely to have domain\nknowledge about them. They also tend to have better tooling (such as\nautocompletion, linting, testing solutions), which make them a lower\nmaintenance burden over time.\n"});