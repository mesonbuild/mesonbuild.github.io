fragment_downloaded_cb({"url":"Reference-manual_functions.html#shared_module","fragment":"shared_module()\nBuilds a shared module with the given sources.\nThis is useful for building modules that will be dlopen()ed and\nhence may contain undefined symbols that will be provided by the\nlibrary that is loading it.\nIf you want the shared module to be able to refer to functions and\nvariables defined in the executable() it is loaded by,\nyou will need to set the export_dynamic argument of the executable to\ntrue.\n\nLinking to a shared module on platforms other than Android is deprecated, and will be an error\nin the future.\nIt was previously allowed because it was the only way to have a shared-library-like target that\ncontained references to undefined symbols. However, since 0.40.0, the override_options:\nbuild_target() keyword argument can be used to create such a shared_library() by passing\noverride_options: 'b_lundef=false'. Shared modules have other characteristics that make\nthem incompatible with linking, such as a lack of SONAME.\nOn macOS and iOS, linking to shared modules is disallowed by the linker, so we disallow it at\nconfigure time.\nOn Android, if a shared module foo uses symbols from another shared module bar, foo must\nalso be linked to bar. Hence, linking one shared module to another will always be allowed when\nbuilding for Android.\n\n"});