fragment_downloaded_cb({"url":"Builtin-options.html#core-options","fragment":"Core options\nOptions that are labeled \"per machine\" in the table are set per\nmachine. See the specifying options per\nmachine section for details.\n For setting optimization levels and\ntoggling debug, you can either set the buildtype option, or you can\nset the optimization and debug options which give finer control\nover the same. Whichever you decide to use, the other will be deduced\nfrom it. For example, -Dbuildtype=debugoptimized is the same as\n-Ddebug=true -Doptimization=2 and vice-versa. This table documents\nthe two-way mapping:\nAll other combinations of debug and optimization set buildtype to 'custom'.\n\n\n\n Option\n Default value\n Description\n Is per machine\n Is per subproject\n\n\n\n\n auto_features {enabled, disabled, auto}\n auto\n Override value of all 'auto' features\n no\n no\n\n\n backend {ninja, vs,vs2010, vs2012, vs2013, vs2015, vs2017, vs2019, xcode}\n ninja\n Backend to use\n no\n no\n\n\n buildtype {plain, debug,debugoptimized, release, minsize, custom}\n debug\n  Build type to use\n no\n no\n\n\n debug\n true\n Debug\n no\n no\n\n\n default_library {shared, static, both}\n shared\n Default library type\n no\n yes\n\n\n errorlogs\n true\n Whether to print the logs from failing tests.\n no\n no\n\n\n install_umask {preserve, 0000-0777}\n 022\n Default umask to apply on permissions of installed files\n no\n no\n\n\n layout {mirror,flat}\n mirror\n Build directory layout\n no\n no\n\n\n optimization {0, g, 1, 2, 3, s}\n 0\n Optimization level\n no\n no\n\n\n pkg_config_path {OS separated path}\n ''\n Additional paths for pkg-config to search before builtin paths\n yes\n no\n\n\n cmake_prefix_path\n []\n Additional prefixes for cmake to search before builtin paths\n yes\n no\n\n\n stdsplit\n true\n Split stdout and stderr in test logs\n no\n no\n\n\n strip\n false\n Strip targets on install\n no\n no\n\n\n unity {on, off, subprojects}\n off\n Unity build\n no\n no\n\n\n unity_size {>=2}\n 4\n Unity file block size\n no\n no\n\n\n warning_level {0, 1, 2, 3}\n 1\n Set the warning level. From 0 = none to 3 = highest\n no\n yes\n\n\n werror\n false\n Treat warnings as errors\n no\n yes\n\n\n wrap_mode {default, nofallback,nodownload, forcefallback, nopromote}\n default\n Wrap mode to use\n no\n no\n\n\n force_fallback_for\n []\n Force fallback for those dependencies\n no\n no\n\n\n\n\n\n\n buildtype\n debug\n optimization\n\n\n\n\n plain\n false\n 0\n\n\n debug\n true\n 0\n\n\n debugoptimized\n true\n 2\n\n\n release\n false\n 3\n\n\n minsize\n true\n s\n\n\n\n"});