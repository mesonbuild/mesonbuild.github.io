fragment_downloaded_cb({"url":"Configuration.html#configuration","fragment":"Configuration\nIf there are multiple configuration options, passing them through\ncompiler flags becomes very burdensome. It also makes the\nconfiguration settings hard to inspect. To make things easier, Meson\nsupports the generation of configure files. This feature is similar to\none found in other build systems such as CMake.\nSuppose we have the following Meson snippet:\nand that the contents of config.h.in are\nMeson will then create a file called config.h in the corresponding\nbuild directory whose contents are the following.\nMore specifically, Meson will find all strings of the type @varname@\nand replace them with respective values set in conf_data. You can\nuse a single configuration_data object as many times as you like,\nbut it becomes immutable after being passed to the configure_file\nfunction. That is, after it has been used once to generate output the\nset function becomes unusable and trying to call it causes an error.\nSince 1.5.0 Copy of immutable configuration_data is however mutable.\nFor more complex configuration file generation Meson provides a second\nform. To use it, put a line like this in your configuration file.\nThe replacement that happens depends on what the value and type of TOKEN is:\nNote that if you want to define a C string, you need to do the quoting\nyourself like this:\nSince this is such a common operation, Meson provides a convenience\nmethod:\nOften you have a boolean value in Meson but need to define the C/C++\ntoken as 0 or 1. Meson provides a convenience function for this use\ncase.\n"});