fragment_downloaded_cb({"url":"Release-notes-for-0-56-0.html#meson-subprojects-command","fragment":"\nmeson subprojects command\nA new --types argument has been added to all subcommands to run the\ncommand only on wraps with the specified types. For example this\ncommand will only print Hello for each git subproject: meson subprojects foreach --types git echo \"Hello\". Multiple types can be\nset as comma separated list e.g. --types git,file.\nSubprojects with no wrap file are now taken into account as well. This\nhappens for example for subprojects configured as git submodule, or\ndownloaded manually by the user and placed into the subprojects/\ndirectory.\nThe checkout subcommand now always stash any pending changes before\nswitching branch. Note that update subcommand was already stashing\nchanges before updating the branch.\nIf the command fails on any subproject the execution continues with\nother subprojects, but at the end an error code is now returned.\nThe update subcommand has been reworked:\n\nIn the case the URL of origin is different as the url set in wrap file,\nthe subproject will not be updated unless --reset is specified (see below).\nIn the case a subproject directory exists and is not a git repository but has\na [wrap-git], Meson used to run git commands that would wrongly apply to the\nmain project. It now skip the subproject unless --reset is specified (see below).\nThe --rebase behaviour is now the default for consistency: it was\nalready rebasing when current branch and revision are the same, it is\nless confusing to rebase when they are different too.\nAdd --reset mode that checkout the new branch and hard reset that\nbranch to remote commit. This new mode guarantees that every\nsubproject are exactly at the wrap's revision. In addition the URL of origin\nis updated in case it changed in the wrap file. If the subproject directory is\nnot a git repository but has a [wrap-git] the directory is deleted and the\nnew repository is cloned.\nLocal changes are always stashed first to avoid any data loss. In the\nworst case scenario the user can always check reflog and stash list to\nrollback.\n\n"});