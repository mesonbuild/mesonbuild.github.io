fragment_downloaded_cb({"url":"Getting-meson.html#page-description","fragment":"Meson is implemented in Python 3, and requires 3.5 or newer. If your operating\nsystem provides a package manager, you should install it with that. For\nplatforms that don't have a package manager, you need to download it from\nPython's home page. See below for platform-specific Python3\nquirks.\nMeson releases can be downloaded from the GitHub release page, and you can\nrun ./meson.py from inside a release or the git repository itself without\ndoing anything special.\nOn Windows, if you did not install Python with the installer options that make\nPython scripts executable, you will have to run python /path/to/meson.py,\nwhere python is Python 3.5 or newer.\nThe newest development code can be obtained directly from Git, and we strive\nto ensure that it will always be working and usable. All commits go through\na pull-request process that runs CI and tests several platforms.\nMeson is available in the Python Package Index and can be installed with\nsudo pip3 install meson which requires root and will install it system-wide.\nIf you have downloaded a copy of the meson sources already, you can install it\nwith sudo pip3 install path/to/source/root/.\nAlternatively, you can use pip3 install --user meson which will install it\nfor your user and does not require any special privileges. This will install\nthe package in ~/.local/, so you will have to add ~/.local/bin to your\nPATH, and sudo meson install will be completely broken since the\nprogram will not be available to root. Only use a user copy of meson if you\ndo not care about installing projects as root.\nWe provide an MSI installer on the GitHub release page that can be used to\ninstall both Meson and Ninja at once for Windows. It also contains an embedded\ncopy of Python, so scripts that use the Python module and\ndo not have any external dependencies will continue to work as expected.\nPlease note that this is a new feature, so bug reports are expected and welcome!\nIn the most common case, you will need the Ninja executable for using the\nninja backend, which is the default in Meson. This backend can be used on all\nplatforms and with all toolchains, including GCC, Clang, Visual Studio, MinGW,\nICC, ARMCC, etc.\nYou can use the version provided by your package manager if possible, otherwise\ndownload the binary executable from the Ninja project's release\npage.\nIf you will only use the Visual Studio backend (--backend=vs) to generate\nVisual Studio solutions on Windows or the XCode backend (--backend=xcode) to\ngenerate XCode projects on macOS, you do not need Ninja.\nWhen installing Python 3, it is highly recommended (but not required) that you\nselect the installer options as follows:\n\n\n\nWith this, you will have python and pip in PATH, and you can install\nMeson with pip. You will also be able to directly run meson in any shell on\nWindows instead of having to run py -3 with the full path to the meson.py\nscript.\nIf you are using MSYS2 on Windows as your development environment, please make\nsure that you do not use the msys/python package to provide Python 3. Use\neither mingw32/mingw-w64-i686-python3 or mingw64/mingw-w64-x86_64-python3\ndepending on which MinGW target you are building for.\n"});