fragment_downloaded_cb({"url":"Release-notes-for-0-54-0.html#page-description","fragment":"In addition to properly setting the compile and linker arguments, a\nnew meson builtin has been added to control the PTHREAD_POOL_SIZE\noption, -D<lang>_thread_count, which may be set to any integer value\ngreater than 0. If it set to 0 then the PTHREAD_POOL_SIZE option will\nnot be passed.\nThis allows users to disable writing out the inbuilt variables to the\npkg-config file as they might actually not be required.\nOne reason to have this is for architecture-independent pkg-config\nfiles in projects which also have architecture-dependent outputs.\nThe paths for filenames in error and warning locations are now\nconsistently reported relative to the current working directory (when\npossible), or as absolute paths (when a relative path does not exist,\ne.g. a Windows path starting with a different drive letter to the\ncurrent working directory).\n(The previous behaviour was to report a path relative to the source\nroot for all warnings and most errors, and relative to cwd for certain\nparser errors)\nThe first time a dependency is found, using dependency('foo', ...),\nthe return value is now cached. Any subsequent call will return the\nsame value as long as version requested match, otherwise not-found\ndependency is returned. This means that if a system dependency is\nfirst found, it won't fallback to a subproject in a subsequent call\nany more and will rather return not-found instead if the system\nversion does not match. Similarly, if the first call returns the\nsubproject fallback dependency, it will also return the subproject\ndependency in a subsequent call even if no fallback is provided.\nFor example, if the system has foo version 1.0:\nIt is now possible to override the result of dependency() to point\nto any dependency object you want. The overriding is global and\napplies to every subproject from there on.\nFor example, this subproject provides 2 libraries with version 2.0:\nAssuming the system has foo and bar 1.0 installed, and master project does this:\nThis used to mix system 1.0 version and subproject 2.0 dependencies,\nbut thanks to the override bar_dep is now set to the subproject's\nversion instead.\nAnother case this can be useful is to force a subproject to use a\nspecific dependency. If the subproject does dependency('foo') but\nthe main project wants to provide its own implementation of foo, it\ncan for example call meson.override_dependency('foo', declare_dependency(...)) before configuring the subproject.\nIn the case a subproject foo calls\nmeson.override_dependency('foo-2.0', foo_dep), the parent project\ncan omit the dependency variable name in fallback keyword argument:\ndependency('foo-2.0', fallback : 'foo').\nA new meson compile command has been added to support backend\nagnostic compilation. It accepts two arguments, -j and -l, which\nare used if possible (-l does nothing with msbuild). A -j or -l\nvalue < 1 lets the backend decide how many threads to use. For msbuild\nthis means -m, for ninja it means passing no arguments.\nAdditionally meson compile provides a --clean switch to clean the\nproject.\nA complete list of arguments is always documented via meson compile --help\nadd_languages() gained a native: keyword, indicating if a native or cross\ncompiler is to be used.\nFor the benefit of existing simple build definitions which don't\ncontain any native: true targets, without breaking backwards\ncompatibility for build definitions which assume that the native\ncompiler is available after add_languages(), if the native:\nkeyword is absent the languages may be used for either the build or\nhost machine, but are never required for the build machine.\nThis changes the behaviour of the following meson fragment (when\ncross-compiling but a native compiler is not available) from reporting\nan error at add_language to reporting an error at executable.\nA new list_sep keyword argument has been added to summary()\nfunction. If defined and the value is a list, elements will be\nseparated by the provided string instead of being aligned on a new\nline.\nThe automatic subprojects section now also print the number of\nwarnings encountered during that subproject configuration, or the\nerror message if the configuration failed.\nThis allows zlib to be detected on macOS and FreeBSD without the use\nof pkg-config or cmake, neither of which are part of the base install\non those OSes (but zlib is).\nA side effect of this change is that dependency('zlib') also works\nwith cmake instead of requiring dependency('ZLIB').\nBuild target objects (as returned by executable(), library(), ...) now\nhave a name() method.\nNow you can run meson install --quiet and meson will not verbosely\nprint every file as it is being installed. As before, the full log is\nalways available inside the builddir in meson-logs/install-log.txt.\nWhen this option is passed, install scripts will have the environment\nvariable MESON_INSTALL_QUIET set.\nNumerous speed-ups were also made for the install step, especially on\nWindows where it is now 300% to 1200% faster than before depending on\nyour workload.\nBefore 0.54.0 we treated emscripten as both compiler and linker, which\nisn't really true. It does have a linker, called wasm-ld (meson's name\nis ld.wasm). This is a special version of clang's lld. This will now\nbe detected properly.\nFor certain cross compilation environments it is not possible to\ncompile a sanity check application. This can now be disabled by adding\nthe following entry to your cross file's properties section:\nLDC (the llvm D compiler) and GDC (The Gnu D Compiler) now honor D_LD\nlinker variable (or d_ld in the cross file) and is able to pick\ndifferent linkers.\nGDC supports all of the same values as GCC, LDC supports ld.bfd,\nld.gold, ld.lld, ld64, link, and lld-link.\nAs of Meson 0.54.0, the --native-file nativefile.ini can contain:\nwhich are defined and used the same way as in cross files. The\nproperties are new for Meson 0.54.0, and are read like:\nwhere foobar is the property name, and the optional foo is the\nfallback string value.\nFor cross-compiled projects, get_external_property() reads the\ncross-file unless native: true is specified.\nA test process (group) is now terminated via SIGTERM instead of\nSIGKILL allowing the signal to be handled. However, it is now the\nresponsibility of the custom signal handler (if any) to ensure that\nany process spawned by the top-level test processes is correctly\nkilled.\nThe docs have always claimed that the Dynamic Linker environment\nvariable should be ${COMPILER_VAR}_LD, but that's only the case for\nabout half of the variables. The other half are different. In 0.54.0\nthe variables match. The old variables are still supported, but are\ndeprecated and raise a deprecation warning.\nThe default_library and werror built-in options can now be defined\nper subproject. This is useful for example when building shared\nlibraries in the main project, but static link a subproject, or when\nthe main project must build with no warnings but some subprojects\ncannot.\nMost of the time this would be used either by the parent project by\nsetting subproject's default_options (e.g. subproject('foo', default_options: 'default_library=static')), or by the user using the\ncommand line -Dfoo:default_library=static.\nThe value is overridden in this order:\nPreviously in Meson, variables like CC effected both the host and\nbuild platforms for native builds, but the just the build platform for\ncross builds. Now CC_FOR_BUILD is used for the build platform in\ncross builds.\nThis old behavior is inconsistent with the way Autotools works, which\nundermines the purpose of distro-integration that is the only reason\nenvironment variables are supported at all in Meson. The new behavior\nis not quite the same, but doesn't conflict: meson doesn't always\nrepond to an environment when Autoconf would, but when it does it\ninterprets it as Autotools would.\nAllows to define a list of folders used by pkg-config for a cross\nbuild and avoid a system directories use.\nMeson now ships with predefined project templates for Java, Cuda,\nObjective-C++, and C#, we provided with associated values for\ncorresponding languages, available for both library, and executable.\nMeson now uses the Implicit\noutputs feature of\nNinja for some types of targets that have multiple outputs which may\nnot be listed on the command-line. This feature requires Ninja 1.7+.\nNote that the latest version of Ninja available in Ubuntu\n16.04\n(the oldest Ubuntu LTS at the time of writing) is 1.7.1. If your\ndistro does not ship with a new-enough Ninja, you can download the\nlatest release from Ninja's GitHub page:\nhttps://github.com/ninja-build/ninja/releases\nThe meson init assumes that it is run inside the project root\ndirectory. If this isn't the case, you can now use -C to specify the\nactual project source directory.\nArguments passed to message() and warning() will be printed\nseparated by space.\nIt should be used to compile optional Qt code:\nMicrosoft ended support for Windows 7, so only 64 bit Windows OSs are\nofficially supported. Thus only a 64 bit MSI installer will be\nprovided going forward. People needing a 32 bit version can build\ntheir own with the msi/createmsi.py script in Meson's source\nrepository.\nNote: the functionality of this module is governed by Meson's\nrules on mixing build systems.\nThe pkgconfig module now generates uninstalled pc files as well. For\nany generated foo.pc file, an extra foo-uninstalled.pc file is\nplaced into <builddir>/meson-uninstalled. They can be used to build\napplications against libraries built by meson without installing them,\nby pointing PKG_CONFIG_PATH to that directory. This is an\nexperimental feature provided on a best-effort basis, it might not\nwork in all use-cases.\nIt is now possible to pass components to the CMake dependency backend\nvia the new components kwarg in the dependency function.\nMake sure compiler executables are setup correctly in your path\nCompiler is available from the Microchip website for free\nMake sure compiler executables are setup correctly in your path\nCompiler is available from Texas Instruments website for free\nTraditionally the unity files that Meson autogenerates contain all\nsource files that belong to a single target. This is the most\nefficient setting for full builds but makes incremental builds slow.\nThis release adds a new option unity_size which specifies how many\nsource files should be put in each unity file.\nThe default value for block size is 4. This means that if you have a\ntarget that has eight source files, Meson will generate two unity\nfiles each of which includes four source files. The old behaviour can\nbe replicated by setting unity_size to a large value, such as 10000.\nThe new option --verbose has been added to meson compile that will\nenable more verbose compilation logs. Note that for VS backend it\nmeans that logs will be less verbose by default (without --verbose\noption).\n\nbinaries\npaths\nproperties\n\n\nValue from parent project\nValue from subproject's default_options if set\nValue from subproject() default_options if set\nValue from command line if set\n\n"});