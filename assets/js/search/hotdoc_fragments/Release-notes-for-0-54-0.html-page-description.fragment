fragment_downloaded_cb({"url":"Release-notes-for-0-54-0.html#page-description","fragment":"In addition to properly setting the compile and linker arguments, a new meson\nbuiltin has been added to control the PTHREAD_POOL_SIZE option,\n-D<lang>_thread_count, which may be set to any integer value greater than 0.\nIf it set to 0 then the PTHREAD_POOL_SIZE option will not be passed.\nThis allows users to disable writing out the inbuilt variables to\nthe pkg-config file as they might actually not be required.\nOne reason to have this is for architecture-independent pkg-config\nfiles in projects which also have architecture-dependent outputs.\nThe paths for filenames in error and warning locations are now consistently\nreported relative to the current working directory (when possible), or as\nabsolute paths (when a relative path does not exist, e.g. a Windows path\nstarting with a different drive letter to the current working directory).\n(The previous behaviour was to report a path relative to the source root for all\nwarnings and most errors, and relative to cwd for certain parser errors)\nThe first time a dependency is found, using dependency('foo', ...), the return\nvalue is now cached. Any subsequent call will return the same value as long as\nversion requested match, otherwise not-found dependency is returned. This means\nthat if a system dependency is first found, it won't fallback to a subproject\nin a subsequent call any more and will rather return not-found instead if the\nsystem version does not match. Similarly, if the first call returns the subproject\nfallback dependency, it will also return the subproject dependency in a subsequent\ncall even if no fallback is provided.\nFor example, if the system has foo version 1.0:\nIt is now possible to override the result of dependency() to point\nto any dependency object you want. The overriding is global and applies to\nevery subproject from there on.\nFor example, this subproject provides 2 libraries with version 2.0:\nAssuming the system has foo and bar 1.0 installed, and master project does this:\nThis used to mix system 1.0 version and subproject 2.0 dependencies, but thanks\nto the override bar_dep is now set to the subproject's version instead.\nAnother case this can be useful is to force a subproject to use a specific dependency.\nIf the subproject does dependency('foo') but the main project wants to provide\nits own implementation of foo, it can for example call\nmeson.override_dependency('foo', declare_dependency(...)) before configuring the\nsubproject.\nIn the case a subproject foo calls meson.override_dependency('foo-2.0', foo_dep),\nthe parent project can omit the dependency variable name in fallback keyword\nargument: dependency('foo-2.0', fallback : 'foo').\nA new meson compile command has been added to support backend agnostic\ncompilation. It accepts two arguments, -j and -l, which are used if\npossible (-l does nothing with msbuild). A -j or -l value < 1 lets the\nbackend decide how many threads to use. For msbuild this means -m, for\nninja it means passing no arguments.\nAdditionally meson compile provides a --clean switch to clean the project.\nA complete list of arguments is always documented via meson compile --help\nadd_languages() gained a native: keyword, indicating if a native or cross\ncompiler is to be used.\nFor the benefit of existing simple build definitions which don't contain any\nnative: true targets, without breaking backwards compatibility for build\ndefinitions which assume that the native compiler is available after\nadd_languages(), if the native: keyword is absent the languages may be used\nfor either the build or host machine, but are never required for the build\nmachine.\nThis changes the behaviour of the following meson fragment (when cross-compiling\nbut a native compiler is not available) from reporting an error at\nadd_language to reporting an error at executable.\nA new list_sep keyword argument has been added to summary() function.\nIf defined and the value is a list, elements will be separated by the provided\nstring instead of being aligned on a new line.\nThe automatic subprojects section now also print the number of warnings encountered\nduring that subproject configuration, or the error message if the configuration failed.\nThis allows zlib to be detected on macOS and FreeBSD without the use of\npkg-config or cmake, neither of which are part of the base install on those\nOSes (but zlib is).\nA side effect of this change is that dependency('zlib') also works with\ncmake instead of requiring dependency('ZLIB').\nBuild target objects (as returned by executable(), library(), ...) now have a name() method.\nNow you can run meson install --quiet and meson will not verbosely print\nevery file as it is being installed. As before, the full log is always\navailable inside the builddir in meson-logs/install-log.txt.\nWhen this option is passed, install scripts will have the environment variable\nMESON_INSTALL_QUIET set.\nNumerous speed-ups were also made for the install step, especially on Windows\nwhere it is now 300% to 1200% faster than before depending on your workload.\nBefore 0.54.0 we treated emscripten as both compiler and linker, which isn't\nreally true. It does have a linker, called wasm-ld (meson's name is ld.wasm).\nThis is a special version of clang's lld. This will now be detected properly.\nFor certain cross compilation environments it is not possible to\ncompile a sanity check application. This can now be disabled by adding\nthe following entry to your cross file's properties section:\nLDC (the llvm D compiler) and GDC (The Gnu D Compiler) now honor D_LD linker\nvariable (or d_ld in the cross file) and is able to pick different linkers.\nGDC supports all of the same values as GCC, LDC supports ld.bfd, ld.gold,\nld.lld, ld64, link, and lld-link.\nAs of Meson 0.54.0, the --native-file nativefile.ini can contain:\nwhich are defined and used the same way as in cross files.\nThe properties are new for Meson 0.54.0, and are read like:\nwhere foobar is the property name, and the optional foo is the fallback string value.\nFor cross-compiled projects, get_external_property() reads the cross-file unless native: true is specified.\nA test process (group) is now terminated via SIGTERM instead of SIGKILL\nallowing the signal to be handled. However, it is now the responsibility of\nthe custom signal handler (if any) to ensure that any process spawned by the\ntop-level test processes is correctly killed.\nThe docs have always claimed that the Dynamic Linker environment variable\nshould be ${COMPILER_VAR}_LD, but that's only the case for about half of\nthe variables. The other half are different. In 0.54.0 the variables match.\nThe old variables are still supported, but are deprecated and raise a\ndeprecation warning.\nThe default_library and werror built-in options can now be defined per subproject.\nThis is useful for example when building shared libraries in the main project,\nbut static link a subproject, or when the main project must build with no warnings\nbut some subprojects cannot.\nMost of the time this would be used either by the parent project by setting\nsubproject's default_options (e.g. subproject('foo', default_options: 'default_library=static')),\nor by the user using the command line -Dfoo:default_library=static.\nThe value is overridden in this order:\nPreviously in Meson, variables like CC effected both the host and build\nplatforms for native builds, but the just the build platform for cross builds.\nNow CC_FOR_BUILD is used for the build platform in cross builds.\nThis old behavior is inconsistent with the way Autotools works, which\nundermines the purpose of distro-integration that is the only reason\nenvironment variables are supported at all in Meson. The new behavior is not\nquite the same, but doesn't conflict: meson doesn't always repond to an\nenvironment when Autoconf would, but when it does it interprets it as Autotools\nwould.\nAllows to define a list of folders used by pkg-config for a cross build\nand avoid a system directories use.\nMeson now ships with predefined project templates for Java,\nCuda, Objective-C++, and C#, we provided with associated\nvalues for corresponding languages, available for both library,\nand executable.\nMeson now uses the Implicit outputs\nfeature of Ninja for some types of targets that have multiple outputs which may\nnot be listed on the command-line. This feature requires Ninja 1.7+.\nNote that the latest version of Ninja available in Ubuntu 16.04\n(the oldest Ubuntu LTS at the time of writing) is 1.7.1. If your distro does\nnot ship with a new-enough Ninja, you can download the latest release from\nNinja's GitHub page: https://github.com/ninja-build/ninja/releases\nThe meson init assumes that it is run inside the project\nroot directory. If this isn't the case, you can now use\n-C to specify the actual project source directory.\nArguments passed to message() and warning() will be printed separated by\nspace.\nIt should be used to compile optional Qt code:\nMicrosoft ended support for Windows 7, so only 64 bit Windows OSs are\nofficially supported. Thus only a 64 bit MSI installer will be\nprovided going forward. People needing a 32 bit version can build\ntheir own with the msi/createmsi.py script in Meson's source\nrepository.\nNote: the functionality of this module is governed by Meson's\nrules on mixing build systems.\nThe pkgconfig module now generates uninstalled pc files as well. For any generated\nfoo.pc file, an extra foo-uninstalled.pc file is placed into\n<builddir>/meson-uninstalled. They can be used to build applications against\nlibraries built by meson without installing them, by pointing PKG_CONFIG_PATH\nto that directory. This is an experimental feature provided on a best-effort\nbasis, it might not work in all use-cases.\nIt is now possible to pass components to the CMake dependency backend via the\nnew components kwarg in the dependency function.\nMake sure compiler executables are setup correctly in your path\nCompiler is available from the Microchip website for free\nMake sure compiler executables are setup correctly in your path\nCompiler is available from Texas Instruments website for free\nTraditionally the unity files that Meson autogenerates contain all\nsource files that belong to a single target. This is the most\nefficient setting for full builds but makes incremental builds slow.\nThis release adds a new option unity_size which specifies how many\nsource files should be put in each unity file.\nThe default value for block size is 4. This means that if you have a\ntarget that has eight source files, Meson will generate two unity\nfiles each of which includes four source files. The old behaviour can\nbe replicated by setting unity_size to a large value, such as 10000.\nThe new option --verbose has been added to meson compile that will enable\nmore verbose compilation logs. Note that for VS backend it means that logs will\nbe less verbose by default (without --verbose option).\n\nbinaries\npaths\nproperties\n\n\nValue from parent project\nValue from subproject's default_options if set\nValue from subproject() default_options if set\nValue from command line if set\n\n"});