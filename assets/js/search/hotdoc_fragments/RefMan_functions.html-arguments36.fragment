fragment_downloaded_cb({"url":"RefMan_functions.html#arguments36","fragment":"Arguments\nThe function project() accepts the following positional arguments:\nThe name of the project.\n\nAdditionally, the\nfunction accepts between 0 and infinity variadic\narguments (language...) of type str.\nThe languages that Meson should initialize.\n\nFinally, project()\naccepts the following keyword arguments:\nAccecpts strings in the form key=value\nwhich have the same format as options to meson configure.\nFor example to set the default project type you would\nset this: default_options : ['buildtype=debugoptimized']. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as buildtype can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\nTakes a string or array of strings describing the license(s) the code is under.\nTo avoid ambiguity it is recommended to use a standardized\nlicense identifier from the SPDX license list.\nUsually this would be something like license : 'GPL-2.0-or-later', but if\nthe code has multiple licenses you can specify them as an array like this:\nlicense : ['proprietary', 'GPL-3.0-only']. Note that the text is informal\nand is only written to the dependency manifest. Meson does not do any license\nvalidation, you are responsible for verifying that you abide by all licensing\nterms. You can access the value in your Meson build files with\nmeson.project_license().\nTakes a string describing which Meson version the project requires.\nUsually something like >=0.28.0.\nSpecifies the top level directory name that holds Meson subprojects.\nThis is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\ndefault =\n  'subprojects'\nA free form string describing the version of this project.\nYou can access the value in your Meson build files\nwith meson.project_version(). (Since 0.57.0) this can also be a\nfile object pointing to a file that contains exactly one line of\ntext.\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        project_name\n        str\n        \n        \nThe name of the project.\n  \n        \n\n  \n  \n      \n    \n  \n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        default_options\n        \nlist[str]\n        \n        \nAccecpts strings in the form key=value\nwhich have the same format as options to meson configure.\nFor example to set the default project type you would\nset this: default_options : ['buildtype=debugoptimized']. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as buildtype can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\n  \n        \n\n  \n  \n      \n      \n        license\n        \nstr | list[str]\n        \n        \nTakes a string or array of strings describing the license(s) the code is under.\nTo avoid ambiguity it is recommended to use a standardized\nlicense identifier from the SPDX license list.\nUsually this would be something like license : 'GPL-2.0-or-later', but if\nthe code has multiple licenses you can specify them as an array like this:\nlicense : ['proprietary', 'GPL-3.0-only']. Note that the text is informal\nand is only written to the dependency manifest. Meson does not do any license\nvalidation, you are responsible for verifying that you abide by all licensing\nterms. You can access the value in your Meson build files with\nmeson.project_license().\n  \n        \n\n  \n  \n      \n      \n        meson_version\n        str\n        \n        \nTakes a string describing which Meson version the project requires.\nUsually something like >=0.28.0.\n  \n        \n\n  \n  \n      \n      \n        subproject_dir\n        str\n        \n        \nSpecifies the top level directory name that holds Meson subprojects.\nThis is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\n  \n        \n\n  default =\n  'subprojects'\n  \n  \n      \n      \n        version\n        \nstr | file\n\n        \n        \nA free form string describing the version of this project.\nYou can access the value in your Meson build files\nwith meson.project_version(). (Since 0.57.0) this can also be a\nfile object pointing to a file that contains exactly one line of\ntext.\n  \n        \n\n  \n  \n      \n    \n  \n"});