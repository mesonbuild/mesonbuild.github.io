fragment_downloaded_cb({"url":"Subprojects.html#commandline-options","fragment":"Command-line options\nThe usage of subprojects can be controlled by users and distros with\nthe following command-line options:\n--wrap-mode=nodownload\nMeson will not use the network to download any subprojects or\nfetch any wrap information. Only pre-existing sources will be used.\nThis is useful (mostly for distros) when you want to only use the\nsources provided by a software release, and want to manually handle\nor provide missing dependencies.\n--wrap-mode=nofallback\nMeson will not use subproject fallbacks for any dependency\ndeclarations in the build files, and will only look for them in the\nsystem. Note that this does not apply to unconditional subproject()\ncalls, and those are meant to be used for sources that cannot be\nprovided by the system, such as copylibs.\nThis option may be overridden by --force-fallback-for for specific\ndependencies.\n--wrap-mode=forcefallback\nMeson will not look at the system for any dependencies which have\nsubproject fallbacks available, and will only use subprojects for\nthem. This is useful when you want to test your fallback setup, or\nwant to specifically build against the library sources provided by\nyour subprojects.\n--force-fallback-for=list,of,dependencies\nMeson will not look at the system for any dependencies listed there,\nprovided a fallback was supplied when the dependency was declared.\nThis option takes precedence over --wrap-mode=nofallback, and when\nused in combination with --wrap-mode=nodownload will only work\nif the dependency has already been downloaded.\nThis is useful when your project has many fallback dependencies,\nbut you only want to build against the library sources for a few\nof them.\nWarning: This could lead to mixing system and subproject version of the\nsame library in the same process. Take this case as example:\n--wrap-mode=nopromote\nSince 0.56.0 Meson will automatically use wrap files found in subprojects\nand copy them into the main project. That new behavior can be disabled by\npassing --wrap-mode=nopromote. In that case only wraps found in the main\nproject will be used.\n\n\n--wrap-mode=nodownload\nMeson will not use the network to download any subprojects or\nfetch any wrap information. Only pre-existing sources will be used.\nThis is useful (mostly for distros) when you want to only use the\nsources provided by a software release, and want to manually handle\nor provide missing dependencies.\n\n\n--wrap-mode=nofallback\nMeson will not use subproject fallbacks for any dependency\ndeclarations in the build files, and will only look for them in the\nsystem. Note that this does not apply to unconditional subproject()\ncalls, and those are meant to be used for sources that cannot be\nprovided by the system, such as copylibs.\nThis option may be overridden by --force-fallback-for for specific\ndependencies.\n\n\n--wrap-mode=forcefallback\nMeson will not look at the system for any dependencies which have\nsubproject fallbacks available, and will only use subprojects for\nthem. This is useful when you want to test your fallback setup, or\nwant to specifically build against the library sources provided by\nyour subprojects.\n\n\n--force-fallback-for=list,of,dependencies\nMeson will not look at the system for any dependencies listed there,\nprovided a fallback was supplied when the dependency was declared.\nThis option takes precedence over --wrap-mode=nofallback, and when\nused in combination with --wrap-mode=nodownload will only work\nif the dependency has already been downloaded.\nThis is useful when your project has many fallback dependencies,\nbut you only want to build against the library sources for a few\nof them.\nWarning: This could lead to mixing system and subproject version of the\nsame library in the same process. Take this case as example:\n\nLibraries glib-2.0 and gstreamer-1.0 are installed on your system.\n\ngstreamer-1.0 depends on glib-2.0, pkg-config file gstreamer-1.0.pc\nhas Requires: glib-2.0.\nIn your application build definition you do:\nexecutable('app', ...,\n  dependencies: [\n    dependency('glib-2.0', fallback: 'glib'),\n    dependency('gstreamer-1.0', fallback: 'gstreamer')],\n)\n\n\nYou configure with --force-fallback-for=glib.\nThis result in linking to two different versions of library glib-2.0\nbecause dependency('glib-2.0', fallback: 'glib') will return the\nsubproject dependency, but dependency('gstreamer-1.0', fallback: 'gstreamer')\nwill not fallback and return the system dependency, including glib-2.0\nlibrary. To avoid that situation, every dependency that itself depend on\nglib-2.0 must also be forced to fallback, in this case with\n--force-fallback-for=glib,gsteamer.\n\n\n\n--wrap-mode=nopromote\nSince 0.56.0 Meson will automatically use wrap files found in subprojects\nand copy them into the main project. That new behavior can be disabled by\npassing --wrap-mode=nopromote. In that case only wraps found in the main\nproject will be used.\n\n\n\nLibraries glib-2.0 and gstreamer-1.0 are installed on your system.\n\ngstreamer-1.0 depends on glib-2.0, pkg-config file gstreamer-1.0.pc\nhas Requires: glib-2.0.\nIn your application build definition you do:\nexecutable('app', ...,\n  dependencies: [\n    dependency('glib-2.0', fallback: 'glib'),\n    dependency('gstreamer-1.0', fallback: 'gstreamer')],\n)\n\n\nYou configure with --force-fallback-for=glib.\nThis result in linking to two different versions of library glib-2.0\nbecause dependency('glib-2.0', fallback: 'glib') will return the\nsubproject dependency, but dependency('gstreamer-1.0', fallback: 'gstreamer')\nwill not fallback and return the system dependency, including glib-2.0\nlibrary. To avoid that situation, every dependency that itself depend on\nglib-2.0 must also be forced to fallback, in this case with\n--force-fallback-for=glib,gsteamer.\n\n"});