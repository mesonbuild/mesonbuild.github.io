fragment_downloaded_cb({"url":"D.html#page-description","fragment":"Meson has support for compiling D programs. A minimal meson.build\nfile for D looks like this:\nIf you are using the\nversion()\nfeature for conditional compilation, you can use it using the\nd_module_versions target property:\nFor debugging, debug()\nconditions are compiled automatically in debug builds, and extra\nidentifiers can be added with the d_debug argument:\nIf you are using embedded unittest\nfunctions, your source code\nneeds to be compiled twice, once in regular mode, and once with\nunittests active. This is done by setting the d_unittest target\nproperty to true. Meson will only ever pass the respective\ncompiler's -unittest flag, and never have the compiler generate an\nempty main function. If you need that feature in a portable way,\ncreate an empty main() function for unittests yourself, since the\nGNU D compiler does not have this feature.\nThis is an example for using D unittests with Meson:\nBuilding D libraries is a straightforward process, not different from\nhow C libraries are built in Meson. You should generate a pkg-config\nfile and install it, in order to make other software on the system\nfind the dependency once it is installed.\nThis is an example on how to build a D shared library:\nIt is important to make the D sources install in a subdirectory in the\ninclude path, in this case /usr/include/d/mylib/mylib. All D\ncompilers include the /usr/include/d directory by default, and if\nyour library would be installed into /usr/include/d/mylib, there is\na high chance that, when you compile your project again on a machine\nwhere you installed it, the compiler will prefer the old installed\ninclude over the new version in the source tree, leading to very\nconfusing errors.\nThis is an example of how to use the D library we just built and\ninstalled in an application:\nPlease keep in mind that the library and executable would both need to\nbe built with the exact same D compiler and D compiler version. The D\nABI is not stable across compilers and their versions, and mixing\ncompilers will lead to problems.\nDUB is a fully integrated build system for D, but it is also a way to\nprovide dependencies. Adding dependencies from the D package\nregistry is pretty straight forward. You can\nfind how to do this in\nDependencies. You can also\nautomatically generate a dub.json file as explained in\nDlang.\n"});