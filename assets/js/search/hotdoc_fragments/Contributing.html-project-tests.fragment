fragment_downloaded_cb({"url":"Contributing.html#project-tests","fragment":"Project tests\nSubsets of project tests can be selected with\n./run_project_tests.py --only option. This can save a great deal of\ntime when only a certain part of Meson is being tested.\nFor example, a useful and easy contribution to Meson is making\nsure the full set of compilers is supported. One could for example test\nvarious Fortran compilers by setting FC=ifort or FC=flang or similar\nwith ./run_project_test.py --only fortran.\nSome families of tests require a particular backend to run.\nFor example, all the CUDA project tests run and pass on Windows via\n./run_project_tests.py --only cuda --backend ninja\nEach project test is a standalone project that can be compiled on its\nown. They are all in the test cases subdirectory. The simplest way to\nrun a single project test is to do something like ./meson.py test\\ cases/common/1\\ trivial builddir. The one exception to this is test cases/unit directory discussed below.\nThe test cases in the common subdirectory are meant to be run always\nfor all backends. They should only depend on C and C++, without any\nexternal dependencies such as libraries. Tests that require those are\nin the test cases/frameworks directory. If there is a need for an\nexternal program in the common directory, such as a code generator, it\nshould be implemented as a Python script. The goal of test projects is\nalso to provide sample projects that end users can use as a base for\ntheir own projects.\nAll project tests follow the same pattern: they are configured,\ncompiled, tests are run and finally install is run. Passing means that\nconfiguring, building and tests succeed and that installed files match\nthose expected.\nAny tests that require more thorough analysis, such as checking that\ncertain compiler arguments can be found in the command line or that\nthe generated pkg-config files actually work should be done with a\nunit test.\nAdditionally:\ncrossfile.ini and nativefile.ini are passed to the configure step with\n--cross-file and --native-file options, respectively.\nmlog.cmd_ci_include() can be called from anywhere inside Meson to\ncapture the contents of an additional file into the CI log on failure.\nProjects needed by unit tests are in the test cases/unit\nsubdirectory. They are not run as part of ./run_project_tests.py.\n\n\ncrossfile.ini and nativefile.ini are passed to the configure step with\n--cross-file and --native-file options, respectively.\n\n\nmlog.cmd_ci_include() can be called from anywhere inside Meson to\ncapture the contents of an additional file into the CI log on failure.\n\n\n"});