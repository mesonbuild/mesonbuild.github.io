fragment_downloaded_cb({"url":"Rust-module.html#page-description","fragment":"(new in 0.57.0)\nNote Unstable modules make no backwards compatible API guarantees.\nThe rust module provides helper to integrate rust code into Meson. The\ngoal is to make using rust in Meson more pleasant, while still\nremaining mesonic, this means that it attempts to make Rust work more\nlike Meson, rather than Meson work more like rust.\nThis function creates a new rust unittest target from an existing rust\nbased target, which may be a library or executable. It does this by\ncopying the sources and arguments passed to the original target and\nadding the --test argument to the compilation, then creates a new\ntest target which calls that executable, using the rust test protocol.\nThis accepts all of the keyword arguments as the\ntest function except protocol, it will set\nthat automatically.\nAdditional, test only dependencies may be passed via the dependencies\nargument.\nThis function wraps bindgen to simplify creating rust bindings around C\nlibraries. This has two advantages over hand-rolling ones own with a\ngenerator or custom_target:\nIt takes the following keyword arguments\nIf the header depeneds on generated headers, those headers must be passed to\nbindgen as well to ensure proper dependency ordering, static headers do not\nneed to be passed, as a proper depfile is generated:\n\nIt handles include_directories, so one doesn't have to manually convert them to -I...\n\nIt automatically sets up a depfile, making the results more reliable\n\n\ninput — A list of Files, Strings, or CustomTargets. The first element is\nthe header bindgen will parse, additional elements are dependencies.\noutput — the name of the output rust file\ninclude_directories — A list of include_directories objects, these are\npassed to clang as -I arguments\nc_args — A list of string arguments to pass to clang untouched\nargs — A list of string arguments to pass to bindgen untouched.\n\n"});