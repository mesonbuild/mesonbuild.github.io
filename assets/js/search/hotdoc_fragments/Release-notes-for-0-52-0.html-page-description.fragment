fragment_downloaded_cb({"url":"Release-notes-for-0-52-0.html#page-description","fragment":"Previously the i18n module has errored out when gettext tools are\nnot installed on the system. Starting with this version they will\nbecome no-ops instead. This makes it easier to build projects on\nminimal environments (such as when bootstrapping) that do not have\ntranslation tools installed.\nenvironment() now accepts a dictionary as first argument.  If\nprovided, each key/value pair is added into the environment_object\nas if set() method was called for each of them.\nOn the various functions that take an env: keyword argument, you may\nnow give a dictionary.\nThis function creates a new top-level target. Like all top-level targets, this\nintegrates with the selected backend. For instance, with Ninja you can\nrun it as ninja target_name. This is a dummy target that does not execute any\ncommand, but ensures that all dependencies are built. Dependencies can be any\nbuild target (e.g. return value of executable(), custom_target(), etc)\nSetting sys_root in the [properties] section of your cross file will now set\nPKG_CONFIG_SYSROOT_DIR automatically for host system dependencies when\ncross compiling.\nmeson test --gdb testname invokes GDB with the specific test case. However, sometimes GDB is not in the path or a GDB replacement is wanted.\nTherefore, a --gdb-path argument was added to specify which binary is executed (per default gdb):\nillumos (and hopefully Solaris) support has been dramatically improved, and one\ncan reasonably expect projects to compile.\nOn macOS there is no protected visibility, which results in the visbility\ncheck always failing. 0.52.0 introduces two changes to improve this situation:\nThese new attributes are:\nIf clang-tidy is installed and the project's source root contains a\n.clang-tidy (or _clang-tidy) file, Meson will automatically define\na clang-tidy target that runs Clang-Tidy on all source files.\nIf you have defined your own clang-tidy target, Meson will not\ngenerate its own target.\nAdd dependency('blocks') to use the Clang blocks extension.\nThis has always been possible, but there are some additional restrictions on\nmacOS (mainly do to Apple only features). With the linker internal\nre-architecture this has become possible\n0.52.0 inclues a massive refactor of the representaitons of compilers to\ntease apart the representations of compilers and dynamic linkers (ld). This\nfixes a number of compiler/linker combinations. In particular this fixes\nuse GCC and vanilla clang on macOS.\nTo allow shallow cloning, an option depth has been added to wrap-git.\nThis applies recursively to submodules when clone-recursive is set to true.\nNote that the git server may have to be configured to support shallow cloning\nnot only for branches but also for tags.\nSourceSet objects now provide the all_dependencies() method, that\ncomplement the existing all_sources() method.\nIndividual tests or a list of tests from run_project_tests.py can be selected like:\nThis assists Meson development by only running the tests for the portion of Meson being worked on during local development.\nMeson now supports compiling code to Webassembly using the Emscripten\ncompiler. As with most things regarding Webassembly, this support is\nsubject to change.\nA new version keyword argument has been added to find_program to specify\nthe required version. See dependency() for argument format.\nThe version of the program is determined by running program_name --version\ncommand. If stdout is empty it fallbacks to stderr. If the output contains more\ntext than simply a version number, only the first occurrence of numbers separated\nby dots is kept. If the output is more complicated than that, the version\nchecking will have to be done manually using run_command().\nLike shared_library(), shared_module() now accepts\nvs_module_defs argument for controlling symbol exports, etc.\nStatic libraries had numerous shortcomings in the past, especially when using\nuninstalled static libraries. This release brings many internal changes in the\nway they are handled, including:\nMany projects have been using extract_all_objects() to work around those issues,\nand hopefully those hacks could now be removed. Since this is a pretty large\nchange, please double check if your static libraries behave correctly, and\nreport any regression.\nkconfig.load() may now accept a configure_file() as input file.\nThe dependency() function now has a include_type kwarg. It can take the\nvalues 'preserve', 'system' and 'non-system'. If it is set to 'system',\nall include directories of the dependency are marked as system dependencies.\nThe default value of include_type is 'preserve'.\nAdditionally, it is also possible to check and change the include_type\nstate of an existing dependency object with the new include_type() and\nas_system() methods.\ninput: now accepts multiple input file names for command:-configured file.\ndepfile: keyword argument is now accepted. The dependency file can\nlist all the additional files the configure target depends on.\nSimplify native flag behavior in add_global_arguments,\nadd_global_link_arguments, add_project_arguments and\nadd_project_link_arguments. The rules are now very simple:\nnative: true affects native: true targets\nnative: false affects native: false targets\nNo native flag is the same as native: false\nThis further simplifies behavior to match the \"build vs host\" decision done in\nlast release with c_args vs build_c_args. The underlying motivation in both\ncases is to execute the same commands whether the overall build is native or\ncross.\nAdded the function is_disabler(var). Returns true if a variable is a disabler\nand false otherwise.\ngnome.gtkdoc() now has a check keyword argument. If true runs it will run\ngtkdoc-check when running unit tests. Note that this has the downside of\nrebuilding the doc for each build, which is often very slow. It usually should\nbe enabled only in CI.\ngnome.gtkdoc() now returns a target object that can be passed as dependency to\nother targets using generated doc files (e.g. in content_files of another doc).\nPreviously creating a source archive could only be done with ninja dist. Starting with this release Meson provides a top level dist\nthat can be invoked directly. It also has a command line option to\ndetermine which kinds of archives to create:\n\nvisibility:default\nvisibility:hidden\nvisibility:internal\nvisibility:protected\n\n\n\nlink_whole: of static libraries. In the example below, lib2 used to miss\nsymbols from lib1 and was unusable.\n\n\n\nlink_with: of a static library with an uninstalled static library. In the\nexample below, lib2 now implicitly promote link_with: to link_whole: because\nthe installed lib2 would oterhwise be unusable.\n\n\npkg-config generator do not include uninstalled static libraries. In the example\nbelow, the generated .pc file used to be unusable because it contained\nLibs.private: -llib1 and lib1.a is not installed. lib1 is now omitted\nfrom the .pc file because the link_with: has been promoted to\nlink_whole: (see above) and thus lib1 is not needed to use lib2.\n\n\n\nnative: true affects native: true targets\n\n\nnative: false affects native: false targets\n\n\nNo native flag is the same as native: false\n\n\n"});