fragment_downloaded_cb({"url":"Running-Meson.html#page-description","fragment":"There are two different ways of invoking Meson. First, you can run it\ndirectly from the source tree with the command\n/path/to/source/meson.py. Meson may also be installed in which case\nthe command is simply meson. In this manual we only use the latter\nformat for simplicity.\nAt the time of writing only a command line version of Meson is\navailable. This means that Meson must be invoked using the terminal.\nIf you wish to use the MSVC compiler, you need to run Meson under\n\"Visual Studio command prompt\".\nAll available Meson commands are listed on the commands reference\npage.\nLet us assume that we have a source tree that has a Meson build\nsystem. This means that at the topmost directory has a file called\nmeson.build. We run the following commands to get the build started.\nWe invoke Meson with the setup command, giving it the location of the build\ndirectory. Meson uses out of source\nbuilds.\nHint: The syntax of Meson is meson [command] [arguments] [options].\nThe setup command takes a builddir and a srcdir argument. If no\nsrcdir is given Meson will deduce the srcdir based on pwd and\nthe location of meson.build.\nMeson then loads the build configuration file and writes the\ncorresponding build backend in the build directory. By default Meson\ngenerates a debug build, which turns on basic warnings and debug\ninformation and disables compiler optimizations.\nAdditionally, the invocation can pass options to Meson. The list of\noptions is documented here.\nYou can specify a different type of build with the --buildtype command line\nargument. It can have one of the following values.\nThe build directory is mandatory. The reason for this is that it\nsimplifies the build process immensely. Meson will not under any\ncircumstances write files inside the source directory (if it does, it\nis a bug and should be fixed). This means that the user does not need\nto add a bunch of files to their revision control's ignore list. It\nalso means that you can create arbitrarily many build directories for\nany given source tree.\nFor example, if we wanted to test building the source code with the\nClang compiler instead of the system default, we could just type the\nfollowing commands:\nThis separation is even more powerful if your code has multiple\nconfiguration options (such as multiple data backends). You can create\na separate subdirectory for each of them. You can also have build\ndirectories for optimized builds, code coverage, static analysis and\nso on. They are all neatly separated and use the same source tree.\nChanging between different configurations is just a question of\nchanging to the corresponding directory.\nUnless otherwise mentioned, all following command line invocations are\nmeant to be run in the source directory.\nBy default Meson will use the Ninja backend to build your project. If\nyou wish to use any of the other backends, you need to pass the\ncorresponding argument during configuration time. As an example, here\nis how you would use Meson to generate a Visual studio solution.\nYou can then open the generated solution with Visual Studio and\ncompile it in the usual way. A list of backends can be obtained with\nmeson setup --help.\nSometimes you want to add extra compiler flags, this can be done by\npassing them in environment variables when calling Meson. See the\nreference\ntables\nfor a list of all the environment variables. Be aware however these\nenvironment variables are only used for the native compiler and will\nnot affect the compiler used for cross-compiling, where the flags\nspecified in the cross file will be used.\nFurthermore it is possible to stop Meson from adding flags itself by\nusing the --buildtype=plain option, in this case you must provide\nthe full compiler and linker arguments needed.\nTo start the build, simply type the following command.\nSee meson compile description for more info.\nBy default Meson uses the Ninja build\nsystem to actually build the code. To start\nthe build, simply type the following command.\nThe main usability difference between Ninja and Make is that Ninja\nwill automatically detect the number of CPUs in your computer and\nparallelize itself accordingly. You can override the amount of\nparallel processes used with the command line argument -j <num processes>.\nIt should be noted that after the initial configure step ninja is\nthe only command you ever need to type to compile. No matter how you\nalter your source tree (short of moving it to a completely new\nlocation), Meson will detect the changes and regenerate itself\naccordingly. This is especially handy if you have multiple build\ndirectories. Often one of them is used for development (the \"debug\"\nbuild) and others only every now and then (such as a \"static analysis\"\nbuild). Any configuration can be built just by cd'ing to the\ncorresponding directory and running Ninja.\nMeson provides native support for running tests. The command to do\nthat is simple.\nSee meson test description for more info.\nMeson does not force the use of any particular testing framework. You\nare free to use GTest, Boost Test, Check or even custom executables.\nNote: it can be also invoked directly with ninja with the following command:\nInstalling the built software is just as simple.\nSee meson install description for more info.\nNote that Meson will only install build targets explicitly tagged as\ninstallable, as detailed in the installing targets\ndocumentation.\nBy default Meson installs to /usr/local. This can be changed by\npassing the command line argument --prefix /your/prefix to Meson\nduring configure time. Meson also supports the DESTDIR variable used\nin e.g. building packages. It is used like this:\nNote: it can be also invoked directly with ninja with the following\ncommand:\nMeson has a standard command line help feature. It can be accessed\nwith the following command.\nMeson exits with status 0 if successful, 1 for problems with the\ncommand line or meson.build file, and 2 for internal errors.\n\n\n\n value\n meaning\n\n\n\n\n plain\n\n no extra build flags are used, even for compiler warnings, useful for distro packagers and other cases where you need to specify all arguments by yourself\n\n\n debug\n\n debug info is generated but the result is not optimized, this is the default\n\n\n debugoptimized\n\n debug info is generated and the code is optimized (on most compilers this means -g -O2)\n\n\n release\n\n full optimization, no debug info\n\n\n\n"});