fragment_downloaded_cb({"url":"Dependencies.html#cmake","fragment":"CMake\nMeson can use the CMake find_package() function to detect\ndependencies with the builtin Find<NAME>.cmake modules and exported\nproject configurations (usually in /usr/lib/cmake). Meson is able to\nuse both the old-style <NAME>_LIBRARIES variables as well as\nimported targets.\nIt is possible to manually specify a list of CMake targets that should\nbe used with the modules property. However, this step is optional\nsince Meson tries to automatically guess the correct target based on\nthe name of the dependency.\nDepending on the dependency it may be necessary to explicitly specify\na CMake target with the modules property if Meson is unable to guess\nit automatically.\nSupport for adding additional COMPONENTS for the CMake\nfind_package lookup is provided with the components kwarg\n(introduced in 0.54.0). All specified componets will be passed\ndirectly to find_package(COMPONENTS).\nSupport for packages which require a specified version for CMake\nfind_package to succeed is provided with the cmake_package_version\nkwarg (introduced in 0.57.0). The specified cmake_package_version\nwill be passed directly as the second parameter to find_package.\nIt is also possible to reuse existing Find<name>.cmake files with\nthe cmake_module_path property. Using this property is equivalent to\nsetting the CMAKE_MODULE_PATH variable in CMake. The path(s) given\nto cmake_module_path should all be relative to the project source\ndirectory. Absolute paths should only be used if the CMake files are\nnot stored in the project itself.\nAdditional CMake parameters can be specified with the cmake_args\nproperty.\n"});