fragment_downloaded_cb({"url":"Reference-manual_functions.html#subproject","fragment":"subproject()\nTakes the project specified in the positional argument and brings that\nin the current build specification by returning a subproject object.\nSubprojects must always be placed inside\nthe subprojects directory at the top source directory. So for\nexample a subproject called foo must be located in\n${MESON_SOURCE_ROOT}/subprojects/foo.\nNote that you can use the returned subproject object\nto access any variable in the\nsubproject. However, if you want to use a dependency object from\ninside a subproject, an easier way is to use the fallback: keyword\nargument to dependency().\nSee additional documentation.\n\n\n\n\ndefault_options (since 0.37.0): an array of default option values\nthat override those set in the subproject's meson.options\n(like default_options in project, they only have effect when\nMeson is run for the first time, and command line arguments override\nany default options in build files). (since 0.54.0): default_library\nbuilt-in option can also be overridden.\n\nversion: works just like the same as in dependency.\nIt specifies what version the subproject should be, as an example >=1.0.1\n\n\nrequired (since 0.48.0): By default, required is true and\nMeson will abort if the subproject could not be setup. You can set\nthis to false and then use the .found() method on the subproject\nobject. You may also pass the value of a\nfeature option, same as\ndependency().\n\n"});