fragment_downloaded_cb({"url":"Build-options.html#features","fragment":"Features\nA feature option has three states: enabled, disabled or auto.\nIt is intended to be passed as value for the required keyword\nargument of most functions. Currently supported in\nadd_languages(),\ncompiler.find_library(),\ncompiler.has_header(),\ndependency(),\nfind_program(),\nimport() and\nsubproject()\nfunctions.\nWhen getting the value of this type of option using get_option(), a\nspecial feature object is returned instead\nof the string representation of the option's value. This object can be\npassed to required:\nTo check the value of the feature, the object has three methods\nreturning a boolean and taking no argument:\nThis is useful for custom code depending on the feature:\nIf the value of a feature option is set to auto, that value is\noverridden by the global auto_features option (which defaults to\nauto). This is intended to be used by packagers who want to have\nfull control on which dependencies are required and which are\ndisabled, and not rely on build-deps being installed (at the right\nversion) to get a feature enabled. They could set\nauto_features=enabled to enable all features and disable explicitly\nonly the few they don't want, if any.\nThis type is available since version 0.47.0\n\n\nenabled is the same as passing required : true.\n\nauto is the same as passing required : false.\n\ndisabled do not look for the dependency and always return 'not-found'.\n\n\n.enabled()\n.disabled()\n.auto()\n\n"});