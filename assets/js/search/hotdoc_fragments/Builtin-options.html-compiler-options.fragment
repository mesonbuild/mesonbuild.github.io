fragment_downloaded_cb({"url":"Builtin-options.html#compiler-options","fragment":"Compiler options\nSame caveats as base options above.\nThe following options are available. They can be set by passing\n-Doption=value to meson. Note that both the options themselves and\nthe possible values they can take will depend on the target platform\nor compiler being used:\nThe default values of c_winlibs and cpp_winlibs are in\ncompiler-specific argument forms, but the libraries are: kernel32,\nuser32, gdi32, winspool, shell32, ole32, oleaut32, uuid, comdlg32,\nadvapi32.\nAll these <lang>_* options are specified per machine. See below in\nthe specifying options per machine\nsection on how to do this in cross builds.\nWhen using MSVC, cpp_eh=none will result in no exception flags being\npassed, while the cpp_eh=[value] will result in /EH[value]. Since\n0.51.0 cpp_eh=default will result in /EHsc on MSVC. When using\ngcc-style compilers, nothing is passed (allowing exceptions to work),\nwhile cpp_eh=none passes -fno-exceptions.\nSince 0.54.0 The <lang>_thread_count option can be used to control\nthe value passed to -s PTHREAD_POOL_SIZE when using emcc. No other\nc/c++ compiler supports this option.\nSince 0.63.0 all compiler options can be set per subproject, see\nhere for details on how the default value\nis inherited from the main project. This is useful, for example, when the main\nproject requires C++11, but a subproject requires C++14. The cpp_std value\nfrom the subproject's default_options is now respected.\nSince 1.3.0 c_std and cpp_std options now accept a list of values.\nProjects that prefer GNU C, but can fallback to ISO C, can now set, for\nexample, default_options: 'c_std=gnu11,c11', and it will use gnu11 when\navailable, but fallback to c11 otherwise. It is an error only if none of the\nvalues are supported by the current compiler.\nLikewise, a project that can take benefit of c++17 but can still build with\nc++11 can set default_options: 'cpp_std=c++17,c++11'.\nThis allows us to deprecate gnuXX values from the MSVC compiler. That means\nthat default_options: 'c_std=gnu11' will now print a warning with MSVC\nbut fallback to c11. No warning is printed if at least one\nof the values is valid, i.e. default_options: 'c_std=gnu11,c11'.\nIn the future that deprecation warning will become an hard error because\nc_std=gnu11 should mean GNU is required, for projects that cannot be\nbuilt with MSVC for example.\n\n\n\n Option\n Default value\n Possible values\n Description\n\n\n\n\n c_args\n\n free-form comma-separated list\n C compile arguments to use\n\n\n c_link_args\n\n free-form comma-separated list\n C link arguments to use\n\n\n c_std\n none\n none, c89, c99, c11, c17, c18, c2x, gnu89, gnu99, gnu11, gnu17, gnu18, gnu2x\n C language standard to use\n\n\n c_winlibs\n see below\n free-form comma-separated list\n Standard Windows libs to link against\n\n\n c_thread_count\n 4\n integer value ≥ 0\n Number of threads to use with emcc when using threads\n\n\n cpp_args\n\n free-form comma-separated list\n C++ compile arguments to use\n\n\n cpp_link_args\n\n free-form comma-separated list\n C++ link arguments to use\n\n\n cpp_std\n none\n none, c++98, c++03, c++11, c++14, c++17, c++20 c++2a, c++1z, gnu++03, gnu++11, gnu++14, gnu++17, gnu++1z,  gnu++2a, gnu++20, vc++14, vc++17, vc++20, vc++latest\n C++ language standard to use\n\n\n cpp_debugstl\n false\n true, false\n C++ STL debug mode\n\n\n cpp_eh\n default\n none, default, a, s, sc\n C++ exception handling type\n\n\n cpp_rtti\n true\n true, false\n Whether to enable RTTI (runtime type identification)\n\n\n cpp_thread_count\n 4\n integer value ≥ 0\n Number of threads to use with emcc when using threads\n\n\n cpp_winlibs\n see below\n free-form comma-separated list\n Standard Windows libs to link against\n\n\n fortran_std\n none\n [none, legacy, f95, f2003, f2008, f2018]\n Fortran language standard to use\n\n\n cuda_ccbindir\n\n filesystem path\n CUDA non-default toolchain directory to use (-ccbin) (Added in 0.57.1)\n\n\n\n\n"});