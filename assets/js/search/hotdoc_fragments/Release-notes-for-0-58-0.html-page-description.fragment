fragment_downloaded_cb({"url":"Release-notes-for-0-58-0.html#page-description","fragment":"Returns the root source and build directory of the main project.\nThose are direct replacement for meson.build_root() and meson.source_root()\nthat have been deprecated since 0.56.0. In some rare occasions they could not be\nreplaced by meson.project_source_root() or meson.current_source_dir(), in\nwhich case the new methods can now be used instead. Old methods are still\ndeprecated because their names are not explicit enough and created many issues\nwhen a project is being used as a subproject.\nNew method meson.add_devenv() adds an environment() object\nto the list of environments that will be applied when using meson devenv\ncommand line. This is useful for developpers who wish to use the project without\ninstalling it, it is often needed to set for example the path to plugins\ndirectory, etc. Alternatively, a list or dictionary can be passed as first\nargument.\nNew command line has been added: meson devenv -C builddir [<command>].\nIt runs a command, or open interactive shell if no command is provided, with\nenvironment setup to run project from the build directory, without installation.\nThese variables are set in environment in addition to those set using meson.add_devenv():\nMeson used to add the -pipe command line argument to all compilers\nthat supported it, but no longer does. If you need this, then you can\nadd it manually. However note that you should not do this unless you\nhave actually measured that it provides performance improvements. In\nour tests we could not find a case where adding -pipe made\ncompilation faster and using -pipe can cause sporadic build\nfailures in certain\ncases.\nmeson.add_dist_script() can now be invoked from a subproject, it was a hard\nerror in earlier versions. Subproject dist scripts will only be executed\nwhen running meson dist --include-subprojects. MESON_PROJECT_SOURCE_ROOT,\nMESON_PROJECT_BUILD_ROOT and MESON_PROJECT_DIST_ROOT environment variables\nare set when dist scripts are run. They are identical to MESON_SOURCE_ROOT,\nMESON_BUILD_ROOT and MESON_DIST_ROOT for main project scripts, but for\nsubproject scripts they have the path to the root of the subproject appended,\nusually subprojects/<subproject-name>.\nNote that existing dist scripts likely need to be modified to use those new\nenvironment variables instead of MESON_DIST_ROOT to work properly when used\nfrom a subproject.\nIf you do the following:\nthen the output directory of the custom target is automatically added\nto the header search path. This is convenient, but sometimes it can\nlead to problems. Starting with this version, the directory will no\nlonger be put in the search path if the target has\nimplicit_include_directories: false. In these cases you need to set\nup the path manually with include_directories.\nappend() and prepend() methods can now be called multiple times\non the same varname. Earlier Meson versions would warn and only the last\nopperation was taking effect.\ndep.get_variable() now has varname as first positional argument.\nIt is used as default value for cmake, pkgconfig, configtool and internal\nkeyword arguments. It is useful in the common case where pkgconfig and internal\nuse the same variable name, in which case it's easier to write dep.get_variable('foo')\ninstead of dep.get_variable(pkgconfig: 'foo', internal: 'foo').\nWhen clang-format is installed and a .clang-format file is found at the main\nproject's root source directory, Meson automatically adds a clang-format target\nthat reformat all C and C++ files.\nIt is now possible to restrict files to be reformatted with optional\n.clang-format-include and .clang-format-ignore files.\nThe file .clang-format-include contains a list of patterns matching the files\nthat will be reformatted. The ** pattern matches this directory and all\nsubdirectories recursively. Empty lines and lines starting with # are ignored.\nIf .clang-format-include is not found, the pattern defaults to **/* which\nmeans all files recursively in the source directory but has the disadvantage to\nwalk the whole source tree which could be slow in the case it contains lots of\nfiles.\nExample of .clang-format-include file:\nThe file .clang-format-ignore contains a list of patterns matching the files\nthat will be excluded. Files matching the include list (see above) that match\none of the ignore pattern will not be reformatted. Unlike include patters, ignore\npatterns does not support ** and a single * match any characters including\npath separators. Empty lines and lines starting with # are ignored.\nThe build directory and file without a well known C or C++ suffix are always\nignored.\nExample of .clang-format-ignore file:\nA new target clang-format-check has been added. It returns an error code if\nany file needs to be reformatted. This is intended to be used by CI.\nIn addition to the conventional 'A string @0@ to be formatted @1@'.format(n, m)\nmethod of formatting strings in the Meson language, there's now the additional\nf'A string @n@ to be formatted @m@' notation that provides a non-positional\nand clearer alternative. Meson's format strings are currently restricted to\nidentity-expressions, meaning f'format @'m' + 'e'@' will not parse.\nIt is now possible to skip installation of some or all subprojects. This is\nuseful when subprojects are internal dependencies static linked into the main\nproject.\nBy default all subprojects are still installed.\nString objects now have a method called replace for replacing all instances of a\nsubstring in a string with another.\nIt's a pure subset of meson.get_external_property, and works strangely in\nhost == build configurations, since it would be more accurately described as\nget_host_property.\nReturn an opaque object that can be only be used in foreach statements.\nIt cause the foreach loop to be called with the value from start included\nto stop excluded with an increment of step after each loop.\nThe range object can also be assigned to a variable and indexed.\nThe Xcode backend has been much improved and should now we usable\nenough for day to day development.\nOptional dependency like below will now fallback to the subproject\ndefined in the wrap file in the case wrap_mode is set to forcefallback\nor force_fallback_for contains the subproject.\nJust like warning() and message(), error() can now take more than one\nargument that will be separated by space.\nLocale directories can now be passed to install_man:\nIt is now allowed to pass libraries generated by a custom_target() to\npkg-config file generator. The output filename must have a known library extension\nsuch as .a, .so, etc.\nWhen building projects such as those interacting with the JNI, you need access\nto a few header files located in a Java installation. This system dependency\nwill add the correct include paths to your target. It assumes that either\nJAVA_HOME will be set to a valid Java installation, or the default javac on\nyour system is a located in the bin directory of a Java installation. Note:\nsymlinks are resolved.\nCurrently this system dependency only works on linux, win32, and darwin.\nThis can easily be extended given the correct information about your compiler\nand platform in an issue.\nWhen using --reset option, the source tree of [wrap-file] subprojects is now\ndeleted and re-extracted from cached tarballs, or re-downloaded. This is because\nMeson has no way to know if the source tree or the wrap file has been modified,\nand --reset should guarantee that latest code is being used on next reconfigure.\nUse --reset with caution if you do local changes on non-git subprojects.\nCalling generator.process() with either a CustomTaget or Index of CustomTarget\nas files is now permitted.\nThis separates the Pkg-config and QMake based discovery methods into two\ndistinct classes in the backend. This allows using\ndependency.get_variable() and dependency.get_pkg_config_variable(), as\nwell as being a cleaner implementation.\nIt is now possible to purge a subprojects folder of artifacts created\nfrom wrap-based subprojects including anything in packagecache. This is useful\nwhen you want to return to a completely clean source tree or busting caches with\nstale patch directories or caches. By default the command will only print out\nwhat it is removing. You need to pass --confirm to the command for actual\nartifacts to be purged.\nBy default all wrap-based subprojects will be purged.\nIt is now possible to check whether a native property or a cross-file property\nexists with meson.has_external_property('foo'). This is useful if the\nproperty in question is a boolean and one wants to distinguish between\n\"set\" and \"not provided\" which can't be done the usual way by passing a\nfallback parameter to meson.get_external_property() in this particular case.\nBuild feature options can be passed to summary() as the value to be printed.\nThe b_sanitize option for enabling Address sanitizer now works with\nthe Visual Studio compilers. This requires a sufficiently new version\nof Visual\nStudio.\n\n\nMESON_DEVENV is defined to '1'.\n\nMESON_PROJECT_NAME is defined to the main project's name.\n\nPKG_CONFIG_PATH includes the directory where Meson generates -uninstalled.pc\nfiles.\n\nPATH includes every directory where there is an executable that would be\ninstalled into bindir. On windows it also includes every directory where there\nis a DLL needed to run those executables.\n\nLD_LIBRARY_PATH includes every directory where there is a shared library that\nwould be installed into libdir. This allows to run system application using\ncustom build of some libraries. For example running system GEdit when building\nGTK from git. On OSX the environment variable is DYLD_LIBRARY_PATH and\nPATH on Windows.\n\nGI_TYPELIB_PATH includes every directory where a GObject Introspection\ntypelib is built. This is automatically set when using gnome.generate_gir().\n\n\n\nmeson install -C builddir --skip-subprojects installs only the main project.\n\nmeson install -C builddir --skip-subprojects foo,bar installs the main project\nand all subprojects except for subprojects foo and bar if they are used.\n\n\n\nstart must be integer greater or equal to 0. Defaults to 0.\n\nstop must be integer greater or equal to start.\n\nstep must be integer greater or equal to 1. Defaults to 1.\n\n\n\nmeson subprojects purge prints non-cache wrap artifacts which will be\npurged.\n\nmeson subprojects purge --confirm purges non-cache wrap artifacts.\n\nmeson subprojects purge --confirm --include-cache also removes the cache\nartifacts.\n\nmeson subprojects purge --confirm subproj1 subproj2 removes non-cache wrap\nartifacts associated with the listed subprojects.\n\n"});