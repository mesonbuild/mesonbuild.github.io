fragment_downloaded_cb({"url":"Release-notes-for-0-57-0.html#page-description","fragment":"Meson can be instructed to load a project's version string from an\nexternal file like this:\nThe version file must contain exactly one line of text which will\nbe used as the project's version. If the line ends in a newline\ncharacter, it is removed.\nReading text files during configuration is now supported. This can be done at\nany time after project has been called\nThere are several problems with the above approach:\nfs.read replaces the above idiom thus:\nThey are not equivalent, though. Files read with fs.read create a\nconfiguration dependency on the file, and so if the COPYING file is modified,\nMeson will automatically reconfigure, guaranteeing the build is consistent. It\ncan be used for any properly encoded text files. It supports specification of\nnon utf-8 encodings too, so if you're stuck with text files in a different\nencoding, it can be passed as an argument. See the meson\nobject documentation for details.\nNew option to meson install command that does not actually install files, but\nonly prints messages.\nModules are a new C++ 20 feature for organising source code aiming to\nincrease compilation speed and reliability. This support is\nexperimental and may change in future releases. It only works with the\nlatest preview release of Visual Studio.\nA module for Qt6 is now available with the same functionality as the Qt5\nmodule.\nCurrently finding Qt6 is only available via qmake as pkg-config files aren't\ngenerated (see QTBUG-86080) and\nCMake support is not available for this module yet.\nA new unstable module has been added to make using Rust with Meson easier.\nCurrently, it adds a single function to ease defining Rust tests, as well as a\nwrapper around bindgen, making it easier to use.\nThis allows native Rust tests to be run and parsed by Meson; simply set the\nprotocol to rust and Meson takes care of the rest.\nThe /Od flag has been removed, as it is already the default in the MSVC compilers, and conflicts with other user options.\n/RTC1 conflicts with other RTC argument types as there are many different options, and has been removed by default.\nRun Time Checking can be enabled by manually adding /RTC1 or other RTC flags of your choice.\nThe debug buildtype for clang-cl added additional arguments compared to MSVC, which had more to do with optimization than debug. The arguments removed are /Ob0, /Od, /RTC1. (/Zi was also removed, but it is already added by default when debug is enabled.)\nIf these are important issues for you and would like builtin toggle options,\nplease file an issue in the Meson bug tracker.\nSetting the buildtype option to a value sets the debug and\noptimization options to predefined values. Traditionally setting the\noptions to other values would then change the buildtype to custom.\nThis is confusing and means that you can't use, for example, debug\nlevel g in debug buildtype even though it would make sense under\nmany circumstances.\nStarting with this release, the buildtype is only changed when the user\nexplicitly sets it; setting the build type modifies the debug and\noptimization options as before.\nMethods on the compiler object (such as compiles, links, has_header)\ncan be passed dependencies returned by declare_dependency, as long as they\nonly specify compiler/linker arguments or other dependencies that satisfy\nthe same requirements.\nDefault arguments are added to add_project() in case some tags are not found\nin configure_options: '--prefix=@PREFIX@', '--libdir=@PREFIX@/@LIBDIR@',\nand '--includedir=@PREFIX@/@INCLUDEDIR@'. It was previously considered a fatal\nerror to not specify them.\nWhen the verbose keyword argument is not specified, or is false, command outputs\nare written on file in <builddir>/meson-logs/.\nThe LD environment variable is not passed any more when running the configure\nscript. It caused issues because Meson sets LD to the CC linker wrapper but\nautotools expects it to be a real linker (e.g. /usr/bin/ld).\nPost-install update of various system wide caches. Each script will be executed\nonly once even if gnome.post_install() is called multiple times from multiple\nsubprojects. If DESTDIR is specified during installation all scripts will be\nskipped.\nCurrently supports glib-compile-schemas, gio-querymodules, and\ngtk-update-icon-cache.\nMeson was adding the /ZI compiler argument as an argument for Visual Studio\nin debug mode. This enables the edit-and-continue debugging in\nVisual Studio IDE's.\nUnfortunately, it is also extremely expensive and breaks certain use cases such\nas link time code generation. Edit and continue can be enabled by manually by\nadding /ZI to compiler arguments.\nThe /ZI argument has now been replaced by the /Zi argument for debug builds.\nIf this is an important issue for you and would like a builtin toggle option,\nplease file an issue in the Meson bug tracker.\nMeson now requires at least Python version 3.6 to run as Python 3.5\nreaches EOL on September 2020. In practice this should only affect\npeople developing on Ubuntu Xenial, which will similarly reach EOL in\nApril 2021.\nThe meson dist command can now create a distribution tarball for a subproject\nin the same git repository as the main project. This can be useful if parts of\nthe project (e.g. libraries) can be built and distributed separately. In that\ncase they can be moved into subprojects/mysub and running meson dist in that\ndirectory will now create a tarball containing only the source code from that\nsubdir and not the rest of the main project or other subprojects.\nFor example:\nEnvironment variables can now be passed to the custom_target() command.\nExternal program objects and dependency objects can be passed to\nsummary() as the value to be printed.\nIt is now possible to specify a requested package version for the CMake\ndependency backend via the new cmake_package_version kwarg in the\ndependency function.\nUntil now, meson test rebuilt the whole project independent of the\nrequested tests and their dependencies.  With this release, meson test\nwill only rebuild what is needed for the tests or suites that will be run.\nThis feature can be used, for example, to speed up bisecting regressions\nusing commands like the following:\nThis would find the broken commit automatically while at each step\nrebuilding only those pieces of code needed to run the test.\nHowever, this change could cause failures when upgrading to 0.57, if the\ndependencies are not specified correctly in meson.build.\nMeson now accepts file objects, including those produced by\nconfigure_file, as the first parameter of the various\nadd_*_script methods\nThe approach that meson has used for Vala unity builds is incorrect, we\ncombine the generated C files like we would any other C file. This is very\nfragile however, as the Vala compiler generates helper functions and macros\nwhich work fine when each file is a separate translation unit, but fail when\nthey are combined.\nThe console output format for meson test has changed in several ways.\nThe major changes are:\nif stdout is a tty, meson includes a progress report.\nif --print-errorlogs is specified, the logs are printed as tests run\nrather than afterwards.  All the error logs are printed rather than only\nthe first ten.\nif --verbose is specified and --num-processes specifies more than\none concurrent test, test output is buffered and printed after the\ntest finishes.\nthe console logs include a reproducer command.  If --verbose is\nspecified, the command is printed for all tests at the time they start;\notherwise, it is printed for failing tests at the time the test finishes.\nfor TAP and Rust tests, Meson is able to report individual subtests.  If\n--verbose is specified, all tests are reported.  If --print-errorlogs\nis specified, only failures are.\nIn addition, if --verbose was specified, Meson used not to generate\nlogs.  This limitation has now been removed.\nThese changes make the default ninja test output more readable, while\n--verbose output provides detailed, human-readable logs that\nare well suited to CI environments.\nmeson install command now has a --destdir argument that overrides DESTDIR\nfrom environment.\nmeson.add_install_script() now has skip_if_destdir keyword argument. If set\nto true the script won't be run if DESTDIR is set during installation. This is\nuseful in the case the script updates system wide caches, or performs other tasks\nthat are only needed when copying files into final destination.\nThe static library gains a new prelink keyword argument that can be\nused to prelink object files in that target. This is currently only\nsupported for the GNU toolchain, patches to add it to other compilers\nare most welcome.\nRust calls these editions, however, Meson generally refers to such language\nversions as \"standards\", or std for short.  Therefore, Meson's Rust support\nuses std for consistency with other languages.\nStarting from this version, sending a SIGINT signal (or pressing Ctrl-C)\nto meson test will interrupt the longest running test.  Pressing Ctrl-C\nthree times within a second will exit meson test.\nA new b_lto_mode option has been added, which may be set to default or\nthin. Thin only works for clang, and only with gnu gold, lld variants, or\nld64.\ntest(..., timeout: 0), or negative value, used to abort the test immediately\nbut now instead allow infinite duration. Note that omitting the timeout\nkeyword argument still defaults to 30s timeout.\nLikewise, add_test_setup(..., timeout_multiplier: 0), or\nmeson test --timeout-multiplier 0, or negative value, disable tests timeout.\nBoth the gnu linker and lld support using threads for speeding up LTO, meson\nnow provides a knob for this: -Db_lto_threads. Currently this is only\nsupported for clang and gcc. Any positive integer is supported, 0 means\nauto. If the compiler or linker implements it's on auto we use that,\notherwise the number of threads on the machine is used.\nPreviously it aligned keys toward the center, but this was deemed harder\nto read than having everything left aligned.\nmsys bash may expand / to a path, breaking\nmeson rewrite kwargs set project / .... Passing // will be converted to\n/ by msys bash but in order to keep usage shell-agnostic, this release\nalso allows // as the id.  This way, meson rewrite kwargs set project // ... will work in both msys bash and other shells.\nAll keys of the configuration_data object can be obtained with the keys()\nmethod as an alphabetically sorted array.\n\n\"Disable Debug\" (/Od) is no longer manually specified for optimization levels {0,g} (it is already the default for MSVC).\n\"Run Time Checking\" (/RTC1) removed from debug buildtype by default\nClang-CL debug buildtype arguments now match MSVC arguments\nThere is now no difference between buildtype flags and debug + optimization flags\n\n\n\nDefault arguments are added to add_project() in case some tags are not found\nin configure_options: '--prefix=@PREFIX@', '--libdir=@PREFIX@/@LIBDIR@',\nand '--includedir=@PREFIX@/@INCLUDEDIR@'. It was previously considered a fatal\nerror to not specify them.\n\n\nWhen the verbose keyword argument is not specified, or is false, command outputs\nare written on file in <builddir>/meson-logs/.\n\n\nThe LD environment variable is not passed any more when running the configure\nscript. It caused issues because Meson sets LD to the CC linker wrapper but\nautotools expects it to be a real linker (e.g. /usr/bin/ld).\n\n\n\n\nif stdout is a tty, meson includes a progress report.\n\n\nif --print-errorlogs is specified, the logs are printed as tests run\nrather than afterwards.  All the error logs are printed rather than only\nthe first ten.\n\n\nif --verbose is specified and --num-processes specifies more than\none concurrent test, test output is buffered and printed after the\ntest finishes.\n\n\nthe console logs include a reproducer command.  If --verbose is\nspecified, the command is printed for all tests at the time they start;\notherwise, it is printed for failing tests at the time the test finishes.\n\n\nfor TAP and Rust tests, Meson is able to report individual subtests.  If\n--verbose is specified, all tests are reported.  If --print-errorlogs\nis specified, only failures are.\n\n\n"});