fragment_downloaded_cb({"url":"RefMan_functions.html#generator","fragment":"generator()\nSee also: custom_target()\nThis function creates a generator object that can\nbe used to run custom compilation commands. The only positional\nargument is the executable to use. It can either be a self-built\nexecutable or one returned by find_program.\nThe template strings passed to all the keyword arguments accept\nthe following special substitutions:\nEach string passed to the output keyword argument must be\nconstructed using one or both of these two substitutions.\nIn addition to the above substitutions, the arguments keyword\nargument also accepts the following:\nNOTE: Generators should only be used for outputs that will only\nbe used as inputs for a build_target() or a custom_target().\nWhen you use the processed output of a\ngenerator in multiple targets, the generator will be run multiple\ntimes to create outputs for each target. Each output will be created\nin a target-private directory @BUILD_DIR@.\nIf you want to generate files for general purposes such as for\ngenerating headers to be used by several sources, or data that will be\ninstalled, and so on, use a custom_target() instead.\n\n\n\n\n@PLAINNAME@: the complete input file name, e.g: foo.c becomes foo.c (unchanged)\n\n@BASENAME@: the base of the input filename, e.g.: foo.c.y becomes foo.c (extension is removed)\n\n\n\n@OUTPUT@: the full path to the output file\n\n@INPUT@: the full path to the input file\n\n@DEPFILE@: the full path to the depfile\n\n@SOURCE_DIR@: the full path to the root of the source tree\n\n@CURRENT_SOURCE_DIR@: this is the directory where the currently processed meson.build is located in\n\n@BUILD_DIR@: the full path to the root of the build dir where the output will be placed\n\n"});