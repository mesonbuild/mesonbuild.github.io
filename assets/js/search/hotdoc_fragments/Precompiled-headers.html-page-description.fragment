fragment_downloaded_cb({"url":"Precompiled-headers.html#page-description","fragment":"Parsing header files of system libraries is surprisingly expensive. A\ntypical source file has less than one thousand lines of code. In\ncontrast the headers of large libraries can be tens of thousands of\nlines. This is especially problematic with C++, where header-only\nlibraries are common and they may contain extremely complex code. This\nmakes them slow to compile.\nPrecompiled headers are a tool to mitigate this issue. Basically what\nthey do is parse the headers and then serialize the compiler's\ninternal state to disk. The downside of precompiled headers is that\nthey are tricky to set up. Meson has native support for precompiled\nheaders, but using them takes a little work.\nA precompiled header file is relatively simple. It is a header file\nthat contains #include directives for the system headers to\nprecompile. Here is a C++ example.\nIn Meson, precompiled header files are always per-target. That is, the\ngiven precompiled header is used when compiling every single file in\nthe target. Due to limitations of the underlying compilers, this\nheader file must not be in the same subdirectory as any of the source\nfiles. It is strongly recommended that you create a subdirectory\ncalled pch in the target directory and put the header files (and\nnothing else) there.\nIf you wish to compile your project without precompiled headers, you\ncan change the value of the pch option by passing -Db_pch=false\nargument to Meson at configure time or later with meson configure.\nYou can also toggle the use of pch in a configured build directory\nwith the GUI tool. You don't have to do any changes to the source\ncode. Typically this is done to test whether your project compiles\ncleanly without pch (that is, checking that its #includes are in\norder) and working around compiler bugs.\nOnce you have a file to precompile, you can enable the use of pch for\na given target with a pch keyword argument. As an example, let's\nassume you want to build a small C binary with precompiled headers.\nLet's say the source files of the binary use the system headers\nstdio.h and string.h. Then you create a header file\npch/myexe_pch.h with this content:\nAnd add this to meson:\nThat's all. You should note that your source files must not include\nthe file myexe_pch.h and you must not add the pch subdirectory to\nyour search path. Any modification of the original program files is\nnot necessary. Meson will make the compiler include the pch with\ncompiler options. If you want to disable pch (because of, say,\ncompiler bugs), it can be done entirely on the build system side with\nno changes to source code.\nYou can use precompiled headers on any build target. If your target\nhas multiple languages, you can specify multiple pch files like this.\nSince Meson version 0.50.0, precompiled headers with MSVC work just like\nwith GCC. Meson will automatically create the matching pch implementation\nfile for you.\nBefore version 0.50.0, in addition to the header file, Meson\nalso requires a corresponding source file. If your header is called\nfoo_pch.h, the corresponding source file is usually called\nfoo_pch.cpp and it resides in the same pch subdirectory as the\nheader. Its contents are this:\nTo enable pch, simply list both files in the target definition:\nThis form will work with both GCC and msvc, because Meson knows that\nGCC does not need a .cpp file and thus just ignores it.\nIt should be noted that due to implementation details of the MSVC\ncompiler, having precompiled headers for multiple languages in the\nsame target is not guaranteed to work.\n"});