fragment_downloaded_cb({"url":"Reference-manual.html#compiler-object","fragment":"\ncompiler object\nThis object is returned by\nmeson.get_compiler(lang). It represents a compiler\nfor a given language and allows you to query its properties. It has\nthe following methods:\nalignment(typename): returns the alignment of the type specified in\nthe positional argument, you can specify external dependencies to\nuse with dependencies keyword argument.\ncmd_array(): returns an array containing the command(s) for the compiler.\ncompiles(code): returns true if the code fragment given in the\npositional argument compiles, you can specify external dependencies\nto use with dependencies keyword argument, code can be either a\nstring containing source code or a file object pointing to the\nsource code.\ncompute_int(expr, ...'): computes the value of the given expression\n(as an example 1 + 2). When cross compiling this is evaluated with\nan iterative algorithm, you can specify keyword arguments low\n(defaults to -1024), high (defaults to 1024) and guess to\nspecify max and min values for the search and the value to try\nfirst.\nfind_library(lib_name, ...): tries to find the library specified in\nthe positional argument. The result\nobject can be used just like the return\nvalue of dependency. If the keyword argument required is false,\nMeson will proceed even if the library is not found. By default the\nlibrary is searched for in the system library directory\n(e.g. /usr/lib). This can be overridden with the dirs keyword\nargument, which can be either a string or a list of strings.\n(since 0.47.0) The value of a feature\noption can also be passed to the required keyword argument.\n(since 0.49.0) If the keyword argument disabler is true and the\ndependency couldn't be found, return a disabler object\ninstead of a not-found dependency. (since 0.50.0) The has_headers keyword\nargument can be a list of header files that must be found as well, using\nhas_header() method. All keyword arguments prefixed with header_ will be\npassed down to has_header() method with the prefix removed. (since 0.51.0)\nThe static keyword (boolean) can be set to true to limit the search to\nstatic libraries and false for dynamic/shared.\nfirst_supported_argument(list_of_strings): given a list of\nstrings, returns the first argument that passes the has_argument\ntest or an empty array if none pass.\nfirst_supported_link_argument(list_of_strings) (since 0.46.0):\ngiven a list of strings, returns the first argument that passes the\nhas_link_argument test or an empty array if none pass.\nget_define(definename): returns the given preprocessor symbol's\nvalue as a string or empty string if it is not defined.\n(since 0.47.0) This method will concatenate string literals as\nthe compiler would. E.g. \"a\" \"b\" will become \"ab\".\nget_id(): returns a string identifying the compiler. For example,\ngcc, msvc, and more.\nget_argument_syntax() (since 0.49.0): returns a string identifying the type\nof arguments the compiler takes. Can be one of gcc, msvc, or an undefined\nstring value. This method is useful for identifying compilers that are not\ngcc or msvc, but use the same argument syntax as one of those two compilers\nsuch as clang or icc, especially when they use different syntax on different\noperating systems.\nget_linker_id() (since 0.53.0): returns a string identifying the linker.\nFor example, ld.bfd, link, and more.\nget_supported_arguments(list_of_string) (since 0.43.0): returns\nan array containing only the arguments supported by the compiler,\nas if has_argument were called on them individually.\nget_supported_link_arguments(list_of_string) (since 0.46.0): returns\nan array containing only the arguments supported by the linker,\nas if has_link_argument were called on them individually.\nhas_argument(argument_name): returns true if the compiler accepts\nthe specified command line argument, that is, can compile code\nwithout erroring out or printing a warning about an unknown flag.\nhas_link_argument(argument_name) (since 0.46.0): returns true if\nthe linker accepts the specified command line argument, that is, can\ncompile and link code without erroring out or printing a warning\nabout an unknown flag. Link arguments will be passed to the\ncompiler, so should usually have the -Wl, prefix. On VisualStudio\na /link argument will be prepended.\nhas_function(funcname): returns true if the given function is\nprovided by the standard library or a library passed in with the\nargs keyword, you can specify external dependencies to use with\ndependencies keyword argument.\ncheck_header(header_name) (since 0.47.0): returns true if the\nspecified header is usable with the specified prefix,\ndependencies, and arguments. You can specify external dependencies\nto use with dependencies keyword argument and extra code to put\nabove the header test with the prefix keyword. In order to look\nfor headers in a specific directory you can use args : '-I/extra/include/dir, but this should only be used in exceptional\ncases for includes that can't be detected via pkg-config and passed\nvia dependencies. (since 0.50.0) The required keyword argument\ncan be used to abort if the header cannot be found.\nhas_header(header_name): returns true if the specified header\nexists, and is faster than check_header() since it only does a\npre-processor check. You can specify external dependencies to use\nwith dependencies keyword argument and extra code to put above the\nheader test with the prefix keyword. In order to look for headers\nin a specific directory you can use args : '-I/extra/include/dir,\nbut this should only be used in exceptional cases for includes that\ncan't be detected via pkg-config and passed via dependencies.\n(since 0.50.0) The required keyword argument can be used to\nabort if the header cannot be found.\nhas_header_symbol(headername, symbolname): detects\nwhether a particular symbol (function, variable, #define, type\ndefinition, etc) is declared in the specified header, you can\nspecify external dependencies to use with dependencies keyword\nargument. (since 0.50.0) The required keyword argument can be\nused to abort if the symbol cannot be found.\nhas_member(typename, membername): takes two arguments, type name\nand member name and returns true if the type has the specified\nmember, you can specify external dependencies to use with\ndependencies keyword argument.\nhas_members(typename, membername1, membername2, ...): takes at\nleast two arguments, type name and one or more member names, returns\ntrue if the type has all the specified members, you can specify\nexternal dependencies to use with dependencies keyword argument.\nhas_multi_arguments(arg1, arg2, arg3, ...) (since 0.37.0): the same as\nhas_argument but takes multiple arguments and uses them all in a\nsingle compiler invocation.\nhas_multi_link_arguments(arg1, arg2, arg3, ...) (since 0.46.0):\nthe same as has_link_argument but takes multiple arguments and\nuses them all in a single compiler invocation.\nhas_type(typename): returns true if the specified token is a type,\nyou can specify external dependencies to use with dependencies\nkeyword argument.\nlinks(code): returns true if the code fragment given in the\npositional argument compiles and links, you can specify external\ndependencies to use with dependencies keyword argument, code can\nbe either a string containing source code or a file object\npointing to the source code.  Since 0.60.0, if the file object's\nsuffix does not match the compiler object's language, the compiler\ncorresponding to the suffix is used to compile the source, while the\ntarget of the links method is used to link the resulting object file.\nrun(code): attempts to compile and execute the given code fragment,\nreturns a run result object, you can specify external dependencies\nto use with dependencies keyword argument, code can be either a\nstring containing source code or a file object pointing to the\nsource code.\nsymbols_have_underscore_prefix() (since 0.37.0): returns true\nif the C symbol mangling is one underscore (_) prefixed to the symbol.\nsizeof(typename, ...): returns the size of the given type\n(e.g. 'int') or -1 if the type is unknown, to add includes set\nthem in the prefix keyword argument, you can specify external\ndependencies to use with dependencies keyword argument.\nversion(): returns the compiler's version number as a string.\nhas_function_attribute(name) (since 0.48.0): returns true if the\ncompiler supports the GNU style (__attribute__(...)) name. This is\npreferable to manual compile checks as it may be optimized for compilers that\ndo not support such attributes.\nThis table lists all of the\nsupported attributes.\nget_supported_function_attributes(list_of_names) (since 0.48.0):\nreturns an array containing any names that are supported GCC style\nattributes. Equivalent to has_function_attribute was called on each of them\nindividually.\nThe following keyword arguments can be used:\nargs: used to pass a list of compiler arguments that are\nrequired to find the header or symbol. For example, you might need\nto pass the include path -Isome/path/to/header if a header is not\nin the default include path. (since 0.38.0) you should use the\ninclude_directories keyword described below. You may also want to\npass a library name -lfoo for has_function to check for a function.\nSupported by all methods except get_id, version, and find_library.\ninclude_directories (since 0.38.0): specifies extra directories for\nheader searches.\nname: the name to use for printing a message about the compiler\ncheck. Supported by the methods compiles(), links(), and\nrun(). If this keyword argument is not passed to those methods, no\nmessage will be printed about the check.\nno_builtin_args: when set to true, the compiler arguments controlled\nby built-in configuration options are not added.\nprefix: adds #includes and other things that are\nrequired for the symbol to be declared. System definitions should be\npassed via compiler args (eg: _GNU_SOURCE is often required for\nsome symbols to be exposed on Linux, and it should be passed via\nargs keyword argument, see below). Supported by the methods\nsizeof, has_type, has_function, has_member, has_members,\ncheck_header, has_header, has_header_symbol, get_define\nNote: These compiler checks do not use compiler arguments added\nwith add_*_arguments(), via -Dlang_args on the command-line, or\nthrough CFLAGS/LDFLAGS, etc in the environment. Hence, you can\ntrust that the tests will be fully self-contained, and won't fail\nbecause of custom flags added by other parts of the build file or by\nusers.\nNote that if you have a single prefix with all your dependencies, you\nmight find it easier to append to the environment variables\nC_INCLUDE_PATH with GCC/Clang and INCLUDE with MSVC to expand the\ndefault include path, and LIBRARY_PATH with GCC/Clang and LIB with\nMSVC to expand the default library search path.\nHowever, with GCC, these variables will be ignored when\ncross-compiling. In that case you need to use a specs file. See:\nhttp://www.mingw.org/wiki/SpecsFileHOWTO\n\n\nalignment(typename): returns the alignment of the type specified in\nthe positional argument, you can specify external dependencies to\nuse with dependencies keyword argument.\n\n\ncmd_array(): returns an array containing the command(s) for the compiler.\n\n\ncompiles(code): returns true if the code fragment given in the\npositional argument compiles, you can specify external dependencies\nto use with dependencies keyword argument, code can be either a\nstring containing source code or a file object pointing to the\nsource code.\n\n\ncompute_int(expr, ...'): computes the value of the given expression\n(as an example 1 + 2). When cross compiling this is evaluated with\nan iterative algorithm, you can specify keyword arguments low\n(defaults to -1024), high (defaults to 1024) and guess to\nspecify max and min values for the search and the value to try\nfirst.\n\n\nfind_library(lib_name, ...): tries to find the library specified in\nthe positional argument. The result\nobject can be used just like the return\nvalue of dependency. If the keyword argument required is false,\nMeson will proceed even if the library is not found. By default the\nlibrary is searched for in the system library directory\n(e.g. /usr/lib). This can be overridden with the dirs keyword\nargument, which can be either a string or a list of strings.\n(since 0.47.0) The value of a feature\noption can also be passed to the required keyword argument.\n(since 0.49.0) If the keyword argument disabler is true and the\ndependency couldn't be found, return a disabler object\ninstead of a not-found dependency. (since 0.50.0) The has_headers keyword\nargument can be a list of header files that must be found as well, using\nhas_header() method. All keyword arguments prefixed with header_ will be\npassed down to has_header() method with the prefix removed. (since 0.51.0)\nThe static keyword (boolean) can be set to true to limit the search to\nstatic libraries and false for dynamic/shared.\n\n\nfirst_supported_argument(list_of_strings): given a list of\nstrings, returns the first argument that passes the has_argument\ntest or an empty array if none pass.\n\n\nfirst_supported_link_argument(list_of_strings) (since 0.46.0):\ngiven a list of strings, returns the first argument that passes the\nhas_link_argument test or an empty array if none pass.\n\n\nget_define(definename): returns the given preprocessor symbol's\nvalue as a string or empty string if it is not defined.\n(since 0.47.0) This method will concatenate string literals as\nthe compiler would. E.g. \"a\" \"b\" will become \"ab\".\n\n\nget_id(): returns a string identifying the compiler. For example,\ngcc, msvc, and more.\n\n\nget_argument_syntax() (since 0.49.0): returns a string identifying the type\nof arguments the compiler takes. Can be one of gcc, msvc, or an undefined\nstring value. This method is useful for identifying compilers that are not\ngcc or msvc, but use the same argument syntax as one of those two compilers\nsuch as clang or icc, especially when they use different syntax on different\noperating systems.\n\n\nget_linker_id() (since 0.53.0): returns a string identifying the linker.\nFor example, ld.bfd, link, and more.\n\n\nget_supported_arguments(list_of_string) (since 0.43.0): returns\nan array containing only the arguments supported by the compiler,\nas if has_argument were called on them individually.\n\n\nget_supported_link_arguments(list_of_string) (since 0.46.0): returns\nan array containing only the arguments supported by the linker,\nas if has_link_argument were called on them individually.\n\n\nhas_argument(argument_name): returns true if the compiler accepts\nthe specified command line argument, that is, can compile code\nwithout erroring out or printing a warning about an unknown flag.\n\n\nhas_link_argument(argument_name) (since 0.46.0): returns true if\nthe linker accepts the specified command line argument, that is, can\ncompile and link code without erroring out or printing a warning\nabout an unknown flag. Link arguments will be passed to the\ncompiler, so should usually have the -Wl, prefix. On VisualStudio\na /link argument will be prepended.\n\n\nhas_function(funcname): returns true if the given function is\nprovided by the standard library or a library passed in with the\nargs keyword, you can specify external dependencies to use with\ndependencies keyword argument.\n\n\ncheck_header(header_name) (since 0.47.0): returns true if the\nspecified header is usable with the specified prefix,\ndependencies, and arguments. You can specify external dependencies\nto use with dependencies keyword argument and extra code to put\nabove the header test with the prefix keyword. In order to look\nfor headers in a specific directory you can use args : '-I/extra/include/dir, but this should only be used in exceptional\ncases for includes that can't be detected via pkg-config and passed\nvia dependencies. (since 0.50.0) The required keyword argument\ncan be used to abort if the header cannot be found.\n\n\nhas_header(header_name): returns true if the specified header\nexists, and is faster than check_header() since it only does a\npre-processor check. You can specify external dependencies to use\nwith dependencies keyword argument and extra code to put above the\nheader test with the prefix keyword. In order to look for headers\nin a specific directory you can use args : '-I/extra/include/dir,\nbut this should only be used in exceptional cases for includes that\ncan't be detected via pkg-config and passed via dependencies.\n(since 0.50.0) The required keyword argument can be used to\nabort if the header cannot be found.\n\n\nhas_header_symbol(headername, symbolname): detects\nwhether a particular symbol (function, variable, #define, type\ndefinition, etc) is declared in the specified header, you can\nspecify external dependencies to use with dependencies keyword\nargument. (since 0.50.0) The required keyword argument can be\nused to abort if the symbol cannot be found.\n\n\nhas_member(typename, membername): takes two arguments, type name\nand member name and returns true if the type has the specified\nmember, you can specify external dependencies to use with\ndependencies keyword argument.\n\n\nhas_members(typename, membername1, membername2, ...): takes at\nleast two arguments, type name and one or more member names, returns\ntrue if the type has all the specified members, you can specify\nexternal dependencies to use with dependencies keyword argument.\n\n\nhas_multi_arguments(arg1, arg2, arg3, ...) (since 0.37.0): the same as\nhas_argument but takes multiple arguments and uses them all in a\nsingle compiler invocation.\n\n\nhas_multi_link_arguments(arg1, arg2, arg3, ...) (since 0.46.0):\nthe same as has_link_argument but takes multiple arguments and\nuses them all in a single compiler invocation.\n\n\nhas_type(typename): returns true if the specified token is a type,\nyou can specify external dependencies to use with dependencies\nkeyword argument.\n\n\nlinks(code): returns true if the code fragment given in the\npositional argument compiles and links, you can specify external\ndependencies to use with dependencies keyword argument, code can\nbe either a string containing source code or a file object\npointing to the source code.  Since 0.60.0, if the file object's\nsuffix does not match the compiler object's language, the compiler\ncorresponding to the suffix is used to compile the source, while the\ntarget of the links method is used to link the resulting object file.\n\n\nrun(code): attempts to compile and execute the given code fragment,\nreturns a run result object, you can specify external dependencies\nto use with dependencies keyword argument, code can be either a\nstring containing source code or a file object pointing to the\nsource code.\n\n\nsymbols_have_underscore_prefix() (since 0.37.0): returns true\nif the C symbol mangling is one underscore (_) prefixed to the symbol.\n\n\nsizeof(typename, ...): returns the size of the given type\n(e.g. 'int') or -1 if the type is unknown, to add includes set\nthem in the prefix keyword argument, you can specify external\ndependencies to use with dependencies keyword argument.\n\n\nversion(): returns the compiler's version number as a string.\n\n\nhas_function_attribute(name) (since 0.48.0): returns true if the\ncompiler supports the GNU style (__attribute__(...)) name. This is\npreferable to manual compile checks as it may be optimized for compilers that\ndo not support such attributes.\nThis table lists all of the\nsupported attributes.\n\n\nget_supported_function_attributes(list_of_names) (since 0.48.0):\nreturns an array containing any names that are supported GCC style\nattributes. Equivalent to has_function_attribute was called on each of them\nindividually.\n\n\n\n\nargs: used to pass a list of compiler arguments that are\nrequired to find the header or symbol. For example, you might need\nto pass the include path -Isome/path/to/header if a header is not\nin the default include path. (since 0.38.0) you should use the\ninclude_directories keyword described below. You may also want to\npass a library name -lfoo for has_function to check for a function.\nSupported by all methods except get_id, version, and find_library.\n\n\ninclude_directories (since 0.38.0): specifies extra directories for\nheader searches.\n\n\nname: the name to use for printing a message about the compiler\ncheck. Supported by the methods compiles(), links(), and\nrun(). If this keyword argument is not passed to those methods, no\nmessage will be printed about the check.\n\n\nno_builtin_args: when set to true, the compiler arguments controlled\nby built-in configuration options are not added.\n\n\nprefix: adds #includes and other things that are\nrequired for the symbol to be declared. System definitions should be\npassed via compiler args (eg: _GNU_SOURCE is often required for\nsome symbols to be exposed on Linux, and it should be passed via\nargs keyword argument, see below). Supported by the methods\nsizeof, has_type, has_function, has_member, has_members,\ncheck_header, has_header, has_header_symbol, get_define\n\n\n"});