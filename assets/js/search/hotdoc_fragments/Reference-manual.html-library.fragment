fragment_downloaded_cb({"url":"Reference-manual.html#library","fragment":"library()\nBuilds a library that is either static, shared or both depending on\nthe value of default_library\nuser option.\nYou should use this instead of shared_library,\nstatic_library or\nboth_libraries most of the time. This allows you\nto toggle your entire project (including subprojects) from shared to\nstatic with only one option. This option applies to libraries being\nbuilt internal to the entire project. For external dependencies, the\ndefault library type preferred is shared. This can be adapted on a per\nlibrary basis using the dependency()) static keyword.\nThe keyword arguments for this are the same as for\nexecutable with the following additions:\nstatic_library, shared_library and both_libraries also accept\nthese keyword arguments.\nNote: You can set name_prefix and name_suffix to [], or omit\nthem for the default behaviour for each platform.\n\n\nname_prefix: the string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is lib on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is cyg.\n\nname_suffix: the string that will be used as the suffix for the\ntarget output filename by overriding the default (see also:\nexecutable()). By default, for shared libraries this\nis dylib on macOS, dll on Windows, and so everywhere else.\nFor static libraries, it is a everywhere. By convention MSVC\nstatic libraries use the lib suffix, but we use a to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a lib suffix.\n\nrust_crate_type: specifies the crate type for Rust\nlibraries. Defaults to dylib for shared libraries and rlib for\nstatic libraries.\n\n"});