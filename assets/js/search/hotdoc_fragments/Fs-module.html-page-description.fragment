fragment_downloaded_cb({"url":"Fs-module.html#page-description","fragment":"This module provides functions to inspect the file system. It is\navailable starting with version 0.53.0.\nNon-absolute paths are looked up relative to the directory where the\ncurrent meson.build file is.\nIf specified, a leading ~ is expanded to the user home directory.\nEnvironment variables are not available as is the rule throughout Meson.\nThat is, $HOME, %USERPROFILE%, $MKLROOT, etc. have no meaning to the Meson\nfilesystem module. If needed, pass such variables into Meson via command\nline options in meson_options.txt, native-file or cross-file.\nWhere possible, symlinks and parent directory notation are resolved to an\nabsolute path.\nTakes a single string argument and returns true if an entity with that\nname exists on the file system. This can be a file, directory or a\nspecial entry such as a device node.\nTakes a single string argument and returns true if a directory with\nthat name exists on the file system.\nTakes a single string argument and returns true if an file with that\nname exists on the file system.\nTakes a single string argument and returns true if the path pointed to\nby the string is a symbolic link.\nsince 0.54.0\nReturn a boolean indicating if the path string specified is absolute, WITHOUT expanding ~.\nExamples:\nThe fs.hash(filename, hash_algorithm) method returns a string containing\nthe hexadecimal hash_algorithm digest of a file.\nhash_algorithm is a string; the available hash algorithms include:\nmd5, sha1, sha224, sha256, sha384, sha512.\nThe fs.size(filename) method returns the size of the file in integer bytes.\nThe fs.is_samepath(path1, path2) returns boolean true if both\npaths resolve to the same path. For example, suppose path1 is a\nsymlink and path2 is a relative path. If path1 can be resolved to\npath2, then true is returned. If path1 is not resolved to\npath2, false is returned. If path1 or path2 do not exist,\nfalse is returned.\nExamples:\nThe files need not actually exist yet for these path string\nmanipulation methods.\nsince 0.54.0\nA path string with a leading ~ is expanded to the user home\ndirectory\nExamples:\nsince 0.54.0\nfs.as_posix(path) assumes a Windows path, even if on a Unix-like\nsystem. Thus, all '\\' or '\\\\' are turned to '/', even if you meant\nto escape a character.\nExamples\nThe replace_suffix method is a string manipulation convenient for\nfilename modifications. It allows changing the filename suffix like:\nReturns the parent directory (i.e. dirname).\nReturns the last component of the path (i.e. basename).\nsince 0.54.0\nReturns the last component of the path, dropping the last part of the\nsuffix\n\n\nread(path, encoding: 'utf-8') (since 0.57.0):\nreturn a string with the contents of the given path.\nIf the encoding keyword argument is not specified, the file specified by\npath is assumed to be utf-8 encoded. Binary files are not supported. The\nprovided paths should be relative to the current meson.current_source_dir()\nor an absolute path outside the build directory is accepted. If the file\nspecified by path changes, this will trigger Meson to reconfigure the\nproject. If the file specified by path is a files() object it\ncannot refer to a built file.\n\n"});