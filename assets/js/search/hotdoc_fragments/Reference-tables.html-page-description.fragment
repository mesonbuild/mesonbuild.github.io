fragment_downloaded_cb({"url":"Reference-tables.html#page-description","fragment":"These are return values of the get_id (Compiler family) and\nget_argument_syntax (Argument syntax) method in a compiler object.\nThese are return values of the get_linker_id method in a compiler object.\nFor languages that don't have separate dynamic linkers such as C# and Java, the\nget_linker_id will return the compiler name.\nThese are returned by the cpu_family method of build_machine,\nhost_machine and target_machine. For cross compilation they are\nset in the cross file.\nAny cpu family not listed in the above list is not guaranteed to\nremain stable in future releases.\nThose porting from autotools should note that meson does not add\nendianness to the name of the cpu_family. For example, autotools\nwill call little endian PPC64 \"ppc64le\", meson will not, you must\nalso check the .endian() value of the machine for this information.\nThese are provided by the .system() method call.\nAny string not listed above is not guaranteed to remain stable in\nfuture releases.\nThese are the parameter names for passing language specific arguments to your build target.\nAll these <lang>_* options are specified per machine. See in specifying\noptions per machine for on\nhow to do this in cross builds.\nThese environment variables will be used to modify the compiler and\nlinker flags.\nIt is recommended that you do not use these. They are provided purely to\nfor backwards compatibility with other build systems. There are many caveats to\ntheir use, especially when rebuilding the project. It is highly recommended\nthat you use the command line arguments\ninstead.\nN.B. these settings are specified per machine, and so the environment varibles\nactually come in pairs. See the environment variables per\nmachine section for details.\nThese are the parameters names that are supported using\ncompiler.has_function_attribute() or\ncompiler.get_supported_function_attributes()\nThese values are supported using the GCC style __attribute__ annotations,\nwhich are supported by GCC, Clang, and other compilers.\n* Changed in 0.52.0 the \"visibility\" target no longer includes\n\"protected\", which is not present in Apple's clang.\n† New in 0.52.0 These split visibility attributes are preferred to the plain\n\"visibility\" as they provide narrower checks.\n³ New in 0.55.0\nThese values are supported using the MSVC style __declspec annotation,\nwhich are supported by MSVC, GCC, Clang, and other compilers.\nThese are the values that can be passed to dependency function's\nmethod keyword argument.\nN.B. these settings are specified per machine, and so the environment varibles\nactually come in pairs. See the environment variables per\nmachine section for details.\nThe old environment variales are still supported, but are deprecated and will\nbe removed in a future version of meson.\nSince 0.54.0, Following Autotool and other legacy build systems, environment\nvariables that affect machine-specific settings come in pairs: for every bare\nenvironment variable FOO, there is a suffixed FOO_FOR_BUILD, where FOO\njust affects the host machine configuration, while FOO_FOR_BUILD just affects\nthe build machine configuration. For example:\nPKG_CONFIG_PATH_FOR_BUILD controls the paths pkg-config will search for\njust native: true dependencies (build machine).\nPKG_CONFIG_PATH controls the paths pkg-config will search for just\nnative: false dependencies (host machine).\nThis mirrors the build. prefix used for (built-in) meson options, which has\nthe same meaning.\nThis is useful for cross builds. In the native builds, build = host, and the\nunsuffixed environment variables alone will suffice.\nPrior to 0.54.0, there was no _FOR_BUILD-suffixed variables, and most\nenvironment variables only effected native machine configurations, though this\nwasn't consistent (e.g. PKG_CONFIG_PATH still affected cross builds).\n\n\nPKG_CONFIG_PATH_FOR_BUILD controls the paths pkg-config will search for\njust native: true dependencies (build machine).\n\n\nPKG_CONFIG_PATH controls the paths pkg-config will search for just\nnative: false dependencies (host machine).\n\n\n\n\n\n Value\n Compiler family\n Argument syntax\n\n\n\n\n arm\n ARM compiler\n\n\n\n armclang\n ARMCLANG compiler\n\n\n\n c2000\n Texas Instruments C2000 compiler\n\n\n\n ccrx\n Renesas RX Family C/C++ compiler\n\n\n\n clang\n The Clang compiler\n gcc\n\n\n clang-cl\n The Clang compiler (MSVC compatible driver)\n msvc\n\n\n dmd\n D lang reference compiler\n\n\n\n emscripten\n Emscripten WASM compiler\n\n\n\n flang\n Flang Fortran compiler\n\n\n\n g95\n The G95 Fortran compiler\n\n\n\n gcc\n The GNU Compiler Collection\n gcc\n\n\n intel\n Intel compiler (Linux and Mac)\n gcc\n\n\n intel-cl\n Intel compiler (Windows)\n msvc\n\n\n lcc\n Elbrus C/C++/Fortran Compiler\n\n\n\n llvm\n LLVM-based compiler (Swift, D)\n\n\n\n mono\n Xamarin C# compiler\n\n\n\n msvc\n Microsoft Visual Studio\n msvc\n\n\n nagfor\n The NAG Fortran compiler\n\n\n\n nvidia_hpc\n NVidia HPC SDK compilers\n\n\n\n open64\n The Open64 Fortran Compiler\n\n\n\n pathscale\n The Pathscale Fortran compiler\n\n\n\n pgi\n Portland PGI C/C++/Fortran compilers\n\n\n\n rustc\n Rust compiler\n\n\n\n sun\n Sun Fortran compiler\n\n\n\n valac\n Vala compiler\n\n\n\n xc16\n Microchip XC16 C compiler\n\n\n\n\n\n\n\n Value\n Linker family\n\n\n\n\n ld.bfd\n The GNU linker\n\n\n ld.gold\n The GNU gold linker\n\n\n ld.lld\n The LLVM linker, with the GNU interface\n\n\n ld.solaris\n Solaris and illumos\n\n\n ld.wasm\n emscripten's wasm-ld linker\n\n\n ld64\n Apple ld64\n\n\n link\n MSVC linker\n\n\n lld-link\n The LLVM linker, with the MSVC interface\n\n\n xilink\n Used with Intel-cl only, MSVC like\n\n\n optlink\n optlink (used with DMD)\n\n\n rlink\n The Renesas linker, used with CCrx only\n\n\n xc16-ar\n The Microchip linker, used with XC16 only\n\n\n ar2000\n The Texas Instruments linker, used with C2000 only\n\n\n armlink\n The ARM linker (arm and armclang compilers)\n\n\n pgi\n Portland/Nvidia PGI\n\n\n nvlink\n Nvidia Linker used with cuda\n\n\n\n\n\n\n Value\n Comment\n\n\n\n\n MESONINTROSPECT\n Command to run to run the introspection command, may be of the form python /path/to/meson introspect, user is responsible for splitting the path if necessary.\n\n\n MESON_BUILD_ROOT\n Absolute path to the build dir\n\n\n MESON_DIST_ROOT\n Points to the root of the staging directory, only set when running dist scripts\n\n\n MESON_SOURCE_ROOT\n Absolute path to the source dir\n\n\n MESON_SUBDIR\n Current subdirectory, only set for run_command\n\n\n\n\n\n\n\n Value\n Comment\n\n\n\n\n aarch64\n 64 bit ARM processor\n\n\n alpha\n DEC Alpha processor\n\n\n arc\n 32 bit ARC processor\n\n\n arm\n 32 bit ARM processor\n\n\n avr\n Atmel AVR processor\n\n\n c2000\n 32 bit C2000 processor\n\n\n dspic\n 16 bit Microchip dsPIC\n\n\n e2k\n MCST Elbrus processor\n\n\n ia64\n Itanium processor\n\n\n m68k\n Motorola 68000 processor\n\n\n microblaze\n MicroBlaze processor\n\n\n mips\n 32 bit MIPS processor\n\n\n mips64\n 64 bit MIPS processor\n\n\n parisc\n HP PA-RISC processor\n\n\n pic24\n 16 bit Microchip PIC24\n\n\n ppc\n 32 bit PPC processors\n\n\n ppc64\n 64 bit PPC processors\n\n\n riscv32\n 32 bit RISC-V Open ISA\n\n\n riscv64\n 64 bit RISC-V Open ISA\n\n\n rl78\n Renesas RL78\n\n\n rx\n Renesas RX 32 bit MCU\n\n\n s390\n IBM zSystem s390\n\n\n s390x\n IBM zSystem s390x\n\n\n sh4\n SuperH SH-4\n\n\n sparc\n 32 bit SPARC\n\n\n sparc64\n SPARC v9 processor\n\n\n wasm32\n 32 bit Webassembly\n\n\n wasm64\n 64 bit Webassembly\n\n\n x86\n 32 bit x86 processor\n\n\n x86_64\n 64 bit x86 processor\n\n\n\n\n\n\n Value\n Comment\n\n\n\n\n android\n By convention only, subject to change\n\n\n cygwin\n The Cygwin environment for Windows\n\n\n darwin\n Either OSX or iOS\n\n\n dragonfly\n DragonFly BSD\n\n\n emscripten\n Emscripten's Javascript environment\n\n\n freebsd\n FreeBSD and its derivatives\n\n\n gnu\n GNU Hurd\n\n\n haiku\n\n\n\n linux\n\n\n\n netbsd\n\n\n\n openbsd\n\n\n\n windows\n Any version of Windows\n\n\n sunos\n illumos and Solaris\n\n\n\n\n\n\n Language\n compiler name\n linker name\n\n\n\n\n C\n c_args\n c_link_args\n\n\n C++\n cpp_args\n cpp_link_args\n\n\n C#\n cs_args\n cs_link_args\n\n\n D\n d_args\n d_link_args\n\n\n Fortran\n fortran_args\n fortran_link_args\n\n\n Java\n java_args\n java_link_args\n\n\n Objective C\n objc_args\n objc_link_args\n\n\n Objective C++\n objcpp_args\n objcpp_link_args\n\n\n Rust\n rust_args\n rust_link_args\n\n\n Vala\n vala_args\n vala_link_args\n\n\n\n\n\n\n Name\n Comment\n\n\n\n\n CFLAGS\n Flags for the C compiler\n\n\n CXXFLAGS\n Flags for the C++ compiler\n\n\n OBJCFLAGS\n Flags for the Objective C compiler\n\n\n FFLAGS\n Flags for the Fortran compiler\n\n\n DFLAGS\n Flags for the D compiler\n\n\n VALAFLAGS\n Flags for the Vala compiler\n\n\n RUSTFLAGS\n Flags for the Rust compiler\n\n\n LDFLAGS\n The linker flags, used for all languages\n\n\n\n\n\n\n Name\n\n\n\n\n alias\n\n\n aligned\n\n\n alloc_size\n\n\n always_inline\n\n\n artificial\n\n\n cold\n\n\n const\n\n\n constructor\n\n\n constructor_priority\n\n\n deprecated\n\n\n destructor\n\n\n error\n\n\n externally_visible\n\n\n fallthrough\n\n\n flatten\n\n\n format\n\n\n format_arg\n\n\n force_align_arg_pointer³\n\n\n gnu_inline\n\n\n hot\n\n\n ifunc\n\n\n malloc\n\n\n noclone\n\n\n noinline\n\n\n nonnull\n\n\n noreturn\n\n\n nothrow\n\n\n optimize\n\n\n packed\n\n\n pure\n\n\n returns_nonnull\n\n\n unused\n\n\n used\n\n\n visibility*\n\n\n visibility:default†\n\n\n visibility:hidden†\n\n\n visibility:internal†\n\n\n visibility:protected†\n\n\n warning\n\n\n warn_unused_result\n\n\n weak\n\n\n weakreaf\n\n\n\n\n\n\n Name\n\n\n\n\n dllexport\n\n\n dllimport\n\n\n\n\n\n\n Name\n Comment\n\n\n\n\n auto\n Automatic method selection\n\n\n pkg-config\n Use Pkg-Config\n\n\n cmake\n Look up as a CMake module\n\n\n config-tool\n Use a custom dep tool such as cups-config\n\n\n\n system\n System provided (e.g. OpenGL)\n\n\n extraframework\n A macOS/iOS framework\n\n\n\n\n\n\n Language\n Compiler\n Linker\n Note\n\n\n\n\n C\n CC\n CC_LD\n\n\n\n C++\n CXX\n CXX_LD\n\n\n\n D\n DC\n DC_LD\n Before 0.54 D_LD*\n\n\n Fortran\n FC\n FC_LD\n Before 0.54 F_LD*\n\n\n Objective-C\n OBJC\n OBJC_LD\n\n\n\n Objective-C++\n OBJCXX\n OBJCXX_LD\n Before 0.54 OBJCPP_LD*\n\n\n Rust\n RUSTC\n RUSTC_LD\n Before 0.54 RUST_LD*\n\n\n Vala\n VALAC\n\n Use CC_LD. Vala transpiles to C\n\n\n C#\n CSC\n CSC\n The linker is the compiler\n\n\n\n"});