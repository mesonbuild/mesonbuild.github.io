fragment_downloaded_cb({"url":"Rust-module.html#bindgen-input-string-buildtarget-string-buildtarget-output-string-include_directories-include_directories-string-c_args-string-args-string","fragment":"bindgen(*, input: string | BuildTarget | [](string | BuildTarget), output: string, include_directories: [](include_directories | string), c_args: []string, args: []string)\nThis function wraps bindgen to simplify creating rust bindings around C\nlibraries. This has two advantages over hand-rolling ones own with a\ngenerator or custom_target:\nIt takes the following keyword arguments\nIf the header depeneds on generated headers, those headers must be passed to\nbindgen as well to ensure proper dependency ordering, static headers do not\nneed to be passed, as a proper depfile is generated:\n\nIt handles include_directories, so one doesn't have to manually convert them to -I...\n\nIt automatically sets up a depfile, making the results more reliable\n\n\ninput — A list of Files, Strings, or CustomTargets. The first element is\nthe header bindgen will parse, additional elements are dependencies.\noutput — the name of the output rust file\ninclude_directories — A list of include_directories or string objects,\nthese are passed to clang as -I arguments (string since 1.0.0)\n\nc_args — A list of string arguments to pass to clang untouched\nargs — A list of string arguments to pass to bindgen untouched.\n\n"});