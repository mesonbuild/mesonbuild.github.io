fragment_downloaded_cb({"url":"Reference-manual_functions.html#arguments44","fragment":"Arguments\nThe function shared_module() accepts the following positional arguments:\nThe unique name of the build target\n\nAdditionally, the\nfunction accepts between 0 and infinity variadic\narguments (source...) of type str | file | custom_tgt | custom_idx | generated_list.\nInput source to compile. The following types are supported:\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (.c, .cpp,\n.vala, .rs, etc) will be compiled and objects (.o, .obj) and\nlibraries (.so, .dll, etc) will be linked.\nWith the Ninja backend, Meson will create a build-time order-only\ndependency on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\ndepfile generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n\nFinally, shared_module()\naccepts the following keyword arguments:\ncompiler flags to use for the given language;\neg: cpp_args for C++\nprecompiled header file to use for the given language\nCauses, when set to true, to have this target be built by default.\nThis means it will be built when meson compile is called without any\narguments. The default value is true for all built target types.\n(since 0.38.0)\ndefault =\n  true\nA string to add to target's rpath definition in the build dir,\nbut which will be removed on install\nList of module debug identifiers set when compiling D sources.\nList of directories to look in for string imports used in the D programming language.\nList of module version identifiers set when compiling D sources.\nWhen set to true, the D modules are compiled in debug mode.\ndefault =\n  false\none or more dependency objects\ncreated with\ndependency() or [[compiler.find_library]]\n(for external deps) or declare_dependency()\n(for deps built by the project)\nNot used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\nSpecifies how symbols should be exported, see\ne.g the GCC Wiki for more\ninformation. This value can either be an empty string or one of\ndefault, internal, hidden, protected or inlineshidden, which\nis the same as hidden but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n(since 0.48.0)\nWhen set to true flags this target as a GUI application\non platforms where this makes a differerence, deprecated since\n0.56.0, use win_subsystem instead.\nDEPRECATED\nin 0.56.0\ndefault =\n  false\nControlls whether Meson adds the current source and build directories to the include path\n(since 0.42.0)\ndefault =\n  true\none or more objects created with the include_directories() function,\nor (since 0.50.0) strings, which will be transparently expanded to include directory objects\nWhen set to true, this executable should be installed.\ndefault =\n  false\noverride install directory for this file. The value is\nrelative to the prefix specified. F.ex, if you want to install\nplugins into a subdir, you'd use something like this: install_dir : get_option('libdir') / 'projectname-1.0'.\nSpecify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\nSee the install_mode kwarg of install_data() for more information.\n(since 0.47.0)\nA string to set the target's rpath to after install\n(but not before that). On Windows, this argument has no effect.\nA string used by the meson install --tags command\nto install only a subset of the files. By default all build targets have the\ntag runtime except for static libraries that have the devel tag.\n(since 0.60.0)\nFlags to use during linking. You can use UNIX-style\nflags here for all platforms.\nStrings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\nMakes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n(broken until 0.55.0)\n(since 0.51.0)\nLinks all contents of the given static libraries\nwhether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.\n(since 0.41.0) If passed a list that list will be flattened.\n(since 0.51.0) This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n(since 0.40.0)\nOne or more shared or static libraries\n(built by this project) that this target should be linked with. (since 0.41.0) If passed a\nlist this list will be flattened. (since 0.51.0) The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\nThe string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is lib on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is cyg.\nSet this to [], or omit the keyword argument for the default behaviour.\nThe string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\nexe for executables and on other platforms it is omitted.\nFor shared libraries, the default value\nis dylib on macOS, dll on Windows, and so everywhere else.\nFor static libraries, it is a everywhere. By convention MSVC\nstatic libraries use the lib suffix, but we use a to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a lib suffix.\nSet this to [], or omit the keyword argument for the default behaviour.\nControls whether the target is compiled for the build or host machines.\ndefault =\n  false\nList of prebuilt object files (usually for third party\nproducts you don't have source to) that should be linked in this\ntarget, never use this for object files that you build yourself.\ntakes an array of strings in the same format as project's default_options\noverriding the values of these options\nfor this target only.\n(since 0.40.0)\nAdditional source files. Same as the source varargs.\nSpecify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n(since 0.52.0)\nSpecifies the subsystem type to use\non the Windows platform. Typical values include console for text\nmode programs and windows for gui apps. The value can also contain\nversion specification such as windows,6.0. See MSDN\ndocumentation\nfor the full list.\n(since 0.56.0)\ndefault =\n  'console'\n\n\n\nStrings relative to the current source directory\n\nfile objects defined in any preceding build file\nThe return value of configure-time generators such as configure_file()\n\nThe return value of build-time generators such as\ncustom_target() or [[generator.process]]\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        target_name\n        str\n        \n        \nThe unique name of the build target\n  \n        \n\n  \n  \n      \n    \n  \n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        <lang>_args\n        \nlist[str]\n        \n        \ncompiler flags to use for the given language;\neg: cpp_args for C++\n  \n        \n\n  \n  \n      \n      \n        <lang>_pch\n        \nstr | file\n\n        \n        \nprecompiled header file to use for the given language\n  \n        \n\n  \n  \n      \n      \n        build_by_default\n        bool\n        \n        \nCauses, when set to true, to have this target be built by default.\nThis means it will be built when meson compile is called without any\narguments. The default value is true for all built target types.\n  \n        \n\n  (since 0.38.0)\n  default =\n  true\n  \n  \n      \n      \n        build_rpath\n        str\n        \n        \nA string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n  \n        \n\n  \n  \n      \n      \n        d_debug\n        \nlist[str]\n        \n        \nList of module debug identifiers set when compiling D sources.\n  \n        \n\n  \n  \n      \n      \n        d_import_dirs\n        \nlist[str]\n        \n        \nList of directories to look in for string imports used in the D programming language.\n  \n        \n\n  \n  \n      \n      \n        d_module_versions\n        \nlist[str]\n        \n        \nList of module version identifiers set when compiling D sources.\n  \n        \n\n  \n  \n      \n      \n        d_unittest\n        bool\n        \n        \nWhen set to true, the D modules are compiled in debug mode.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        dependencies\n        \nlist[dep]\n        \n        \none or more dependency objects\ncreated with\ndependency() or [[compiler.find_library]]\n(for external deps) or declare_dependency()\n(for deps built by the project)\n  \n        \n\n  \n  \n      \n      \n        extra_files\n        \nstr | file | custom_tgt | custom_idx\n\n        \n        \nNot used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n  \n        \n\n  \n  \n      \n      \n        gnu_symbol_visibility\n        str\n        \n        \nSpecifies how symbols should be exported, see\ne.g the GCC Wiki for more\ninformation. This value can either be an empty string or one of\ndefault, internal, hidden, protected or inlineshidden, which\nis the same as hidden but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n  \n        \n\n  (since 0.48.0)\n  \n  \n      \n      \n        gui_app\n        bool\n        \n        \nWhen set to true flags this target as a GUI application\non platforms where this makes a differerence, deprecated since\n0.56.0, use win_subsystem instead.\n  \n        \n\n  \n      DEPRECATED\n      in 0.56.0\n  \n  default =\n  false\n  \n  \n      \n      \n        implicit_include_directories\n        bool\n        \n        \nControlls whether Meson adds the current source and build directories to the include path\n  \n        \n\n  (since 0.42.0)\n  default =\n  true\n  \n  \n      \n      \n        include_directories\n        \nlist[inc | str]\n        \n        \none or more objects created with the include_directories() function,\nor (since 0.50.0) strings, which will be transparently expanded to include directory objects\n  \n        \n\n  \n  \n      \n      \n        install\n        bool\n        \n        \nWhen set to true, this executable should be installed.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        install_dir\n        str\n        \n        \noverride install directory for this file. The value is\nrelative to the prefix specified. F.ex, if you want to install\nplugins into a subdir, you'd use something like this: install_dir : get_option('libdir') / 'projectname-1.0'.\n  \n        \n\n  \n  \n      \n      \n        install_mode\n        \nlist[str | int]\n        \n        \nSpecify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\nSee the install_mode kwarg of install_data() for more information.\n  \n        \n\n  (since 0.47.0)\n  \n  \n      \n      \n        install_rpath\n        str\n        \n        \nA string to set the target's rpath to after install\n(but not before that). On Windows, this argument has no effect.\n  \n        \n\n  \n  \n      \n      \n        install_tag\n        str\n        \n        \nA string used by the meson install --tags command\nto install only a subset of the files. By default all build targets have the\ntag runtime except for static libraries that have the devel tag.\n  \n        \n\n  (since 0.60.0)\n  \n  \n      \n      \n        link_args\n        \nlist[str]\n        \n        \nFlags to use during linking. You can use UNIX-style\nflags here for all platforms.\n  \n        \n\n  \n  \n      \n      \n        link_depends\n        \nstr | file | custom_tgt | custom_idx\n\n        \n        \nStrings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n  \n        \n\n  \n  \n      \n      \n        link_language\n        str\n        \n        \nMakes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n(broken until 0.55.0)\n  \n        \n\n  (since 0.51.0)\n  \n  \n      \n      \n        link_whole\n        \nlist[lib | custom_tgt | custom_idx]\n        \n        \nLinks all contents of the given static libraries\nwhether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.\n(since 0.41.0) If passed a list that list will be flattened.\n(since 0.51.0) This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n  \n        \n\n  (since 0.40.0)\n  \n  \n      \n      \n        link_with\n        \nlist[lib | custom_tgt | custom_idx]\n        \n        \nOne or more shared or static libraries\n(built by this project) that this target should be linked with. (since 0.41.0) If passed a\nlist this list will be flattened. (since 0.51.0) The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n  \n        \n\n  \n  \n      \n      \n        name_prefix\n        \nstr | list[void]\n        \n        \nThe string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is lib on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is cyg.\nSet this to [], or omit the keyword argument for the default behaviour.\n  \n        \n\n  \n  \n      \n      \n        name_suffix\n        \nstr | list[void]\n        \n        \nThe string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\nexe for executables and on other platforms it is omitted.\nFor shared libraries, the default value\nis dylib on macOS, dll on Windows, and so everywhere else.\nFor static libraries, it is a everywhere. By convention MSVC\nstatic libraries use the lib suffix, but we use a to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a lib suffix.\nSet this to [], or omit the keyword argument for the default behaviour.\n  \n        \n\n  \n  \n      \n      \n        native\n        bool\n        \n        \nControls whether the target is compiled for the build or host machines.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        objects\n        \nlist[extracted_obj]\n        \n        \nList of prebuilt object files (usually for third party\nproducts you don't have source to) that should be linked in this\ntarget, never use this for object files that you build yourself.\n  \n        \n\n  \n  \n      \n      \n        override_options\n        \nlist[str]\n        \n        \ntakes an array of strings in the same format as project's default_options\noverriding the values of these options\nfor this target only.\n  \n        \n\n  (since 0.40.0)\n  \n  \n      \n      \n        sources\n        \nstr | file | custom_tgt | custom_idx | generated_list\n\n        \n        \nAdditional source files. Same as the source varargs.\n  \n        \n\n  \n  \n      \n      \n        vs_module_defs\n        \nstr | file | custom_tgt | custom_idx\n\n        \n        \nSpecify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n  \n        \n\n  (since 0.52.0)\n  \n  \n      \n      \n        win_subsystem\n        str\n        \n        \nSpecifies the subsystem type to use\non the Windows platform. Typical values include console for text\nmode programs and windows for gui apps. The value can also contain\nversion specification such as windows,6.0. See MSDN\ndocumentation\nfor the full list.\n  \n        \n\n  (since 0.56.0)\n  default =\n  'console'\n  \n  \n      \n    \n  \n"});