fragment_downloaded_cb({"url":"Configuration.html#page-description","fragment":"If there are multiple configuration options, passing them through\ncompiler flags becomes very burdensome. It also makes the\nconfiguration settings hard to inspect. To make things easier, Meson\nsupports the generation of configure files. This feature is similar to\none found in other build systems such as CMake.\nSuppose we have the following Meson snippet:\nand that the contents of config.h.in are\nMeson will then create a file called config.h in the corresponding\nbuild directory whose contents are the following.\nMore specifically, Meson will find all strings of the type @varname@\nand replace them with respective values set in conf_data. You can\nuse a single configuration_data object as many times as you like,\nbut it becomes immutable after being passed to the configure_file\nfunction. That is, after it has been used once to generate output the\nset function becomes unusable and trying to call it causes an error.\nCopy of immutable configuration_data is still immutable.\nFor more complex configuration file generation Meson provides a second\nform. To use it, put a line like this in your configuration file.\nThe replacement that happens depends on what the value and type of TOKEN is:\nNote that if you want to define a C string, you need to do the quoting\nyourself like this:\nSince this is such a common operation, Meson provides a convenience\nmethod:\nOften you have a boolean value in Meson but need to define the C/C++\ntoken as 0 or 1. Meson provides a convenience function for this use\ncase.\nIf the input file is not defined then Meson will generate a header\nfile all the entries in the configuration data object. The\nreplacements are the same as when generating #mesondefine entries:\nIn this mode, you can also specify a comment which will be placed\nbefore the value so that your generated files are self-documenting.\nWill produce:\nThe default Meson file encoding to configure files is utf-8. If you\nneed to configure a file that is not utf-8 encoded the encoding\nkeyword will allow you to specify which file encoding to use. It is\nhowever strongly advised to convert your non utf-8 file to utf-8\nwhenever possible. Supported file encodings are those of python3, see\nstandard-encodings.\nSince 0.49.0 configuration_data() takes an optional dictionary as\nfirst argument. If provided, each key/value pair is added into the\nconfiguration_data as if set() method was called for each of them.\nconfigure_file()'s configuration kwarg also accepts a dictionary\ninstead of a configuration_data object.\nExample:\nGenerating and using a configuration file requires the following steps:\nWe are going to use the traditional approach of generating a header\nfile in the top directory. The common name is config.h but we're\ngoing to use an unique name. This avoids the problem of accidentally\nincluding the wrong header file when building a project with many\nsubprojects.\nAt the top level we generate the file:\nImmediately afterwards we generate the include object.\nFinally we specify this in a target that can be in any subdirectory.\nNow any source file in this target can include the configuration\nheader like this:\n\ngenerate the file\ncreate an include directory object for the directory that holds the file\nuse it in a target\n\n"});