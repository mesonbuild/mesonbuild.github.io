fragment_downloaded_cb({"url":"i18n-module.html#i18nxgettext","fragment":"i18n.xgettext()\nInvokes the xgettext program on given sources, to generate a .pot file.\nThis function is to be used when the gettext function workflow it not suitable\nfor your project. For example, it can be used to produce separate .pot files\nfor each executable.\nPositional arguments are the following:\nKeyword arguments are the following:\nThe i18n.xgettext() function returns a custom_tgt.\nUsually, you want to pass one build target as sources, and the list of header files\nfor that target. If the number of source files would result in a command line that\nis too long, the list of source files is written to a file at config time, to be\nused as input for the xgettext program.\nThe recursive: true argument is to be given to targets that will actually read\nthe resulting .mo file. Each time you call the i18n.xgettext() function,\nit maps the source targets to the resulting pot file. When recursive: true is\ngiven, all generated pot files from dependencies of the source targets are\nincluded to generate the final pot file. Therefore, adding a dependency to\nsource target will automatically add the translations of that dependency to the\nneeded translations for that source target.\nAdded 1.8.0\n\nname str: the name of the resulting pot file.\nsources array[str|File|build_tgt|custom_tgt]:\nsource files or targets. May be a list of string, File, build_tgt,\nor custom_tgt returned from other calls to this function.\n\n\nrecursive bool:\nif true, will merge the resulting pot file with extracted pot files\nrelated to dependencies of the given source targets. For instance,\nif you build an executable, then you may want to merge the executable\ntranslations with the translations from the dependent libraries.\ninstall bool: if true, will add the resulting pot file to install targets.\ninstall_tag str: install tag to use for the install target.\ninstall_dir str: directory where to install the resulting pot file.\n\n"});