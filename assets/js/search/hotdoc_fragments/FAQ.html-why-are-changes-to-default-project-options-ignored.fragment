fragment_downloaded_cb({"url":"FAQ.html#why-are-changes-to-default-project-options-ignored","fragment":"Why are changes to default project options ignored?\nYou probably had a project that looked something like this:\nThis defaults to c++11 on GCC compilers. Suppose you want to use\nc++14 instead, so you change the definition to this:\nBut when you recompile, it still uses c++11. The reason for this is\nthat default options are only looked at when you are setting up a\nbuild directory for the very first time. After that the setting is\nconsidered to have a value and thus the default value is ignored. To\nchange an existing build dir to c++14, either reconfigure your build\ndir with meson configure or delete the build dir and recreate it\nfrom scratch.\nThe reason we don't automatically change the option value when the\ndefault is changed is that it is impossible to know to do that\nreliably. The actual question that we need to solve is \"if the\noption's value is foo and the default value is bar, should we change\nthe option value to bar also\". There are many choices:\nif the user has changed the value themselves from the default, then\nwe must not change it back\nif the user has not changed the value, but changes the default\nvalue, then this section's premise would seem to indicate that the\nvalue should be changed\nsuppose the user changes the value from the default to foo, then\nback to bar and then changes the default value to bar, the correct\nstep to take is ambiguous by itself\nIn order to solve the latter question we would need to remember not\nonly the current and old value, but also all the times the user has\nchanged the value and from which value to which other value. Since\npeople don't remember their own actions that far back, toggling\nbetween states based on long history would be confusing.\nBecause of this we do the simple and understandable thing: default\nvalues are only defaults and will never affect the value of an option\nonce set.\n\n\nif the user has changed the value themselves from the default, then\nwe must not change it back\n\n\nif the user has not changed the value, but changes the default\nvalue, then this section's premise would seem to indicate that the\nvalue should be changed\n\n\nsuppose the user changes the value from the default to foo, then\nback to bar and then changes the default value to bar, the correct\nstep to take is ambiguous by itself\n\n\n"});