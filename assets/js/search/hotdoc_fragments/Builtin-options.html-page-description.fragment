fragment_downloaded_cb({"url":"Builtin-options.html#page-description","fragment":"Meson provides two kinds of options: build options provided by the\nbuild files and built-in options that are either\nuniversal options, base options, compiler options.\nA list of these options can be found by running meson --help. All\nthese can be set by passing -Doption=value to meson (aka meson setup), or\nby setting them inside default_options of project() in your meson.build.\nSome options can also be set by --option=value, or --option value--- a list\nis shown by running meson setup --help.\nFor legacy reasons --warnlevel is the cli argument for the warning_level option.\nThey can also be edited after setup using meson configure -Doption=value.\nInstallation options are all relative to the prefix, except:\nprefix defaults to C:/ on Windows, and /usr/local otherwise. You should always\noverride this value.\nlibdir is automatically detected based on your platform, it should be\ncorrect when doing \"native\" (build machine == host machine) compilation. For\ncross compiles meson will try to guess the correct libdir, but it may not be\naccurate, especially on Linux where different distributions have different\ndefaults. Using a cross file,\nparticularly the paths section may be necessary.\nOptions that are labeled \"per machine\" in the table are set per machine. See\nthe specifying options per machine section\nfor details.\n\nFor setting optimization levels and toggling debug, you can either set the\nbuildtype option, or you can set the optimization and debug options which\ngive finer control over the same. Whichever you decide to use, the other will\nbe deduced from it. For example, -Dbuildtype=debugoptimized is the same as\n-Ddebug=true -Doptimization=2 and vice-versa. This table documents the\ntwo-way mapping:\nAll other combinations of debug and optimization set buildtype to 'custom'.\nThese are set in the same way as universal options, either by -Doption=value,\nor by setting them inside default_options of project() in your meson.build.\nHowever, they cannot be shown in the\noutput of meson --help because they depend on both the current platform and\nthe compiler that will be selected. The only way to see them is to setup\na builddir and then run meson configure on it with no options.\nThe following options are available. Note that they may not be available on all\nplatforms or with all compilers:\nThe value of b_sanitize can be one of: none, address, thread,\nundefined, memory, address,undefined.\n\nThe default value of b_vscrt is from_buildtype. In that case, the following\ntable is used internally to pick the CRT compiler arguments based on the value\nof the buildtype option:\nb_bitcode will pass -fembed-bitcode while compiling and will pass\n-Wl,-bitcode_bundle while linking. These options are incompatible with\nb_asneeded, so that option will be silently disabled.\nShared modules will not have bitcode\nembedded because -Wl,-bitcode_bundle is incompatible with both -bundle and\n-Wl,-undefined,dynamic_lookup which are necessary for shared modules to work.\nSame caveats as base options above.\nThe following options are available. They can be set by passing -Doption=value\nto meson. Note that both the options themselves and\nthe possible values they can take will depend on the target platform or\ncompiler being used:\nThe default values of c_winlibs and cpp_winlibs are in compiler-specific\nargument forms, but the libraries are: kernel32, user32, gdi32, winspool,\nshell32, ole32, oleaut32, uuid, comdlg32, advapi32.\nAll these <lang>_* options are specified per machine. See below in the\nspecifying options per machine section on\nhow to do this in cross builds.\nWhen using MSVC, cpp_eh=none will result in no exception flags being passed,\nwhile the cpp_eh=[value] will result in /EH[value].\nSince 0.51.0 cpp_eh=default will result in /EHsc on MSVC. When using\ngcc-style compilers, nothing is passed (allowing exceptions to work), while\ncpp_eh=none passes -fno-exceptions.\nSince 0.54.0 The <lang>_thread_count option can be used to control the\nvalue passed to -s PTHREAD_POOL_SIZE when using emcc. No other c/c++\ncompiler supports this option.\nSince 0.51.0, some options are specified per machine rather than globally for\nall machine configurations. Prefixing the option with build. just affects the\nbuild machine configuration, while unprefixed just affects the host machine\nconfiguration, respectively. For example:\nbuild.pkg_config_path controls the paths pkg-config will search for just\nnative: true dependencies (build machine).\npkg_config_path controls the paths pkg-config will search for just\nnative: false dependencies (host machine).\nThis is useful for cross builds. In the native builds, build = host, and the\nunprefixed option alone will suffice.\nPrior to 0.51.0, these options just effected native builds when specified on\nthe command line, as there was no build. prefix. Similarly named fields in\nthe [properties] section of the cross file would effect cross compilers, but\nthe code paths were fairly different allowing differences in behavior to crop\nout.\nSince 0.54.0 default_library and werror built-in options can be defined\nper subproject. This is useful for example when building shared libraries in the\nmain project, but static link a subproject, or when the main project must build\nwith no warnings but some subprojects cannot.\nMost of the time this would be used either by the parent project by setting\nsubproject's default_options (e.g. subproject('foo', default_options: 'default_library=static')),\nor by the user using the command line -Dfoo:default_library=static.\nThe value is overriden in this order:\nSince 0.56.0 warning_level can also be defined per subproject.\n\nWhen the prefix is /usr: sysconfdir defaults to /etc, localstatedir defaults to /var, and sharedstatedir defaults to /var/lib\n\nWhen the prefix is /usr/local: localstatedir defaults to /var/local, and sharedstatedir defaults to /var/local/lib\n\n\n\n\nbuild.pkg_config_path controls the paths pkg-config will search for just\nnative: true dependencies (build machine).\n\n\npkg_config_path controls the paths pkg-config will search for just\nnative: false dependencies (host machine).\n\n\n\nValue from parent project\nValue from subproject's default_options if set\nValue from subproject() default_options if set\nValue from command line if set\n\n\n\n\n Option\n Default value\n Description\n\n\n\n\n prefix\n see below\n Installation prefix\n\n\n bindir\n bin\n Executable directory\n\n\n datadir\n share\n Data file directory\n\n\n includedir\n include\n Header file directory\n\n\n infodir\n share/info\n Info page directory\n\n\n libdir\n see below\n Library directory\n\n\n libexecdir\n libexec\n Library executable directory\n\n\n localedir\n share/locale\n Locale data directory\n\n\n localstatedir\n var\n Localstate data directory\n\n\n mandir\n share/man\n Manual page directory\n\n\n sbindir\n sbin\n System executable directory\n\n\n sharedstatedir\n com\n Architecture-independent data directory\n\n\n sysconfdir\n etc\n Sysconf data directory\n\n\n\n\n\n\n Option\n Default value\n Description\n Is per machine\n Is per subproject\n\n\n\n\n auto_features {enabled, disabled, auto}\n auto\n Override value of all 'auto' features\n no\n no\n\n\n backend {ninja, vs,vs2010, vs2015, vs2017, vs2019, xcode}\n ninja\n Backend to use\n no\n no\n\n\n buildtype {plain, debug,debugoptimized, release, minsize, custom}\n debug\n  Build type to use\n no\n no\n\n\n debug\n true\n Debug\n no\n no\n\n\n default_library {shared, static, both}\n shared\n Default library type\n no\n yes\n\n\n errorlogs\n true\n Whether to print the logs from failing tests.\n no\n no\n\n\n install_umask {preserve, 0000-0777}\n 022\n Default umask to apply on permissions of installed files\n no\n no\n\n\n layout {mirror,flat}\n mirror\n Build directory layout\n no\n no\n\n\n optimization {0, g, 1, 2, 3, s}\n 0\n Optimization level\n no\n no\n\n\n pkg_config_path {OS separated path}\n ''\n Additional paths for pkg-config to search before builtin paths\n yes\n no\n\n\n cmake_prefix_path\n []\n Additional prefixes for cmake to search before builtin paths\n yes\n no\n\n\n stdsplit\n true\n Split stdout and stderr in test logs\n no\n no\n\n\n strip\n false\n Strip targets on install\n no\n no\n\n\n unity {on, off, subprojects}\n off\n Unity build\n no\n no\n\n\n unity_size {>=2}\n 4\n Unity file block size\n no\n no\n\n\n warning_level {0, 1, 2, 3}\n 1\n Set the warning level. From 0 = none to 3 = highest\n no\n yes\n\n\n werror\n false\n Treat warnings as errors\n no\n yes\n\n\n wrap_mode {default, nofallback,nodownload, forcefallback}\n default\n Wrap mode to use\n no\n no\n\n\n force_fallback_for\n []\n Force fallback for those dependencies\n no\n no\n\n\n\n\n\n\n buildtype\n debug\n optimization\n\n\n\n\n plain\n false\n 0\n\n\n debug\n true\n 0\n\n\n debugoptimized\n true\n 2\n\n\n release\n false\n 3\n\n\n minsize\n true\n s\n\n\n\n\n\n\n Option\n Default value\n Possible values\n Description\n\n\n\n\n b_asneeded\n true\n true, false\n Use -Wl,--as-needed when linking\n\n\n b_bitcode\n false\n true, false\n Embed Apple bitcode, see below\n\n\n b_colorout\n always\n auto, always, never\n Use colored output\n\n\n b_coverage\n false\n true, false\n Enable coverage tracking\n\n\n b_lundef\n true\n true, false\n Don't allow undefined symbols when linking\n\n\n b_lto\n false\n true, false\n Use link time optimization\n\n\n b_ndebug\n false\n true, false, if-release\n Disable asserts\n\n\n b_pch\n true\n true, false\n Use precompiled headers\n\n\n b_pgo\n off\n off, generate, use\n Use profile guided optimization\n\n\n b_sanitize\n none\n see below\n Code sanitizer to use\n\n\n b_staticpic\n true\n true, false\n Build static libraries as position independent\n\n\n b_pie\n false\n true, false\n Build position-independent executables (since 0.49.0)\n\n\n b_vscrt\n from_buildtype\n none, md, mdd, mt, mtd, from_buildtype\n VS runtime library to use (since 0.48.0)\n\n\n\n\n\n\n buildtype\n Visual Studio CRT\n\n\n\n\n debug\n /MDd\n\n\n\n debugoptimized\n /MD\n\n\n\n release\n /MD\n\n\n\n minsize\n /MD\n\n\n\n custom\n error!\n\n\n\n\n\n\n Option\n Default value\n Possible values\n Description\n\n\n\n\n c_args\n\n free-form comma-separated list\n C compile arguments to use\n\n\n c_link_args\n\n free-form comma-separated list\n C link arguments to use\n\n\n c_std\n none\n none, c89, c99, c11, c17, c18, c2x, gnu89, gnu99, gnu11, gnu17, gnu18, gnu2x\n C language standard to use\n\n\n c_winlibs\n see below\n free-form comma-separated list\n Standard Windows libs to link against\n\n\n c_thread_count\n 4\n integer value ≥ 0\n Number of threads to use with emcc when using threads\n\n\n cpp_args\n\n free-form comma-separated list\n C++ compile arguments to use\n\n\n cpp_link_args\n\n free-form comma-separated list\n C++ link arguments to use\n\n\n cpp_std\n none\n none, c++98, c++03, c++11, c++14, c++17, c++1z, gnu++03, gnu++11, gnu++14, gnu++17, gnu++1z,  vc++14, vc++17, vc++latest\n C++ language standard to use\n\n\n cpp_debugstl\n false\n true, false\n C++ STL debug mode\n\n\n cpp_eh\n default\n none, default, a, s, sc\n C++ exception handling type\n\n\n cpp_rtti\n true\n true, false\n Whether to enable RTTI (runtime type identification)\n\n\n cpp_thread_count\n 4\n integer value ≥ 0\n Number of threads to use with emcc when using threads\n\n\n cpp_winlibs\n see below\n free-form comma-separated list\n Standard Windows libs to link against\n\n\n fortran_std\n none\n [none, legacy, f95, f2003, f2008, f2018]\n Fortran language standard to use\n\n\n\n"});