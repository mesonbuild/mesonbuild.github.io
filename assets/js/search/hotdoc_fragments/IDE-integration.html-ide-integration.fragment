fragment_downloaded_cb({"url":"IDE-integration.html#ide-integration","fragment":"IDE integration\nMeson has exporters for Visual Studio and XCode, but writing a custom\nbackend for every IDE out there is not a scalable approach. To solve\nthis problem, Meson provides an API that makes it easy for any IDE or\nbuild tools to integrate Meson builds and provide an experience\ncomparable to a solution native to the IDE.\nAll the resources required for such a IDE integration can be found in\nthe meson-info directory in the build directory.\nThe first thing to do when setting up a Meson project in an IDE is to\nselect the source and build directories. For this example we assume\nthat the source resides in an Eclipse-like directory called\nworkspace/project and the build tree is nested inside it as\nworkspace/project/build. First, we initialize Meson by running the\nfollowing command in the source directory.\nWith this command Meson will configure the project and also generate\nintrospection information that is stored in intro-*.json files in\nthe meson-info directory. The introspection dump will be\nautomatically updated when Meson is (re)configured, or the build\noptions change. Thus, an IDE can watch for changes in this directory\nto know when something changed. Note that meson-info.json guaranteed\nto be the last file written.\nThe meson-info directory should contain the following files:\nThe content of the JSON files is further specified in the remainder of\nthis document.\n\n\n\n File\n Description\n\n\n\n\n intro-benchmarks.json\n\n Lists all benchmarks\n\n\n intro-buildoptions.json\n\n Contains a full list of Meson configuration options for the project\n\n\n intro-buildsystem_files.json\n\n Full list of all Meson build files\n\n\n intro-dependencies.json\n\n Lists all dependencies used in the project\n\n\n intro-installed.json\n\n Contains mapping of files to their installed location\n\n\n intro-install_plan.json\n\n Dictionary of data types with the source files and their installation details\n\n\n intro-projectinfo.json\n\n Stores basic information about the project (name, version, etc.)\n\n\n intro-targets.json\n\n Full list of all build targets\n\n\n intro-tests.json\n\n Lists all tests with instructions how to run them\n\n\n\n"});