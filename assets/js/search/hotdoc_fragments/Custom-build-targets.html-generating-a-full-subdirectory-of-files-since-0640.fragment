fragment_downloaded_cb({"url":"Custom-build-targets.html#generating-a-full-subdirectory-of-files-since-0640","fragment":"Generating a full subdirectory of files (since 0.64.0)\nThere are many cases where one needs to generate a bunch of files\nwhere the list of outputs is unknown. The most common case is\ndocumentations. Tools like Doxygen, Sphinx and the like typically\ngenerate a whole directory tree full of files that you would need to\ninstall.\nFor this case Meson provides the opaque_target command. It is more\ncomplex than other targets and typically require the developer to\nwrite a small wrapper script that runs the actual tool. The syntax\nlooks like this.\nAn opaque_target function behaves much like a custom_target with\nthe exception that it takes the command and arguments separately. This\nis needed so that Meson can insert additional integration command line\narguments to the command line. When the script is executed, the\ncommand line looks like this.\nThe first arguments are as follows:\n--stamp is a stamp file. That is, the file whose existance and\ntime samp specify whether the target is up to date or not. Its\ncontents are ignored. When the script is run successfully it must\nupdate the time stamp of this file, typically by opening it for\nwriting and closing it. If the script did not succeed the script\nmust delete this file if it exists. If a stamp file exists after\nan unsuccessfull run, the resulting behaviour is undefined.\n--dep specifies the dependency file. That is, it should list all\nthe source files whose changes should cause the target to be\nre-run. It should be in the same syntax (a subset of Make\ndependencies) as produced by compilers like GCC and Clang. This\nfile must be written. If there is no dependency information\navailable, then the contents should be just a single line\nconsisting of the stamp file name followed by a colon. There must\nnot be a space between the two.\n--scratch points to a directory that can be used for temporary\nprocessing. The contents of this file are persisted over\nconsecutive invocations but they are cleared on every clean\noperation.\n--out points to a directory where the final output files should be\nplaced. They are copied as is on install (if the install kwarg\nis true). If the script is invoked multiple times it is the\nresponsibility of the script to ensure that no stray files from\nthe first run remain in the dir after the second run.\n-- signals the end of integration args. Additional scripts specified\nin the target follow this one. Meson may add new integration\nflags in the future, so the script must be able to handle any\nunknown arguments before this marker (typically by ignoring\nthem).\n"});