fragment_downloaded_cb({"url":"Reference-manual.html#custom_target","fragment":"custom_target()\nCreate a custom top level build target. The only positional argument\nis the name of this target and the keyword arguments are the\nfollowing.\nbuild_by_default (since 0.38.0): causes, when set to true, to\nhave this target be built by default. This means it will be built when\nmeson compile is called without any arguments. The default value is false.\n(since 0.50.0) If build_by_default is explicitly set to false, install\nwill no longer override it. If build_by_default is not set, install will\nstill determine its default.\nbuild_always (deprecated): if true this target is always considered out of\ndate and is rebuilt every time.  Equivalent to setting both\nbuild_always_stale and build_by_default to true.\nbuild_always_stale (since 0.47.0): if true the target is always considered out of date.\nUseful for things such as build timestamps or revision control tags.\nThe associated command is run even if the outputs are up to date.\ncapture: there are some compilers that can't be told to write\ntheir output to a file but instead write it to standard output. When\nthis argument is set to true, Meson captures stdout and writes it\nto the target file. Note that your command argument list may not\ncontain @OUTPUT@ when capture mode is active.\nconsole (since 0.48.0): keyword argument conflicts with capture, and is meant\nfor commands that are resource-intensive and take a long time to\nfinish. With the Ninja backend, setting this will add this target\nto Ninja's console pool,\nwhich has special properties such as not buffering stdout and\nserializing all targets in this pool.\ncommand: command to run to create outputs from inputs. The command\nmay be strings or the return value of functions that return file-like\nobjects such as find_program(),\nexecutable(), configure_file(),\nfiles(), custom_target(), etc.\nMeson will automatically insert the appropriate dependencies on\ntargets and files listed in this keyword argument.\nNote: always specify commands in array form ['commandname', '-arg1', '-arg2'] rather than as a string 'commandname -arg1 -arg2' as the latter will not work.\ndepend_files: files (string,\nfiles(), or configure_file()) that\nthis target depends on but are not listed in the command keyword\nargument. Useful for adding regen dependencies.\ndepends: specifies that this target depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where you have a tool that\ne.g. does globbing internally. Usually you should just put the\ngenerated sources as inputs and Meson will set up all dependencies\nautomatically.\ndepfile: a dependency file that the command can write listing\nall the additional files this target depends on, for example a C\ncompiler would list all the header files it included, and a change\nin any one of these files triggers a recompilation\ninput: list of source files. (since 0.41.0) the list is flattened.\ninstall: when true, this target is installed during the install step\ninstall_dir: If only one install_dir is provided, all outputs are installed there.\nSince 0.40.0 Allows you to specify the installation directory for each\ncorresponding output. For example:\nThis would install first.file to somedir and second.file to otherdir.\nTo only install some outputs, pass false for the outputs that you\ndon't want installed. For example:\nThis would install second.file to otherdir and not install first.file.\ninstall_mode (since 0.47.0): the file mode and optionally the\nowner/uid and group/gid\ninstall_tag (since 0.60.0): A list of strings, one per output, used by\nmeson install --tags command to install only a subset of the files.\nBy default all outputs have no install tag which means they are not being\ninstalled when --tags argument is specified. If only one tag is specified,\nit is assumed that all outputs have the same tag. false can be used for\noutputs that have no tag or are not installed.\noutput: list of output files\nenv (since 0.57.0): environment variables to set, such as\n{'NAME1': 'value1', 'NAME2': 'value2'} or ['NAME1=value1', 'NAME2=value2'],\nor an environment() object which allows more\nsophisticated environment juggling.\nfeed (since 0.59.0): there are some compilers that can't be told to read\ntheir input from a file and instead read it from standard input. When this\nargument is set to true, Meson feeds the input file to stdin. Note that\nyour argument list may not contain @INPUT@ when feed mode is active.\nThe list of strings passed to the command keyword argument accept\nthe following special string substitutions:\n(since 0.47.0) The depfile keyword argument also accepts the\n@BASENAME@ and @PLAINNAME@ substitutions.\nThe returned object also has methods that are documented in the\nobject methods section below.\nNote: Assuming that command: is executed by a POSIX sh shell\nis not portable, notably to Windows. Instead, consider using a\nnative: true executable(), or a python script.\n\n\nbuild_by_default (since 0.38.0): causes, when set to true, to\nhave this target be built by default. This means it will be built when\nmeson compile is called without any arguments. The default value is false.\n(since 0.50.0) If build_by_default is explicitly set to false, install\nwill no longer override it. If build_by_default is not set, install will\nstill determine its default.\n\n\nbuild_always (deprecated): if true this target is always considered out of\ndate and is rebuilt every time.  Equivalent to setting both\nbuild_always_stale and build_by_default to true.\n\n\nbuild_always_stale (since 0.47.0): if true the target is always considered out of date.\nUseful for things such as build timestamps or revision control tags.\nThe associated command is run even if the outputs are up to date.\n\n\ncapture: there are some compilers that can't be told to write\ntheir output to a file but instead write it to standard output. When\nthis argument is set to true, Meson captures stdout and writes it\nto the target file. Note that your command argument list may not\ncontain @OUTPUT@ when capture mode is active.\n\n\nconsole (since 0.48.0): keyword argument conflicts with capture, and is meant\nfor commands that are resource-intensive and take a long time to\nfinish. With the Ninja backend, setting this will add this target\nto Ninja's console pool,\nwhich has special properties such as not buffering stdout and\nserializing all targets in this pool.\n\n\ncommand: command to run to create outputs from inputs. The command\nmay be strings or the return value of functions that return file-like\nobjects such as find_program(),\nexecutable(), configure_file(),\nfiles(), custom_target(), etc.\nMeson will automatically insert the appropriate dependencies on\ntargets and files listed in this keyword argument.\nNote: always specify commands in array form ['commandname', '-arg1', '-arg2'] rather than as a string 'commandname -arg1 -arg2' as the latter will not work.\n\n\ndepend_files: files (string,\nfiles(), or configure_file()) that\nthis target depends on but are not listed in the command keyword\nargument. Useful for adding regen dependencies.\n\n\ndepends: specifies that this target depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where you have a tool that\ne.g. does globbing internally. Usually you should just put the\ngenerated sources as inputs and Meson will set up all dependencies\nautomatically.\n\n\ndepfile: a dependency file that the command can write listing\nall the additional files this target depends on, for example a C\ncompiler would list all the header files it included, and a change\nin any one of these files triggers a recompilation\n\n\ninput: list of source files. (since 0.41.0) the list is flattened.\n\n\ninstall: when true, this target is installed during the install step\n\n\ninstall_dir: If only one install_dir is provided, all outputs are installed there.\nSince 0.40.0 Allows you to specify the installation directory for each\ncorresponding output. For example:\ncustom_target('different-install-dirs',\n  output : ['first.file', 'second.file'],\n  install : true,\n  install_dir : ['somedir', 'otherdir])\n\nThis would install first.file to somedir and second.file to otherdir.\nTo only install some outputs, pass false for the outputs that you\ndon't want installed. For example:\ncustom_target('only-install-second',\n  output : ['first.file', 'second.file'],\n  install : true,\n  install_dir : [false, 'otherdir])\n\nThis would install second.file to otherdir and not install first.file.\n\n\ninstall_mode (since 0.47.0): the file mode and optionally the\nowner/uid and group/gid\n\n\ninstall_tag (since 0.60.0): A list of strings, one per output, used by\nmeson install --tags command to install only a subset of the files.\nBy default all outputs have no install tag which means they are not being\ninstalled when --tags argument is specified. If only one tag is specified,\nit is assumed that all outputs have the same tag. false can be used for\noutputs that have no tag or are not installed.\n\n\noutput: list of output files\n\n\nenv (since 0.57.0): environment variables to set, such as\n{'NAME1': 'value1', 'NAME2': 'value2'} or ['NAME1=value1', 'NAME2=value2'],\nor an environment() object which allows more\nsophisticated environment juggling.\n\n\nfeed (since 0.59.0): there are some compilers that can't be told to read\ntheir input from a file and instead read it from standard input. When this\nargument is set to true, Meson feeds the input file to stdin. Note that\nyour argument list may not contain @INPUT@ when feed mode is active.\n\n\n\n\n@INPUT@: the full path to the input passed to input. If more than\none input is specified, all of them will be substituted as separate\narguments only if the command uses '@INPUT@' as a\nstandalone-argument. For instance, this would not work: command : ['cp', './@INPUT@'], but this would: command : ['cp', '@INPUT@'].\n\n@OUTPUT@: the full path to the output passed to output. If more\nthan one outputs are specified, the behavior is the same as\n@INPUT@.\n\n@INPUT0@ @INPUT1@ ...: the full path to the input with the specified array index in input\n\n\n@OUTPUT0@ @OUTPUT1@ ...: the full path to the output with the specified array index in output\n\n\n@OUTDIR@: the full path to the directory where the output(s) must be written\n\n@DEPFILE@: the full path to the dependency file passed to depfile\n\n\n@PLAINNAME@: the input filename, without a path\n\n@BASENAME@: the input filename, with extension removed\n\n@PRIVATE_DIR@ (since 0.50.1): path to a directory where the custom target must store all its intermediate files.\n\n@SOURCE_ROOT@: the path to the root of the source tree. Depending on the backend,\nthis may be an absolute or a relative to current workdir path.\n\n@BUILD_ROOT@: the path to the root of the build tree. Depending on the backend,\nthis may be an absolute or a relative to current workdir path.\n\n@CURRENT_SOURCE_DIR@: this is the directory where the currently\nprocessed meson.build is located in.  Depending on the backend,\nthis may be an absolute or a relative to current workdir path.\n\n"});