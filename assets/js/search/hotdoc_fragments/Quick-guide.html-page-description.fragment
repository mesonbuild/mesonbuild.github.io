fragment_downloaded_cb({"url":"Quick-guide.html#page-description","fragment":"Meson has been designed to be as simple to use as possible. This page\noutlines the initial steps needed for installation, troubleshooting,\nand standard use.\nFor more advanced configuration please refer to the command line help\nmeson --help or the Meson documentation located at the\nMesonbuild website.\nTable of Contents:\nNinja is only needed if you use the Ninja backend. Meson can also\ngenerate native VS and XCode project files.\nUbuntu:\nDue to our frequent release cycle and development speed, distro packaged software may quickly become outdated.\nRequirements: pip3\nThe best way to receive the most up-to-date version of Mesonbuild.\nInstall as a local user (recommended):\nInstall as root:\nIf you are unsure whether to install as root or a local user, install\nas a local user.\nRequirements: git\nMeson can be run directly from the cloned git repository.\nCommon Issues:\nDescription: The default installation prefix for the python pip module\ninstallation is not included in your shell environment PATH. The\ndefault prefix for python pip installation modules is located under\n/usr/local.\n**Resolution:\nThis issue can be resolved by altering the default shell environment\nPATH to include /usr/local/bin. **\nNote: There are other ways of fixing this issue such as using\nsymlinks or copying the binaries to a default path and these methods\nare not recommended or supported as they may break package management\ninteroperability.\nThe most common use case of Meson is compiling code on a code base you\nare working on. The steps to take are very simple.\nThe only thing to note is that you need to create a separate build\ndirectory. Meson will not allow you to build source code inside your\nsource tree. All build artifacts are stored in the build directory.\nThis allows you to have multiple build trees with different\nconfigurations at the same time. This way generated files are not\nadded into revision control by accident.\nTo recompile after code changes, just type meson compile. The build\ncommand is always the same. You can do arbitrary changes to source\ncode and build system files and Meson will detect those and will do\nthe right thing. If you want to build optimized binaries, just use the\nargument --buildtype=debugoptimized when running Meson. It is\nrecommended that you keep one build directory for unoptimized builds\nand one for optimized ones. To compile any given configuration, just\ngo into the corresponding build directory and run meson compile.\nMeson will automatically add compiler flags to enable debug\ninformation and compiler warnings (i.e. -g and -Wall). This means\nthe user does not have to deal with them and can instead focus on\ncoding.\nDistro packagers usually want total control on the build flags\nused. Meson supports this use case natively. The commands needed to\nbuild and install Meson projects are the following.\nThe command line switch --buildtype=plain tells Meson not to add its\nown flags to the command line. This gives the packager total control\non used flags.\nThis is very similar to other build systems. The only difference is\nthat the DESTDIR variable is passed as an environment variable\nrather than as an argument to meson install.\nAs distro builds happen always from scratch, you might consider\nenabling unity builds on your packages because they\nare faster and produce better code. However there are many projects\nthat do not build with unity builds enabled so the decision to use\nunity builds must be done by the packager on a case by case basis.\n\nRequirements\nInstallation using package manager\nInstallation using Python\nInstallation from source\nTroubleshooting\nCompiling a Meson project\nUsing Meson as a distro packager\n\n\nPython 3\nNinja\n\n"});