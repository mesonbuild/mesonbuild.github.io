fragment_downloaded_cb({"url":"Cuda-module.html#page-description","fragment":"Since: 0.50.0\nThis module provides helper functionality related to the CUDA Toolkit and\nbuilding code using it.\nNote: this module is unstable. It is only provided as a technology preview.\nIts API may change in arbitrary ways between releases or it might be removed\nfrom Meson altogether.\nThe module may be imported as follows:\nIt offers several useful functions that are enumerated below.\nSince: 0.50.0\nReturns a list of -gencode flags that should be passed to cuda_args: in\norder to compile a \"fat binary\" for the architectures/compute capabilities\nenumerated in the positional argument(s). The flags shall be acceptable to\nan NVCC with CUDA Toolkit version string cuda_version_string.\nA set of architectures and/or compute capabilities may be specified by:\nA suffix of +PTX requests PTX code generation for the given architecture.\nA compute capability given as A.B(X.Y) requests PTX generation for an older\nvirtual architecture X.Y before binary generation for a newer architecture\nA.B.\nMultiple architectures and compute capabilities may be passed in using\nThe single-word architectural sets 'All', 'Common' or 'Auto'\ncannot be mixed with architecture names or compute capabilities. Their\ninterpretation is:\nThe supported architecture names and their corresponding compute capabilities\nare:\nExamples:\nNote: This function is intended to closely replicate CMake's FindCUDA module\nfunction CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable, [list of CUDA compute architectures])\nSince: 0.50.0\nHas precisely the same interface as nvcc_arch_flags(),\nbut rather than returning a list of flags, it returns a \"readable\" list of\narchitectures that will be compiled for. The output of this function is solely\nintended for informative message printing.\nThis will print\nNote: This function is intended to closely replicate CMake's\nFindCUDA module function CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable, [list of CUDA compute architectures])\nSince: 0.50.0\nReturns the minimum NVIDIA proprietary driver version required, on the\nhost system, by kernels compiled with a CUDA Toolkit with the given\nversion string.\nThe output of this function is generally intended for informative\nmessage printing, but could be used for assertions or to conditionally\nenable features known to exist within the minimum NVIDIA driver\nrequired.\n\nThe single positional argument 'All', 'Common' or 'Auto'\n\nAs (an array of)\n\nArchitecture names ('Kepler', 'Maxwell+Tegra', 'Turing') and/or\nCompute capabilities ('3.0', '3.5', '5.3', '7.5')\n\n\n\n\nArchitecture names ('Kepler', 'Maxwell+Tegra', 'Turing') and/or\nCompute capabilities ('3.0', '3.5', '5.3', '7.5')\n\n\nMultiple positional arguments\nLists of strings\nSpace (), comma (,) or semicolon (;)-separated strings\n\n\n\n\n Name\n Compute Capability\n\n\n\n\n 'All'\n\n All CCs supported by given NVCC compiler.\n\n\n 'Common'\n\n Relatively common CCs supported by given NVCC compiler. Generally excludes Tegra and Tesla devices.\n\n\n 'Auto'\n\n The CCs provided by the detected: keyword, filtered for support by given NVCC compiler.\n\n\n\n\n\n\n Name\n Compute Capability\n\n\n\n\n 'Fermi'\n\n 2.0, 2.1(2.0)\n\n\n 'Kepler'\n\n 3.0, 3.5\n\n\n 'Kepler+Tegra'\n\n 3.2\n\n\n 'Kepler+Tesla'\n\n 3.7\n\n\n 'Maxwell'\n\n 5.0, 5.2\n\n\n 'Maxwell+Tegra'\n\n 5.3\n\n\n 'Pascal'\n\n 6.0, 6.1\n\n\n 'Pascal+Tegra'\n\n 6.2\n\n\n 'Volta'\n\n 7.0\n\n\n 'Xavier'\n\n 7.2\n\n\n 'Turing'\n\n 7.5\n\n\n 'Ampere'\n\n 8.0, 8.6\n\n\n\n"});