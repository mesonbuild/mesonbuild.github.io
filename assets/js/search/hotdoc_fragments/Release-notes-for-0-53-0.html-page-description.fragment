fragment_downloaded_cb({"url":"Release-notes-for-0-53-0.html#page-description","fragment":"The new fs module can be used to examine the contents of the current\nfile system.\nmeson dist command line now gained --include-subprojects command\nline option. When enabled, the source tree of all subprojects used by\nthe current build will also be included in the final tarball. This is\nuseful to distribute self contained tarball that can be built offline\n(i.e. --wrap-mode=nodownload).\nMeson now ships with predefined project templates for Dlang,\nFortran, Rust, Objective-C, and by passing the associated flags d,\nfortran, rust, objc to meson init --language.\nA new function summary() has been\nadded to summarize build configuration at the end of the build\nprocess.\nExample:\nOutput:\nPrevious to Meson 0.52.0 you set the dynamic linker using compiler\nspecific flags passed via language flags and hoped things worked out.\nIn version 0.52.0 Meson started detecting the linker and making\nintelligent decisions about using it. Unfortunately this broke\nchoosing a non-default linker.\nNow there is a generic mechanism for doing this. In 0.53.0, you can\nuse the LD environment variable. In 0.53.1 this was changed to\n<compiler_variable>_LD, such as CC_LD, CXX_LD, D_LD, etc due\nto regressions. The usual Meson environment variable\nrules\napply. Alternatively, you can add the following to a cross or native\nfile:\nIn 0.53.0:\nIn 0.53.1 or newer:\nAnd Meson will select the linker if possible.\nnew in 0.53.0 Akin to the c_std and cpp_std options, the\nfortran_std option sets Fortran compilers to warn or error on\nnon-Fortran standard code. Only the Gfortran and Intel Fortran\ncompilers have support for this option. Other Fortran compilers ignore\nthe fortran_std option.\nSupported values for fortran_std include:\nAdded the embed kwarg to the python module dependency function to\nselect the python library that can be used to embed python into an\napplication.\nadded in 0.53.0:\nHistorically and through today, typical Scalapack setups have broken\nand incomplete pkg-config or FindScalapack.cmake. Meson handles\nfinding Scalapack on setups including:\nIt is now possible to give a list of absolute paths where find_program() should\nalso search, using the dirs keyword argument.\nFor example on Linux /sbin and /usr/sbin are not always in the $PATH:\nWhen the respective tools are available, 'ctags', 'TAGS' and 'cscope'\ntargets will be generated by Meson, unless you have defined your own.\nKeys can now be any expression evaluating to a string value, not limited\nto string literals any more.\nWith this release even more CMake projects are supported via CMake\nsubprojects due to these internal\nimprovements:\nsince 0.53.0, compiler.get_linker_id() allows retrieving a lowercase\nname for the linker. Since each compiler family can typically use a\nvariety of linkers depending on operating system, this helps users\ndefine logic for corner cases not otherwise easily handled.\nNative support for compiling and linking against the CUDA Toolkit\nusing the dependency function:\nSee the CUDA dependency for more information.\nThe new boolean option is called cpp_rtti.\ndependencies (--dependencies, intro-dependencies.json):\nscanning dependencies (--scan-dependencies):\ntests and benchmarks (--tests, --benchmarks, intro-tests.json,\nintro-benchmarks.json):\n\n\nlegacy for non-conforming code--this is especially important for Gfortran, which by default errors on old non-compliant Fortran code\n\nf95 for Fortran 95 compliant code.\n\nf2003 for Fortran 2003 compliant code.\n\nf2008 for Fortran 2008 compliant code.\n\nf2018 for Fortran 2018 compliant code.\n\n\nLinux: Intel MKL or OpenMPI + Netlib\nMacOS: Intel MKL or OpenMPI + Netlib\nWindows: Intel MKL (OpenMPI not available on Windows)\n\n\nUse the CMake file API for CMake >=3.14\nHandle the explicit dependencies via add_dependency\n\nBasic support for add_custom_target\n\nImproved add_custom_command support\nObject library support on Windows\n\n\nadded the version key\n\n\nadded the version key containing the required dependency version\n\n\nadded the protocol key\n\n"});