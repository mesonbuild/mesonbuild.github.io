fragment_downloaded_cb({"url":"Design-rationale.html#sample-code","fragment":"Sample code\nEnough design talk, let's get to the code. Before looking at the\nexamples we would like to emphasize that this is not in any way the\nfinal code. It is proof of concept code that works in the system as it\ncurrently exists (February 2013), but may change at any time.\nLet's start simple. Here is the code to compile a single executable\nbinary.\nThis is about as simple as one can get. First you declare the project\nname and the languages it uses. Then you specify the binary to build\nand its sources. The build system will do all the rest. It will add\nproper suffixes (e.g. '.exe' on Windows), set the default compiler\nflags and so on.\nUsually programs have more than one source file. Listing them all in\nthe function call can become unwieldy. That is why the system supports\nkeyword arguments. They look like this.\nExternal dependencies are simple to use.\nIn other build systems you have to manually add the compile and link\nflags from external dependencies to targets. In this system you just\ndeclare that extlibrary is mandatory and that the generated program\nuses that. The build system does all the plumbing for you.\nHere's a slightly more complicated definition. It should still be\nunderstandable.\nFirst we build a shared library named foobar. It is marked\ninstallable, so running meson install installs it to the library\ndirectory (the system knows which one so the user does not have to\ncare). Then we build a test executable which is linked against the\nlibrary. It will not be installed, but instead it is added to the list\nof unit tests, which can be run with the command meson test.\nAbove we mentioned precompiled headers as a feature not supported by\nother build systems. Here's how you would use them.\nThe main reason other build systems cannot provide pch support this\neasily is because they don't enforce certain best practices. Due to\nthe way include paths work, it is impossible to provide pch support\nthat always works with both in-source and out-of-source\nbuilds. Mandating separate build and source directories makes this and\nmany other problems a lot easier.\n"});