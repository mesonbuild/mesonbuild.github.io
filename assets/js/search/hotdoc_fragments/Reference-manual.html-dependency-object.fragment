fragment_downloaded_cb({"url":"Reference-manual.html#dependency-object","fragment":"\ndependency object\nThis object is returned by dependency() and contains\nan external dependency with the following methods:\nfound(): returns whether the dependency was found.\nname() (since 0.48.0): returns the name of the dependency that was\nsearched. Returns internal for dependencies created with\ndeclare_dependency().\nget_pkgconfig_variable(varname) (since 0.36.0): gets the\npkg-config variable specified, or, if invoked on a non pkg-config\ndependency, error out. (since 0.44.0) You can also redefine a\nvariable by passing a list to the define_variable parameter\nthat can affect the retrieved variable: ['prefix', '/']).\n(since 0.45.0) A warning is issued if the variable is not defined,\nunless a default parameter is specified.\n(Deprecated since 0.56.0) use get_variable(pkgconfig : ...) instead\nget_configtool_variable(varname) (since 0.44.0): gets the\ncommand line argument from the config tool (with -- prepended), or,\nif invoked on a non config-tool dependency, error out.\n(Deprecated since 0.56.0) use get_variable(configtool : ...) instead\ntype_name(): returns a string describing the type of the\ndependency, the most common values are internal for deps created\nwith declare_dependency() and pkgconfig for system dependencies\nobtained with Pkg-config.\nversion(): the version number as a string, for example 1.2.8.\nunknown if the dependency provider doesn't support determining the\nversion.\ninclude_type(): returns whether the value set by the include_type kwarg\nas_system(value): returns a copy of the dependency object, which has changed\nthe value of include_type to value. The value argument is optional and\ndefaults to 'preserve'.\nas_link_whole() Since 0.56.0 Only dependencies created with\ndeclare_dependency(), returns a copy of the dependency object with all\nlink_with arguments changed to link_whole. This is useful for example for\nfallback dependency from a subproject built with default_library=static.\nNote that all link_with objects must be static libraries otherwise an error\nwill be raised when trying to link_whole a shared library.\npartial_dependency(compile_args : false, link_args : false, links : false, includes : false, sources : false) (since 0.46.0): returns\na new dependency object with the same name, version, found status,\ntype name, and methods as the object that called it. This new\nobject will only inherit other attributes from its parent as\ncontrolled by keyword arguments.\nIf the parent has any dependencies, those will be applied to the new\npartial dependency with the same rules. So, given:\ndep3 will add ['-Werror=foo', '-Werror=bar'] to the compiler args\nof any target it is added to, but libfoo will not be added to the\nlink_args.\nNote: A bug present until 0.50.1 results in the above behavior\nnot working correctly.\nThe following arguments will add the following attributes:\nget_variable(varname, cmake : str, pkgconfig : str, configtool : str, internal: str, default_value : str, pkgconfig_define : [str, str])\n(since 0.51.0): a generic variable getter method, which replaces the\nget_type_variable methods. This allows one to get the variable\nfrom a dependency without knowing specifically how that dependency\nwas found. If default_value is set and the value cannot be gotten\nfrom the object then default_value is returned, if it is not set\nthen an error is raised.\n(since 0.54.0) added internal keyword.\n(since 0.58.0) added varname as first positional argument. It is used as\ndefault value for cmake, pkgconfig, configtool and internal keyword\narguments. It is useful in the common case where pkgconfig and internal\nuse the same variable name, in which case it's easier to write dep.get_variable('foo')\ninstead of dep.get_variable(pkgconfig: 'foo', internal: 'foo').\n\n\nfound(): returns whether the dependency was found.\n\n\nname() (since 0.48.0): returns the name of the dependency that was\nsearched. Returns internal for dependencies created with\ndeclare_dependency().\n\n\nget_pkgconfig_variable(varname) (since 0.36.0): gets the\npkg-config variable specified, or, if invoked on a non pkg-config\ndependency, error out. (since 0.44.0) You can also redefine a\nvariable by passing a list to the define_variable parameter\nthat can affect the retrieved variable: ['prefix', '/']).\n(since 0.45.0) A warning is issued if the variable is not defined,\nunless a default parameter is specified.\n(Deprecated since 0.56.0) use get_variable(pkgconfig : ...) instead\n\n\nget_configtool_variable(varname) (since 0.44.0): gets the\ncommand line argument from the config tool (with -- prepended), or,\nif invoked on a non config-tool dependency, error out.\n(Deprecated since 0.56.0) use get_variable(configtool : ...) instead\n\n\ntype_name(): returns a string describing the type of the\ndependency, the most common values are internal for deps created\nwith declare_dependency() and pkgconfig for system dependencies\nobtained with Pkg-config.\n\n\nversion(): the version number as a string, for example 1.2.8.\nunknown if the dependency provider doesn't support determining the\nversion.\n\n\ninclude_type(): returns whether the value set by the include_type kwarg\n\n\nas_system(value): returns a copy of the dependency object, which has changed\nthe value of include_type to value. The value argument is optional and\ndefaults to 'preserve'.\n\n\nas_link_whole() Since 0.56.0 Only dependencies created with\ndeclare_dependency(), returns a copy of the dependency object with all\nlink_with arguments changed to link_whole. This is useful for example for\nfallback dependency from a subproject built with default_library=static.\nNote that all link_with objects must be static libraries otherwise an error\nwill be raised when trying to link_whole a shared library.\n\n\npartial_dependency(compile_args : false, link_args : false, links : false, includes : false, sources : false) (since 0.46.0): returns\na new dependency object with the same name, version, found status,\ntype name, and methods as the object that called it. This new\nobject will only inherit other attributes from its parent as\ncontrolled by keyword arguments.\nIf the parent has any dependencies, those will be applied to the new\npartial dependency with the same rules. So, given:\ndep1 = declare_dependency(compile_args : '-Werror=foo', link_with : 'libfoo')\ndep2 = declare_dependency(compile_args : '-Werror=bar', dependencies : dep1)\ndep3 = dep2.partial_dependency(compile_args : true)\n\ndep3 will add ['-Werror=foo', '-Werror=bar'] to the compiler args\nof any target it is added to, but libfoo will not be added to the\nlink_args.\nNote: A bug present until 0.50.1 results in the above behavior\nnot working correctly.\nThe following arguments will add the following attributes:\n\ncompile_args: any arguments passed to the compiler\nlink_args: any arguments passed to the linker\nlinks: anything passed via link_with or link_whole\nincludes: any include_directories\nsources: any compiled or static sources the dependency has\n\n\n\nget_variable(varname, cmake : str, pkgconfig : str, configtool : str, internal: str, default_value : str, pkgconfig_define : [str, str])\n(since 0.51.0): a generic variable getter method, which replaces the\nget_type_variable methods. This allows one to get the variable\nfrom a dependency without knowing specifically how that dependency\nwas found. If default_value is set and the value cannot be gotten\nfrom the object then default_value is returned, if it is not set\nthen an error is raised.\n(since 0.54.0) added internal keyword.\n(since 0.58.0) added varname as first positional argument. It is used as\ndefault value for cmake, pkgconfig, configtool and internal keyword\narguments. It is useful in the common case where pkgconfig and internal\nuse the same variable name, in which case it's easier to write dep.get_variable('foo')\ninstead of dep.get_variable(pkgconfig: 'foo', internal: 'foo').\n\n\n\ncompile_args: any arguments passed to the compiler\nlink_args: any arguments passed to the linker\nlinks: anything passed via link_with or link_whole\nincludes: any include_directories\nsources: any compiled or static sources the dependency has\n\n"});