fragment_downloaded_cb({"url":"Adding-new-projects-to-wrapdb.html#page-description","fragment":"Each wrap repository has a master branch with only one initial commit\nand no wrap files. And that is the only commit ever made on that\nbranch.\nFor every release of a project a new branch is created. The new branch\nis named after the the upstream release number (e.g. 1.0.0). This\nbranch holds a wrap file for this particular release.\nThere are two types of wraps on WrapDB - regular wraps and wraps with\nMeson build definition patches. A wrap file in a repository on WrapDB\nmust have a name upstream.wrap.\nWraps with Meson build definition patches work in much the same way as\nDebian: we take the unaltered upstream source package and add a new\nbuild system to it as a patch. These build systems are stored as Git\nrepositories on GitHub. They only contain build definition files. You\nmay also think of them as an overlay to upstream source.\nWhenever a new commit is pushed into GitHub's project branch, a new\nwrap is generated with an incremented version number. All the old\nreleases remain unaltered. New commits are always done via GitHub\nmerge requests and must be reviewed by someone other than the\nsubmitter.\nNote that your Git repo with wrap must not contain the subdirectory of\nthe source release. That gets added automatically by the service. You\nalso must not commit any source code from the original tarball into\nthe wrap repository.\nWrapped subprojects are used much like external dependencies. Thus\nthey should have the same name as the upstream projects.\nNOTE: Repo names must fully match this regexp: [a-z0-9._]+.\nIf the project provides a pkg-config file, then the repository name\nshould be the same as the pkg-config name. Usually this is the name of\nthe project, such as libpng. Sometimes it is slightly different,\nhowever. As an example the libogg project's chosen pkg-config name is\nogg instead of libogg, which is the reason why the repository is\nnamed plain ogg.\nIf there is no a pkg-config file, the name the project uses/promotes\nshould be used, lowercase only (Catch2 -> catch2).\nIf the project name is too generic or ambiguous (e.g. benchmark),\nconsider using organization-project naming format (e.g.\ngoogle-benchmark).\nIf the project already uses Meson build system, then only a wrap file\nNote: you should only do this if you have written the build files\nand want to contribute them for inclusion to WrapDB. The maintainers\nhave only limited reesources and unfortunately can not take requests\nto write Meson build definitions for arbitrary projects.\nThe submission starts by creating an issue on the wrapdb bug\ntracker using Title\nand Description below as a template.\nTitle: new wrap: <project_name>\nDescription:\nWait until the new repository or branch is created. A link to the new\nrepository or branch will be posted in a comment to this issue. After\nthis you can createa a merge request in that repository for your build\nfiles.\nNOTE: Requesting a branch is not necessary. WrapDB maintainer can\ncreate the branch and modify the PR accordingly if the project\nrepository exists.\nSetting up the contents might seem a bit counterintuitive at first.\nJust remember that the outcome needs to have one (and only one) commit\nthat has all the build definition files (i.e. meson.build and\nmeson_options.txt files) and nothing else. It is good practice to\nhave this commit in a branch whose name matches the release as\ndescribed above.\nFirst you need to fork the repository to your own page using GitHub's\nfork button. Then you can clone the repo to your local machine.\nCreate a new branch for your work:\nIf you are adding new changes to an existing branch, leave out the\n-b argument.\nNow you need to copy the source code for the original project to this\ndirectory. If you already have it extracted somewhere, you'd do\nsomething like this:\nNow all the files should be in the wrap directory. Do not add them\nto Git, though. Neither now or at any time during this process. The\nrepo must contain only the newly created build files.\nNew release branches require an upstream.wrap file, so create one if\nneeded.\nThe file format is simple, see any existing wrapdb repo for the\ncontent. The checksum is SHA-256 and can be calculated with the\nfollowing command on most unix-like operating systems:\nUnder macOS the command is the following:\nNext you need to add the entries that define what dependencies the\ncurrent project provides. This is important, as it is what makes\nMeson's automatic dependency resolver work. It is done by adding a\nprovide entry at the end of the upstream.wrap file. Using the Ogg\nlibrary as an example, this is what it would look like:\nThe ogg part on the left refers to the dependency name, which should\nbe the same as its Pkg-Config name. ogg_dep on the right refers to\nthe variable in the build definitions that provides the dependency.\nMost commonly it holds the result of a declare_dependency call. If a\nvariable of that name is not defined, Meson will exit with a hard\nerror. For further details see the main Wrap\nmanual.\nNow you can create the build files and work on them until the project\nbuilds correctly.\nWhen you are satisfied with the results, add the build files to Git\nand push the result to GitHub.\nNow you should create a pull request on GitHub. Try to create it\nagainst the correct branch rather than master (1.0.0 branch in this\nexample). GitHub should do this automatically.\nIf the branch doesn't exist file a pull request against master.\nWrapDB maintainers can fix it before merging.\nIf packaging review requires you to do changes, use the --amend\nargument to commit so that your branch will continue to have only\none commit.\nAdding new releases to an existing repo is straightforward. All you\nneed to do is to follow the rules discussed above but when you create\nthe merge request, file it against the master branch. The repository\nreviewer will create the necessary branch and retarget your merge\nrequest accordingly.\nmesonwrap tools must be used for the tasks\nbelow.\nEach project gets its own repo. It is initialized like this:\nThe command creates a new repository and uploads it to GitHub.\n--version flag may be used to create a branch immediately.\nCreate a new branch whose name matches the upstream release number.\nBranch names must fully match this regexp: [a-z0-9._]+.\nThe point of a wrap is to provide the upstream project with as few\nchanges as possible. Most projects should not contain anything more\nthan a few Meson definition files. Sometimes it may be necessary to\nadd a template header file or something similar. These should be held\nat a minimum.\nIt should especially be noted that there must not be any patches\nto functionality. All such changes must be submitted to upstream. You\nmay also host your own Git repo with the changes if you wish. The Wrap\nsystem has native support for Git subprojects.\nSee Wrap review guidelines, especially\nthe part about tooling that you can use to check for the most common\nproblems yourself. Fixing all issues reported by the tool is a\nmandatory requirement for getting your MR accepted, so doing this\nproactively makes the review process smoother.\n\n\nupstream.wrap should be provided. In other case a Meson build\ndefinition patch - a set of meson.build files - should be also\nprovided.\n\n"});