fragment_downloaded_cb({"url":"Commands.html#page-description","fragment":"There are two different ways of invoking Meson. First, you can run it\ndirectly from the source tree with the command\n/path/to/source/meson.py. Meson may also be installed in which case\nthe command is simply meson. In this manual we only use the latter\nformat for simplicity.\nMeson is invoked using the following syntax:\nmeson [COMMAND] [COMMAND_OPTIONS]\nThis section describes all available commands and some of their\nOptional arguments. The most common workflow is to run\nsetup, followed by compile, and then\ninstall.\nFor the full list of all available options for a specific command use\nthe following syntax: meson COMMAND --help\nChanges options of a configured meson project.\nMost arguments are the same as in setup.\nNote: reconfiguring project will not reset options to their default\nvalues (even if they were changed in meson.build).\nList all available options:\nChange value of a single option:\n(since 0.54.0)\nBuilds a default or a specified target of a configured meson project.\n--verbose argument is available since 0.55.0.\n(since 0.55.0)\nTARGET has the following syntax [PATH/]NAME[:TYPE], where:\nPATH and/or TYPE can be omitted if the resulting TARGET can be\nused to uniquely identify the target in meson.build.\n(since 0.55.0)\nBACKEND-args use the following syntax:\nIf you only pass a single string, then it is considered to have all\nvalues separated by commas. Thus invoking the following command:\nwould add -n, -d and explain arguments to ninja invocation.\nIf you need to have commas or spaces in your string values, then you\nneed to pass the value with proper shell quoting like this:\nBuild the project:\nExecute a dry run on ninja backend with additional debug info:\nBuild three targets: two targets that have the same foo name, but\ndifferent type, and a bar target:\nProduce a coverage html report (if available):\n(since 0.52.0)\nGenerates a release archive from the current source tree.\nSee notes about creating releases for more info.\nCreate a release archive:\n(since 0.45.0)\nCreates a basic set of build files based on a template.\nCreate a project in sourcedir:\nDisplays information about a configured meson project.\nDisplay basic information about a configured project in builddir:\n(since 0.47.0)\nInstalls the project to the prefix specified in setup.\nSee the installation documentation for more info.\nInstall project to prefix:\nInstall project to $DESTDIR/prefix:\n(since 0.50.0)\nModifies the meson project.\nSee the meson file rewriter documentation for more info.\nConfigures a build directory for the meson project.\nThis is the default meson command (invoked if there was no COMMAND supplied).\nSee meson introduction\npage for more info.\nConfigures builddir with default values:\n(since 0.49.0)\nManages subprojects of the meson project.\nRun tests for the configure meson project.\nSee the unit test documentation for more info.\nRun tests for the project:\nRun only specific_test_1 and specific_test_2:\nAn utility to manage WrapDB dependencies.\nSee the WrapDB tool documentation for more info.\n\n\nNAME: name of the target from meson.build (e.g. foo from executable('foo', ...)).\n\nPATH: path to the target relative to the root meson.build file. Note: relative path for a target specified in the root meson.build is ./.\n\nTYPE: type of the target. Can be one of the following: 'executable', 'static_library', 'shared_library', 'shared_module', 'custom', 'run', 'jar'.\n\n"});