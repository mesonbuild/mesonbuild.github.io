fragment_downloaded_cb({"url":"Reference-manual_functions.html#arguments13","fragment":"Arguments\nThe function configure_file()\naccepts the following keyword arguments:\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        capture\n        bool\n        \n        \nWhen this argument is set to true,\nMeson captures stdout of the command and writes it to the target\nfile specified as output.\n  \n        \n\n  (since 0.41.0)\n  default =\n  false\n  \n  \n      \n      \n        command\n        \narray[str | file]\n        \n        \nAs explained above, if specified, Meson does not create\nthe file itself but rather runs the specified command, which allows\nyou to do fully custom file generation. (since 0.52.0) The command can contain\nfile objects and more than one file can be passed to the input keyword\nargument, see custom_target() for details about string\nsubstitutions.\n  \n        \n\n  \n  \n      \n      \n        configuration\n        \ncfg_data | dict[str | int | bool]\n        \n        \nAs explained above, when passed this will provide the replacement\ndata for the input file (if provided) or key value pairs to be\nwritten to the output.\n  \n        \n\n  \n  \n      \n      \n        copy\n        bool\n        \n        \nAs explained above, if specified Meson only\ncopies the file from input to output.\n  \n        \n\n  (since 0.47.0)\n  default =\n  false\n  \n  \n      \n      \n        depfile\n        str\n        \n        \nA dependency file that the command can write listing\nall the additional files this target depends on. A change\nin any one of these files triggers a reconfiguration.\n  \n        \n\n  (since 0.52.0)\n  \n  \n      \n      \n        encoding\n        str\n        \n        \nSet the file encoding for the input and output file.\nThe supported encodings are those of python3, see\nstandard-encodings.\n  \n        \n\n  (since 0.47.0)\n  default =\n  'utf-8'\n  \n  \n      \n      \n        format\n        str\n        \n        \nThe format of defines. It defaults to 'meson', and so substitutes\n#mesondefine statements and variables surrounded by @ characters, you can also use 'cmake'\nto replace #cmakedefine statements and variables with the ${variable} syntax. Finally you can use\n'cmake@' in which case substitutions will apply on #cmakedefine statements and variables with\nthe @variable@ syntax.\n  \n        \n\n  (since 0.46.0)\n  default =\n  'meson'\n  \n  \n      \n      \n        input\n        \nstr | file\n\n        \n        \nThe input file name. If it's not specified in configuration\nmode, all the variables in the configuration: object (see above)\nare written to the output: file.\n  \n        \n\n  \n  \n      \n      \n        install\n        bool\n        \n        \nWhen true, this generated file is installed during\nthe install step, and install_dir must be set and not empty. When false, this\ngenerated file is not installed regardless of the value of install_dir.\nWhen omitted it defaults to true when install_dir is set and not empty,\nfalse otherwise.\n  \n        \n\n  (since 0.50.0)\n  default =\n  false\n  \n  \n      \n      \n        install_dir\n        str\n        \n        \nThe subdirectory to install the generated file to\n(e.g. share/myproject), if omitted or given the value of empty\nstring, the file is not installed.\n  \n        \n\n  \n  \n      \n      \n        install_mode\n        \narray[str | int]\n        \n        \nSpecify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\nSee the install_mode kwarg of install_data() for more information.\n  \n        \n\n  (since 0.47.0)\n  \n  \n      \n      \n        install_tag\n        str\n        \n        \nA string used by the meson install --tags command\nto install only a subset of the files. By default the file has no install\ntag which means it is not being installed when --tags argument is specified.\n  \n        \n\n  (since 0.60.0)\n  \n  \n      \n      \n        macro_name\n        str\n        \n        \nWhen specified, macro guards will be used instead of '#pragma once'. The\nmacro guard name will be the specified name.\n  \n        \n\n  (since 1.3.0)\n  \n  \n      \n      \n        output\n        str\n        \n        \nThe output file name. (since 0.41.0) may contain\n@PLAINNAME@ or @BASENAME@ substitutions, as well as (since 1.5.0)\ntheir indexed versions, like @PLAINNAME0@ or @BASENAME0@.\nIn configuration mode,\nthe permissions of the input file (if it is specified) are copied to\nthe output file.\n  \n        \n\n  \n  \n      \n      \n        output_format\n        str\n        \n        \nThe format of the output to generate when no input\nwas specified. It defaults to c, in which case preprocessor directives\nwill be prefixed with #, you can also use nasm, in which case the\nprefix will be %. (since 1.3.0) json format can also be used.\n  \n        \n\n  (since 0.47.0)\n  \n  \n      \n    \n  \n"});