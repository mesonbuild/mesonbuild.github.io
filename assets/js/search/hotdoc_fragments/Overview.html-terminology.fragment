fragment_downloaded_cb({"url":"Overview.html#terminology","fragment":"Terminology\nMeson follows the overall structure of other popular build systems,\nsuch as CMake and GNU Autotools. This means that the build is divided\ninto two discrete steps: configure step and build step. The first\nstep inspects the system, checks for dependencies and does all other\nsteps necessary to configure the build. It then generates the actual\nbuild system. The second step is simply executing this generated build\nsystem. The end result is a bunch of build targets, which are\nusually executables and shared and static libraries.\nThe directory that contains the source code is called the source\ndirectory. Correspondingly the directory where the output is written\nis called the build directory. In other build systems it is common\nto have these two be the same directory. This is called an in-source\nbuild. The case where the build directory is separate is called an\nout-of-source build.\nWhat sets Meson apart from most build systems is that it enforces a\nseparate build directory. All files created by the build system are\nput in the build directory. It is actually impossible to do an\nin-source build. For people used to building inside their source tree,\nthis may seem like a needless complication. However there are several\nbenefits to doing only out-of-source builds. These will be explained\nin the next chapter.\nWhen the source code is built, a set of unit tests is usually\nrun. They ensure that the program is working as it should. If it does,\nthe build result can be installed after which it is ready for use.\n"});