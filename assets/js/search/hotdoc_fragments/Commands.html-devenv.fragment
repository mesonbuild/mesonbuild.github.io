fragment_downloaded_cb({"url":"Commands.html#devenv","fragment":"devenv\n(since 0.58.0)\nRuns a command, or open interactive shell if no command is provided, with\nenvironment setup to run project from the build directory, without installation.\nWe automatically handle bash and set $PS1 accordingly. If the automatic $PS1\noverride is not desired (maybe you have a fancy custom prompt), set the\n$MESON_DISABLE_PS1_OVERRIDE environment variable and use $MESON_PROJECT_NAME\nwhen setting the custom prompt, for example with a snippet like the following:\nThese variables are set in environment in addition to those set using meson.add_devenv():\nSince 0.62.0 if bash-completion scripts are being installed and the\nshell is bash, they will be automatically sourced.\nSince 0.62.0 when GDB helper scripts (*-gdb.py, *-gdb.gdb, and *-gdb.csm)\nare installed with a library name that matches one being built, Meson adds the\nneeded auto-load commands into <builddir>/.gdbinit file. When running gdb from\ntop build directory, that file is loaded by gdb automatically. In the case of\npython scripts that needs to load other python modules, PYTHONPATH may need\nto be modified using meson.add_devenv().\nSince 0.63.0 when cross compiling for Windows WINEPATH is used instead\nof PATH which allows running Windows executables using wine. Note that since\nWINEPATH size is currently limited to 1024 characters, paths relative to the\nroot of build directory are used. That means current workdir must be the root of\nbuild directory when running wine.\nSince 1.1.0 meson devenv --dump [<filename>] command takes an optional\nfilename argument to write the environment into a file instead of printing to\nstdout.\nSince 1.1.0 --dump-format argument has been added to select which shell\nformat should be used. There are currently 3 formats supported:\n\n\nMESON_DEVENV is defined to '1'.\n\nMESON_PROJECT_NAME is defined to the main project's name.\n\nPKG_CONFIG_PATH includes the directory where Meson generates -uninstalled.pc\nfiles.\n\nPATH includes every directory where there is an executable that would be\ninstalled into bindir. On windows it also includes every directory where there\nis a DLL needed to run those executables.\n\nLD_LIBRARY_PATH includes every directory where there is a shared library that\nwould be installed into libdir. This allows to run system application using\ncustom build of some libraries. For example running system GEdit when building\nGTK from git. On OSX the environment variable is DYLD_LIBRARY_PATH and\nPATH on Windows.\n\nGI_TYPELIB_PATH includes every directory where a GObject Introspection\ntypelib is built. This is automatically set when using gnome.generate_gir().\n\nGSETTINGS_SCHEMA_DIR Since 0.59.0 includes every directory where a GSettings\nschemas is compiled. This is automatically set when using gnome.compile_schemas().\nNote that this requires GLib >= 2.64 when gnome.compile_schemas() is used in\nmore than one directory.\n\nQEMU_LD_PREFIX Since 1.0.0 is set to the sys_root value from cross file\nwhen cross compiling and that property is defined.\n\n\n\nsh: Lines are in the format VAR=/prepend:$VAR:/append.\n\nexport: Same as sh but with extra export VAR lines.\n\nvscode: Same as sh but without $VAR substitution because they do not\nseems to be properly supported by vscode.\n\n"});