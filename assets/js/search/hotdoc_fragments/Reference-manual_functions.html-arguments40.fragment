fragment_downloaded_cb({"url":"Reference-manual_functions.html#arguments40","fragment":"Arguments\nThe function project() accepts the following positional arguments:\nThe name of the project.\n\nAdditionally, the\nfunction accepts between 0 and infinity variadic\narguments (language...) of type str.\nThe languages that Meson should initialize.\n\nFinally, project()\naccepts the following keyword arguments:\nAccepts strings in the form key=value\nwhich have the same format as options to meson configure.\nFor example to set the default project type you would\nset this: default_options : ['buildtype=debugoptimized']. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as buildtype can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\nNote that some options can override the default behavior;\nfor example, using c_args here means that the CFLAGS\nenvironment variable is not used. Consider using\n[add_project_arguments()] instead.\nTakes a string or array of strings describing the license(s) the code is under.\nThis should be an SPDX license expression,\nusing the standardized license identifier from the SPDX license\nlist.  Usually this would be something like\nlicense : 'GPL-2.0-or-later'. If there are multiple licenses you can use the\nAND and OR operators to join them: license : 'Apache-2.0 OR GPL-2.0'.\nFor backwards compatibility reasons you can also pass an array of\nlicenses here. This is not recommended, as it is ambiguous: license : ['Apache-2.0', 'GPL-2.0-only'] instead use an SPDX expression: license : 'Apache-2.0 OR GPL-2.0-only', which makes it clear that the license\nmean OR, not AND.\nNote that the text is informal and is only written to the dependency\nmanifest. Meson does not do any license validation, you are responsible\nfor verifying that you abide by all licensing terms. You can access the\nvalue in your Meson build files with meson.project_license().\nTakes a string or array of strings with the paths to the license file(s)\nthe code is under.\nThis enhances the value of the license kwarg by allowing to specify both\nthe short license name and the full license text. Usually this would be\nsomething like license_files: ['COPYING'].\nNote that the files are informal and are only installed with the dependency\nmanifest. Meson does not do any license validation, you are responsible\nfor verifying that you abide by all licensing terms. You can access the\nvalue in your Meson build files with meson.project_license_files().\n(since 1.1.0)\nTakes a string describing which Meson version the project requires.\nUsually something like >=0.28.0.\nSpecifies the top level directory name that holds Meson subprojects.\nThis is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\ndefault =\n  'subprojects'\nA free form string describing the version of this project.\nYou can access the value in your Meson build files\nwith meson.project_version(). (Since 0.57.0) this can also be a\nfile object pointing to a file that contains exactly one line of\ntext.\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        project_name\n        str\n        \n        \nThe name of the project.\n  \n        \n\n  \n  \n      \n    \n  \n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        default_options\n        \nlist[str]\n        \n        \nAccepts strings in the form key=value\nwhich have the same format as options to meson configure.\nFor example to set the default project type you would\nset this: default_options : ['buildtype=debugoptimized']. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as buildtype can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\nNote that some options can override the default behavior;\nfor example, using c_args here means that the CFLAGS\nenvironment variable is not used. Consider using\n[add_project_arguments()] instead.\n  \n        \n\n  \n  \n      \n      \n        license\n        \nstr | list[str]\n        \n        \nTakes a string or array of strings describing the license(s) the code is under.\nThis should be an SPDX license expression,\nusing the standardized license identifier from the SPDX license\nlist.  Usually this would be something like\nlicense : 'GPL-2.0-or-later'. If there are multiple licenses you can use the\nAND and OR operators to join them: license : 'Apache-2.0 OR GPL-2.0'.\nFor backwards compatibility reasons you can also pass an array of\nlicenses here. This is not recommended, as it is ambiguous: license : ['Apache-2.0', 'GPL-2.0-only'] instead use an SPDX expression: license : 'Apache-2.0 OR GPL-2.0-only', which makes it clear that the license\nmean OR, not AND.\nNote that the text is informal and is only written to the dependency\nmanifest. Meson does not do any license validation, you are responsible\nfor verifying that you abide by all licensing terms. You can access the\nvalue in your Meson build files with meson.project_license().\n  \n        \n\n  \n  \n      \n      \n        license_files\n        \nstr | list[str]\n        \n        \nTakes a string or array of strings with the paths to the license file(s)\nthe code is under.\nThis enhances the value of the license kwarg by allowing to specify both\nthe short license name and the full license text. Usually this would be\nsomething like license_files: ['COPYING'].\nNote that the files are informal and are only installed with the dependency\nmanifest. Meson does not do any license validation, you are responsible\nfor verifying that you abide by all licensing terms. You can access the\nvalue in your Meson build files with meson.project_license_files().\n  \n        \n\n  (since 1.1.0)\n  \n  \n      \n      \n        meson_version\n        str\n        \n        \nTakes a string describing which Meson version the project requires.\nUsually something like >=0.28.0.\n  \n        \n\n  \n  \n      \n      \n        subproject_dir\n        str\n        \n        \nSpecifies the top level directory name that holds Meson subprojects.\nThis is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\n  \n        \n\n  default =\n  'subprojects'\n  \n  \n      \n      \n        version\n        \nstr | file\n\n        \n        \nA free form string describing the version of this project.\nYou can access the value in your Meson build files\nwith meson.project_version(). (Since 0.57.0) this can also be a\nfile object pointing to a file that contains exactly one line of\ntext.\n  \n        \n\n  \n  \n      \n    \n  \n"});