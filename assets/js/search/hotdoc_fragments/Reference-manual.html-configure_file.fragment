fragment_downloaded_cb({"url":"Reference-manual.html#configure_file","fragment":"configure_file()\nThis function can run in three modes depending on the keyword arguments\npassed to it.\nWhen a configuration_data() object is passed\nto the configuration: keyword argument, it takes a template file as\nthe input: (optional) and produces the output: (required) by\nsubstituting values from the configuration data as detailed in the\nconfiguration file documentation. (since 0.49.0)\nA dictionary can be passed instead of a\nconfiguration_data() object.\nWhen a list of strings is passed to the command: keyword argument,\nit takes any source or configured file as the input: and assumes\nthat the output: is produced when the specified command is run.\n(since 0.47.0) When the copy: keyword argument is set to true,\nthis function will copy the file provided in input: to a file in the\nbuild directory with the name output: in the current directory.\nThese are all the supported keyword arguments:\n\n\ncapture (since 0.41.0): when this argument is set to true,\nMeson captures stdout of the command and writes it to the target\nfile specified as output.\n\ncommand: as explained above, if specified, Meson does not create\nthe file itself but rather runs the specified command, which allows\nyou to do fully custom file generation. (since 0.52.0) The command can contain\nfile objects and more than one file can be passed to the input keyword\nargument, see custom_target() for details about string\nsubstitutions.\n\ncopy (since 0.47.0): as explained above, if specified Meson only\ncopies the file from input to output.\n\ndepfile (since 0.52.0): a dependency file that the command can write listing\nall the additional files this target depends on. A change\nin any one of these files triggers a reconfiguration.\n\nformat (since 0.46.0): the format of defines. It defaults to meson, and so substitutes\n#mesondefine statements and variables surrounded by @ characters, you can also use cmake\nto replace #cmakedefine statements and variables with the ${variable} syntax. Finally you can use\ncmake@ in which case substitutions will apply on #cmakedefine statements and variables with\nthe @variable@ syntax.\n\ninput: the input file name. If it's not specified in configuration\nmode, all the variables in the configuration: object (see above)\nare written to the output: file.\n\ninstall (since 0.50.0): when true, this generated file is installed during\nthe install step, and install_dir must be set and not empty. When false, this\ngenerated file is not installed regardless of the value of install_dir.\nWhen omitted it defaults to true when install_dir is set and not empty,\nfalse otherwise.\n\ninstall_dir: the subdirectory to install the generated file to\n(e.g. share/myproject), if omitted or given the value of empty\nstring, the file is not installed.\n\ninstall_mode (since 0.47.0): specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\ninstall_tag (since 0.60.0): A string used by meson install --tags command\nto install only a subset of the files. By default the file has no install\ntag which means it is not being installed when --tags argument is specified.\n\noutput: the output file name. (since 0.41.0) may contain\n@PLAINNAME@ or @BASENAME@ substitutions. In configuration mode,\nthe permissions of the input file (if it is specified) are copied to\nthe output file.\n\noutput_format (since 0.47.0): the format of the output to generate when no input\nwas specified. It defaults to c, in which case preprocessor directives\nwill be prefixed with #, you can also use nasm, in which case the\nprefix will be %.\n\nencoding (since 0.47.0): set the file encoding for the input and output file,\ndefaults to utf-8. The supported encodings are those of python3, see\nstandard-encodings.\n\n"});