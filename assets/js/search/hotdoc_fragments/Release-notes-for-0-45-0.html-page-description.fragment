fragment_downloaded_cb({"url":"Release-notes-for-0-45-0.html#page-description","fragment":"Meson will from this version on require Python version 3.5 or newer.\nTools like LLVM and pcap use a config tool for dependencies, this is a\nscript or binary that is run to get configuration information (cflags,\nldflags, etc) from.\nThese binaries may now be specified in the binaries section of a\ncross file.\nIn addition to the Mono C# compiler we also support Visual Studio's C#\ncompiler. Currently this is only supported on the Ninja backend.\nThe standalone find_library function has been a no-op for a long\ntime. Starting with this version it becomes a hard error.\nThere used to be a keywordless version of run_target which looked\nlike this:\nThis is now an error. The correct format for this is now:\nThis version adds support for generating, analysing and uploading FPGA\nprograms using the IceStorm\ntoolchain. This support is\nexperimental and is currently limited to the iCE 40 series of FPGA\nchips.\nFPGA generation integrates with other parts of Meson seamlessly. As an\nexample, here is an example\nproject that compiles a simple firmware into Verilog and combines that\nwith an lm32 softcore processor.\nNormally when generating files with a generator, Meson flattens the\ninput files so they all go in the same directory. Some code\ngenerators, such as Protocol Buffers, require that the generated files\nhave the same directory layout as the input files used to generate\nthem. This can now be achieved like this:\nThis would cause the following files to be generated inside the target\nprivate directory:\nHexadecimal integer literals can now be used in build and option files.\nThe value if-release can be given for the b_ndebug project option.\nThis will make the NDEBUG pre-compiler macro to be defined for\nrelease type builds as if the b_ndebug project option had had the\nvalue true defined for it.\nIf install_data() is not given an install_dir keyword argument, the\ntarget directory defaults to {datadir}/{projectname} (e.g.\n/usr/share/myproj).\nIf strip_directory=true install_subdir() installs directory contents\ninstead of directory itself, stripping basename of the source directory.\nThere is a new integer option type with optional minimum and maximum\nvalues. It can be specified like this in the meson_options.txt file:\nThe meson builtin object now has a project_license() method that\nreturns a list of all licenses for the project.\nCross-compilation is now supported for Rust targets. Like other\ncross-compilers, the Rust binary must be specified in your cross file.\nIt should specify a --target (as installed by rustup target) and a\ncustom linker pointing to your C cross-compiler. For example:\nWhen building a Rust target with Rust library dependencies, an\n--extern argument is now specified to avoid ambiguity between the\ndependency library, and any crates of the same name in rustc's\nprivate sysroot.\nMeson ships with predefined project templates. To start a new project\nfrom scratch, simply go to an empty directory and type:\nTest setups are now identified (also) by the project they belong to\nand it is possible to select the used test setup from a specific\nproject. E.g.  to use a test setup some_setup from project\nsome_project for all executed tests one can use\nShould one rather want test setups to be used from the same project as\nwhere the current test itself has been defined, one can use just\nIn the latter case every (sub)project must have a test setup some_setup\ndefined in it.\nThe compile_resources() function of the windows module can now be\nused on custom targets as well as regular files.\nThe promote command makes it easy to copy nested dependencies to the\ntop level.\nThis will search the project tree for a subproject called scommon\nand copy it to the top level.\nIf there are many embedded subprojects with the same name, you have to\nspecify which one to promote manually like this:\nNormally project options are specific to the current project. However\nsometimes you want to have an option whose value is the same over all\nprojects. This can be achieved with the new yield keyword for\noptions. When set to true, getting the value of this option in\nmeson.build files gets the value from the option with the same name\nin the master project (if such an option exists).\n"});