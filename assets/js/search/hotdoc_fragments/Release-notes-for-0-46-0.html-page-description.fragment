fragment_downloaded_cb({"url":"Release-notes-for-0-46-0.html#page-description","fragment":"Added the function subdir_done(). Its invocation exits the current\nscript at the point of invocation. All previously invoked build\ntargets and commands are build/executed. All following ones are\nignored. If the current script was invoked via subdir() the parent\nscript continues normally.\nThe format of some human-readable diagnostic messages has changed in\nminor ways. In case you are parsing these messages, you may need to\nadjust your code.\nCross-compilation is now supported for ARM targets using ARM compiler\nA new function both_libraries() has been added to build both shared\nand static libraries at the same time. Source files will be compiled\nonly once and object files will be reused to build both shared and\nstatic libraries, unless b_staticpic user option or pic: keyword\nargument are set to false in which case sources will be compiled\ntwice.\nThe returned buildtarget object always represents the shared library.\nThis can be used to run the current compiler with the specified\narguments to obtain additional information from it. One of the use\ncases is to get the location of development files for the GCC plugins:\ndeclare_dependency() now supports the link_whole: keyword argument which\ntransparently works for build targets which use that dependency.\nThe old executable names mesonintrospect, mesonconf,\nmesonrewriter and mesontest have been deprecated for a long time.\nStarting from this version they no longer do anything but instead\nalways error out. All functionality is available as subcommands in the\nmain meson binary.\nPreviously meson required that builtin arguments (like prefix) be\npassed as --prefix to meson and -Dprefix to meson configure.\nmeson now accepts -D form like meson configure has. meson configure also accepts the --prefix form, like meson has.\nThe recursive: keyword argument has been added to\nextract_all_objects(). When set to true it will also return\nobjects passed to the objects: argument of this target. By default\nonly objects built for this target are returned to maintain backward\ncompatibility with previous versions. The default will eventually be\nchanged to true in a future version.\nIt is now possible to override the result of find_program to point\nto a custom program you want. The overriding is global and applies to\nevery subproject from there on. Here is how you would use it.\nIn master project\nIn the called subproject:\nIn master project (or, in fact, any subproject):\nNow genprog points to the custom script. If the dependency had come\nfrom the system, then it would point to the system version.\nYou can also use the return value of configure_file() to override\na program in the same way as above:\nA new set of methods has been added to compiler\nobjects to test if the linker\nsupports given arguments.\nCommand line parsing is now less surprising. \"meson help\" is now\nequivalent to \"meson --help\" and \"meson help \" is\nequivalent to \"meson  --help\", instead of creating a build\ndirectory called \"help\" in these cases.\nA feature to generate a meson.build file compiling given C/C++ source\nfiles into a single executable has been added to \"meson init\". By\ndefault, it will take all recognizable source files in the current\ndirectory. You can also specify a list of dependencies with the -d\nflag and automatically invoke a build with the -b flag to check if the\ncode builds with those dependencies.\nFor example,\nwill look for C or C++ files in the current directory, generate a\nmeson.build for them with the dependencies of sdl2 and gl and\nimmediately try to build it, overwriting any previous meson.build and\nbuild directory.\nThe rename: keyword argument is used to change names of the installed\nfiles. Here's how you install and rename the following files:\nIn this version, a support for lcc compiler for Elbrus processors\nbased on e2k\nmicroarchitecture has been\nadded.\nExamples of such CPUs:\nSuch compiler have a similar behavior as gcc (basic option compatibility),\nbut, in is not strictly compatible with gcc as of current version.\nMajor differences as of version 1.21.22:\nSo every noted difference is properly handled now in meson.\nSingle-quoted strings in meson have been taught the same set of escape\nsequences as in Python. It is therefore now possible to use arbitrary\nbytes in strings, like for example NUL (\\0) and other ASCII\ncontrol characters. See the chapter about Strings in\nSyntax for more details.\nPotential backwards compatibility issue: Any valid escape sequence\naccording to the new rules will be interpreted as an escape sequence\ninstead of the literal characters. Previously only the following\nescape sequences were supported in single-quote strings: \\', \\\\\nand \\n.\nNote that the behaviour of triple-quoted (multiline) strings has not\nchanged. They behave like raw strings and do not support any escape\nsequences.\nA new wrap mode was added, --wrap-mode=forcefallback. When this is\nset, dependencies for which a fallback was provided will always use\nit, even if an external dependency exists and satisfies the version\nrequirements.\nIn earlier versions of Meson you could only have one target of a given\nname for each type. For example you could not have two executables\nnamed foo. This requirement is now relaxed so that you can have\nmultiple targets with the same name, as long as they are in different\nsubdirectories.\nNote that projects that have multiple targets with the same name can\nnot be built with the flat layout or any backend that writes outputs\nin the same directory.\nAn OpenMP dependency (openmp) has been added that encapsulates the\nvarious flags used by compilers to enable OpenMP and checks for the\nexistence of the omp.h header. The language keyword may be passed\nto force the use of a specific compiler for the checks.\nIt is now possible to use only part of a dependency in a target. This\nallows, for example, to only use headers with convenience libraries to\navoid linking to the same library multiple times.\nA partial dependency will have the same name version as the full\ndependency it is derived from, as well as any values requested.\nPreviously pkg-config files generated by the pkgconfig modules for\nstatic libraries with dependencies could only be used in a\ndependencies with static: true.\nNow the generated file contains the needed dependencies libraries\ndirectly within Requires and Libs for build static libraries\npassed via the libraries keyword argument.\nProjects that install both a static and a shared version of a library\nshould use the result of\nboth_libraries() to the\npkg-config file generator or use\nconfigure_file() for more\ncomplicated setups.\nA StaticLibrary or SharedLibrary object can optionally be passed\nas first positional argument of the generate() method. If one is provided a\ndefault value will be provided for all required fields of the pc file:\nGenerating a .pc file is now as simple as:\npkgconfig.generate() requires: and requires_private: keyword\narguments now accept pkgconfig-dependencies and libraries that\npkgconfig-files were generated for.\nMeson now has is a revamped and generic (python 2 and 3) version of\nthe python3 module. With this new interface,\nprojects can now fully specify the version of python they want to\nbuild against / install sources to, and can do so against multiple\nmajor or minor versions in parallel.\nBuild targets and custom targets can be listed in the depends:\nkeyword argument of test function. These targets will be built before\ntest is run even if they have build_by_default : false.\n\nARMCC. The current implementation does not support shareable\nlibraries. The default extension of the output is .axf. The\nenvironment path should be set properly for the ARM compiler\nexecutables. The '--cpu' option with the appropriate target type\nshould be mentioned in the cross file as shown in the snippet below.\n\n\nhas_link_argument()\nhas_multi_link_arguments()\nget_supported_link_arguments()\nfirst_supported_link_argument()\n\n\n\nfile1.txt into share/myapp/dir1/data.txt\n\n\nfile2.txt into share/myapp/dir2/data.txt\n\n\n\n\nElbrus-8S;\nElbrus-4S;\n\nElbrus-2S+.\n\n\nit does not support LTO and PCH;\nit suffers from the same dependency file creation error as icc;\nit has minor differences in output, especially version output;\nit differently reacts to lchmod() detection;\nsome backend messages are produced in ru_RU.KOI8-R even if LANG=C;\nits preprocessor treats some characters differently.\n\n\n\ninstall_dir is set to pkgconfig folder in the same location than the provided library.\n\ndescription is set to the project's name followed by the library's name.\n\nname is set to the library's name.\n\n"});