fragment_downloaded_cb({"url":"Style-guide.html#page-description","fragment":"This page lists some recommendations on organizing and formatting your\nMeson build files.\nAlways spaces.\nSnake case (stylized as snake_case) refers to the style of writing in which\neach space is replaced by an underscore (_) character, and the first letter of\neach word written in lowercase. It is the most common naming convention used\nin Meson build scripts as identifiers for variable.\nLet say you would like to refer to your executable so something like my_exe.\nThe dependency function is the recommended way to handle dependencies. If your wrap files\nhave the necessary [provide] entries, everything will work automatically both when\ncompiling your own and when using system dependencies.\nYou should only need subproject when you need to extract non dependencies/programs.\nThere are two ways of naming project options. As an example for\nbooleans the first one is foo and the second one is\nenable-foo. The former style is recommended, because in Meson\noptions have strong type, rather than being just strings.\nYou should try to name options the same as is common in other\nprojects. This is especially important for yielding options, because\nthey require that both the parent and subproject options have the same\nname.\nPrefer add_project_arguments to add_global_arguments because using\nthe latter prevents using the project as a subproject.\nTry to keep cross compilation arguments away from your build files as\nmuch as possible. Keep them in the cross file instead. This adds\nportability, since all changes needed to compile to a different\nplatform are isolated in one place.\nThe source file arrays should all be sorted. This makes it easier to spot\nerrors and often reduces merge conflicts. Furthermore, the paths should be\nsorted with a natural sorting algorithm, so that numbers are sorted in an\nintuitive way (1, 2, 3, 10, 20 instead of 1, 10, 2, 20, 3).\nNumbers should also be sorted before characters (a111 before ab0).\nFurthermore, strings should be sorted case insensitive.\nAdditionally, if a path contains a directory it should be sorted before\nnormal files. This rule also applies recursively for subdirectories.\nThe following example shows correct source list definition:\n"});