fragment_downloaded_cb({"url":"Vala.html#page-description","fragment":"Meson supports compiling applications and libraries written in\nVala and\nGenie . A skeleton meson.build file:\nYou must always specify the glib-2.0 and gobject-2.0 libraries as\ndependencies, because all current Vala applications use them.\nGLib is used for basic data types\nand GObject is used for the\nruntime type system.\nMeson uses the dependency() function to find\nthe relevant VAPI, C headers and linker flags when it encounters a Vala source\nfile in a build target. Vala needs a VAPI file and a C header or headers to use\na library. The VAPI file helps map Vala code to the library's C programming\ninterface. It is the\npkg-config tool that\nmakes finding these installed files all work seamlessly behind the scenes. When\na pkg-config file doesn't exist for the library then the\nfind_library() method of the compiler\nobject needs to be used. Examples are\ngiven later.\nNote Vala uses libraries that follow the C Application Binary Interface (C ABI).\nThe library, however, could be written in C, Vala, Rust, Go, C++ or any other\nlanguage that can generate a binary compatible with the C ABI and so provides C\nheaders.\nThis first example is a simple addition to the meson.build file because:\nEverything works seamlessly in the background and only a single extra line is\nneeded:\nGTK+ is the graphical toolkit used by GNOME, elementary OS and other desktop\nenvironments. The binding to the library, the VAPI file, is distributed with\nVala.\nOther libraries may have a VAPI that is distributed with the library itself.\nSuch libraries will have their VAPI file installed along with their other\ndevelopment files. The VAPI is installed in Vala's standard search path and so\nworks just as seamlessly using the dependency() function.\nMeson's dependency() function allows a\nversion check of a library. This is often used to check a minimum version is\ninstalled. When setting a minimum version of GLib, Meson will also pass this to\nthe Vala compiler using the --target-glib option.\nThis is needed when using GTK+'s user interface definition files with Vala's\n[GtkTemplate], [GtkChild] and [GtkCallback] attributes. This requires\n--target-glib 2.38, or a newer version, to be passed to Vala. With Meson this\nis simply done with:\nUsing [GtkTemplate] also requires the GTK+ user interface definition files to\nbe built in to the binary as GResources. For completeness, the next example\nshows this:\nSo far we have covered the cases where the VAPI file is either distributed with\nVala or the library. A VAPI can also be included in the source files of your\nproject. The convention is to put it in the vapi directory of your project.\nThis is needed when a library does not have a VAPI or your project needs to link\nto another component in the project that uses the C ABI. For example if part of\nthe project is written in C.\nThe Vala compiler's --vapidir option is used to add the project directory to\nthe VAPI search path. In Meson this is done with the add_project_arguments()\nfunction:\nIf the VAPI is for an external library then make sure that the VAPI name\ncorresponds to the pkg-config file name.\nThe vala-extra-vapis repository\nis a community maintained repository of VAPIs that are not distributed.\nDevelopers use the repository to share early work on new bindings and\nimprovements to existing bindings. So the VAPIs can frequently change. It is\nrecommended VAPIs from this repository are copied in to your project's source\nfiles.\nThis also works well for starting to write new bindings before they are shared\nwith the vala-extra-vapis repository.\nA library that does not have a corresponding pkg-config file may mean\ndependency() is unsuitable for finding the C and Vala interface files. In this\ncase it is necessary to use the find_library() method of the compiler object.\nThe first example uses Vala's POSIX binding. There is no pkg-config file because\nPOSIX includes the standard C library on Unix systems. All that is needed is the\nVAPI file, posix.vapi. This is included with Vala and installed in Vala's\nstandard search path. Meson just needs to be told to only find the library for\nthe Vala compiler:\nThe next example shows how to link with a C library where no additional VAPI is\nneeded. The standard maths functions are already bound in glib-2.0.vapi, but\nthe GNU C library requires linking to the maths library separately. In this\nexample Meson is told to find the library only for the C compiler:\nThe required: false means the build will continue when using another C library\nthat does not separate the maths library. See Add math library (-lm)\nportably.\nThe final example shows how to use a library that does not have a pkg-config\nfile and the VAPI is in the vapi directory of your project source files:\nThe find_library() method of the C compiler object will try to find the C\nheader files and the library to link with.\nThe find_library() method of the Vala compiler object needs to have the dir\nkeyword added to include the project VAPI directory. This is not added\nautomatically by add_project_arguments().\nPassing arguments to Vala's preprocessor requires specifying the language as vala.  For example, the following statement sets the preprocessor symbol USE_FUSE:\nIf you need to pass an argument to the C pre-processor then specify the language as c. For example to set FUSE_USE_VERSION to 26 use:\nMeson's library target automatically outputs\nthe C header and the VAPI. They can be renamed by setting the vala_header and\nvala_vapi arguments respectively:\nIn this example, the second and third elements of the install_dir array\nindicate the destination with true to use default directories (i.e. include\nand share/vala/vapi).\nA 'binding' allows another programming language to use a library written in\nVala. Because Vala uses the GObject type system as its runtime type system it is\nvery easy to use introspection to generate a binding. A Meson build of a Vala\nlibrary can generate the GObject introspection metadata. The metadata is then\nused in separate projects with language specific\ntools to generate\na binding.\nThe main form of metadata is a GObject Introspection Repository (GIR) XML file.\nGIRs are mostly used by languages that generate bindings at compile time.\nLanguages that generate bindings at runtime mostly use a typelib file, which is\ngenerated from the GIR.\nMeson can generate a GIR as part of the build.  For a Vala library the\nvala_gir option has to be set for the library:\nThe true value in install_dir tells Meson to use the default directory (i.e.\nshare/gir-1.0 for GIRs). The fourth element in the install_dir array\nindicates where the GIR file will be installed.\nTo then generate a typelib file use a custom target with the g-ir-compiler\nprogram and a dependency on the library:\n\nthe library has a pkg-config file, gtk+-3.0.pc\n\nthe VAPI is distributed with Vala and so installed with the Vala compiler\nthe VAPI is installed in Vala's standard search path\nthe VAPI, gtk+-3.0.vapi, has the same name as the pkg-config file\n\n"});