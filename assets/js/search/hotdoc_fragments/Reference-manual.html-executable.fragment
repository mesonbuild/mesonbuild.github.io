fragment_downloaded_cb({"url":"Reference-manual.html#executable","fragment":"executable()\nCreates a new executable. The first argument specifies its name and\nthe remaining positional arguments define the input files to use. They\ncan be of the following types:\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (.c, .cpp,\n.vala, .rs, etc) will be compiled and objects (.o, .obj) and\nlibraries (.so, .dll, etc) will be linked.\nWith the Ninja backend, Meson will create a build-time order-only\ndependency on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\ndepfile generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\nExecutable supports the following keyword arguments. Note that just\nlike the positional arguments above, these keyword arguments can also\nbe passed to shared and static libraries.\nThe list of sources, objects, and dependencies is always\nflattened, which means you can freely nest and add lists while\ncreating the final list.\nThe returned object also has methods that are documented in the\nobject methods section below.\n\nStrings relative to the current source directory\n\nfiles() objects defined in any preceding build file\nThe return value of configure-time generators such as configure_file()\n\nThe return value of build-time generators such as\ncustom_target() or\ngenerator.process()\n\n\n\n\n<languagename>_pch: precompiled header file to use for the given language\n\n<languagename>_args: compiler flags to use for the given language;\neg: cpp_args for C++\n\nbuild_by_default (since 0.38.0): causes, when set to true, to\nhave this target be built by default. This means it will be built when\nmeson compile is called without any arguments. The default value is\ntrue for all built target types.\n\nbuild_rpath: a string to add to target's rpath definition in the\nbuild dir, but which will be removed on install\n\ndependencies: one or more objects created with\ndependency or find_library\n(for external deps) or declare_dependency\n(for deps built by the project)\n\nextra_files: not used for the build itself but are shown as\nsource files in IDEs that group files by targets (such as Visual\nStudio)\n\ngui_app: when set to true flags this target as a GUI application\non platforms where this makes a differerence, deprecated since\n0.56.0, use win_subsystem instead.\n\nlink_args: flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n\nlink_depends: strings, files, or custom targets the link step\ndepends on such as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n\nlink_language (since 0.51.0) (broken until 0.55.0): makes the linker for this\ntarget be for the specified language. It is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\nlink_whole (since 0.40.0): links all contents of the given static libraries\nwhether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.\n(since 0.41.0) If passed a list that list will be flattened.\n(since 0.51.0) This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n\nlink_with: one or more shared or static libraries (built by this\nproject) that this target should be linked with. (since 0.41.0) If passed a\nlist this list will be flattened. (since 0.51.0) The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n\nexport_dynamic (since 0.45.0): when set to true causes the target's symbols to be\ndynamically exported, allowing modules built using the\nshared_module function to refer to functions,\nvariables and other symbols defined in the executable itself. Implies\nthe implib argument.\n\nimplib (since 0.42.0): when set to true, an import library is generated for the\nexecutable (the name of the import library is based on exe_name).\nAlternatively, when set to a string, that gives the base name for\nthe import library.  The import library is used when the returned\nbuild target object appears in link_with: elsewhere.  Only has any\neffect on platforms where that is meaningful (e.g. Windows). Implies\nthe export_dynamic argument.\n\nimplicit_include_directories (since 0.42.0): a boolean telling whether Meson\nadds the current source and build directories to the include path,\ndefaults to true.\n\ninclude_directories: one or more objects created with the\ninclude_directories function, or (since 0.50.0) strings, which\nwill be transparently expanded to include directory objects\n\ninstall: when set to true, this executable should be installed, defaults to false\n\n\ninstall_dir: override install directory for this file. The value is\nrelative to the prefix specified. F.ex, if you want to install\nplugins into a subdir, you'd use something like this: install_dir : get_option('libdir') / 'projectname-1.0'.\n\ninstall_mode (since 0.47.0): specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\ninstall_rpath: a string to set the target's rpath to after install\n(but not before that). On Windows, this argument has no effect.\n\nobjects: list of prebuilt object files (usually for third party\nproducts you don't have source to) that should be linked in this\ntarget, never use this for object files that you build yourself.\n\nname_suffix: the string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\nexe and on other platforms it is omitted. Set this to [], or omit\nthe keyword argument for the default behaviour.\n\noverride_options (since 0.40.0): takes an array of strings in the same format as\nproject's default_options overriding the values of these options\nfor this target only.\n\ngnu_symbol_visibility (since 0.48.0): specifies how symbols should be exported, see\ne.g the GCC Wiki for more\ninformation. This value can either be an empty string or one of\ndefault, internal, hidden, protected or inlineshidden, which\nis the same as hidden but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n\nd_import_dirs: list of directories to look in for string imports used\nin the D programming language\n\nd_unittest: when set to true, the D modules are compiled in debug mode\n\nd_module_versions: list of module version identifiers set when compiling D sources\n\nd_debug: list of module debug identifiers set when compiling D sources\n\npie (since 0.49.0): build a position-independent executable\n\nnative: is a boolean controlling whether the target is compiled for the\nbuild or host machines. Defaults to false, building for the host machine.\n\nwin_subsystem (since 0.56.0) specifies the subsystem type to use\non the Windows platform. Typical values include console for text\nmode programs and windows for gui apps. The value can also contain\nversion specification such as windows,6.0. See MSDN\ndocumentation\nfor the full list. The default value is console.\n\n"});