fragment_downloaded_cb({"url":"Wrap-review-guidelines.html#page-description","fragment":"In order to get a package in the Wrap database it must be reviewed and\naccepted by someone with admin rights. Here is a list of items to\ncheck in the review. If some item is not met it does not mean that the\npackage is rejected. What should be done will be determined on a\ncase-by-case basis. Similarly meeting all these requirements does not\nguarantee that the package will get accepted. Use common sense.\nThe mesonwrap repository provides tools\nto maintain the WrapDB. Read-only features such can be used by anyone without Meson admin rights.\nSome tools require access to the Github API.\nA personal access token may be required\nif the freebie Github API quota is exhausted. public_repo scope is required\nfor write operations.\nSince not every check can be automated please pay attention to the following during the review:\nEncourage wrap readability. Use your own judgement.\nIf the code looks good use the --approve flag to merge it.\nThe tool automatically creates a release.\nIf you need to create a release manually (because, for example, a MR\nwas merged by hand), the command to do it is the following:\nAn example invocation would look like this:\n\nDownload link points to an authoritative upstream location.\nVersion branch is created from master.\nExcept for the existing code, LICENSE.build is mandatory.\n\nproject() has a version and it matches the source version.\n\nproject() has a license.\nComplex configure_file() inputs are documented.\nIf the file is a copy of a project file make sure it is clear what was changed.\nUnit tests are enabled if the project provides them.\nThere are no guidelines if install() is a good or a bad thing in wraps.\nIf the project can't be tested on the host platform consider using the --cross-file flag.\nSee the issue.\n\n"});