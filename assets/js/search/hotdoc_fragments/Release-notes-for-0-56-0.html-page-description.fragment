fragment_downloaded_cb({"url":"Release-notes-for-0-56-0.html#page-description","fragment":"The final Python 3.5 release was 3.5.10 in September.\nThis release series is now End-of-Life (EOL). The only LTS distribution that\nstill only ships Python 3.5 is Ubuntu 16.04, which will be\nEOL in April 2021.\nPython 3.6 has numerous features that we find useful such as improved support\nfor the typing module, f-string support, and better integration with the\npathlib module.\nAs a result, we will begin requiring Python 3.6 or newer in Meson 0.57, which\nis the next release. Starting with Meson 0.56, we now print a NOTICE: when\na meson command is run on Python 3.5 to inform users about this. This notice\nhas also been backported into the 0.55.2 stable release.\nYou could always specify a list of tests to run by passing the names as\narguments to meson test. If there were multiple tests with that name (in the\nsame project or different subprojects), all of them would be run. Now you can:\nAs before, these can all be specified multiple times and mixed:\nWhen cross-compiling, native (build machine) compilers for the languages\nspecified in project() are not required, if no targets use them.\nThe target introspection (meson introspect --targets, intro-targets.json)\nnow has the new extra_files key which lists all files specified via the\nextra_files kwarg of a build target (see executable(), etc.)\nAIX is now supported when compiling with gcc. A number of features are not\nsupported yet. For example, only gcc is supported (not xlC). Archives with both\n32-bit and 64-bit dynamic libraries are not generated automatically. The rpath\nincludes both the build and install rpath, no attempt is made to change the\nrpath at install time. Most advanced features (eg. link_whole) are not\nsupported yet.\nIt is not required to promote wrap files for subprojects into the main project\nany more. When configuring a subproject, meson will look for any wrap file or\ndirectory in the subproject's subprojects/ directory and add them into the\nglobal list of available subprojects, to be used by any future subproject()\ncall or dependency() fallback. If a subproject with the same name already exists,\nthe new wrap file or directory is ignored. That means that the main project can\nalways override any subproject's wrap files by providing their own, it also means\nthe ordering in which subprojects are configured matters, if 2 subprojects provide\nfoo.wrap only the one from the first subproject to be configured will be used.\nThis new behavior can be disabled by passing --wrap-mode=nopromote.\nThose function are common source of issue when used in a subproject because they\npoint to the parent project root which is rarely what is expected and is a\nviolation of subproject isolation.\nmeson.current_source_dir() and meson.current_build_dir() should be used instead\nand have been available in all Meson versions. New functions meson.project_source_root()\nand meson.project_build_root() have been added in Meson 0.56.0 to get the root\nof the current (sub)project.\nDependencies created with declare_dependency() now has new method as_link_whole().\nIt returns a copy of the dependency object with all link_with arguments changed\nto link_whole. This is useful for example for fallback dependency from a\nsubproject built with default_library=static.\nIt is now possible to build things like Windows kernel drivers with\nthe new win_subsystem keyword argument. This replaces the old\ngui_app keyword argument, which is now deprecated. You should update\nyour project to use the new style like this:\nThe argument supports versioning as described on MSDN\ndocumentation.\nThus to build a Windows kernel driver with a specific version you'd\nwrite something like this:\nAdded support for nvidia_hpc NVidia HPC SDK compilers, which are currently in public beta testing.\nA new set of sections has been added to the cross and native files, [project options] and [<subproject_name>:project options], where subproject_name\nis the name of a subproject. Any options that are allowed in the project can\nbe set from this section. They have the lowest precedent, and will be\noverwritten by command line arguments.\nWill result in the option foo having the value other val,\nWill result in the option foo having the value different val,\nSubproject options are assigned like this:\nAdditionally meson level options can be set in the same way, using the\n[built-in options] section.\nThese options can also be set on a per-subproject basis, although only\ndefault_library and werror can currently be set:\nThe unstable-keyval has been renamed to keyval and now promises stability\nguarantees.\nMeson will print a warning when you load an unstable- module that has been\nstabilised (so unstable-keyval is still accepted for example).\nMeson now supports cross compilation for CMake subprojects. Meson will try to\nautomatically guess most of the required CMake toolchain variables from existing\nentries in the cross and native files. These variables will be stored in an\nautomatically generate CMake toolchain file in the build directory. The\nremaining variables that can't be guessed can be added by the user in the\nnew [cmake] cross/native file section.\nPrevious the keys were always lowered, which worked fine for the values that\nwere allowed in the machine files. With the addition of per-project options\nwe need to make these sensitive to case, as the options in meson_options.txt\nare sensitive to case already.\nThe variables keyword argument in declare_dependency() used to only support\ndictionary and pkgconfig.generate() only list of strings. They now both support\ndictionary and list of strings in the format 'name=value'. This makes easier\nto share a common set of variables for both:\nWhen using qtmod.preprocess() in combination with qtmod.compile_translations()\nto embed translations using rcc, it is no longer required to do this:\nInstead, use:\nwhich will automatically detect and generate the needed compile_translations\ntargets.\nAs an alternative to the fallback keyword argument to dependency,\nyou may use allow_fallback, which accepts a boolean value. If true\nand the dependency is not found on the system, Meson will fallback\nto a subproject that provides this dependency, even if the dependency\nis optional. If false, Meson will not fallback even if a subproject\nprovides this dependency.\nThis method has been extended to use config-tools, and a fallback to\nfind_library for lookup as well as pkg-config.\nHDF5 has been improved so that the internal representations have been split.\nThis allows selecting pkg-config and config-tool dependencies separately.\nBoth work as proper dependencies of their type, so get_variable and similar\nnow work correctly.\nIt has also been fixed to use the selected compiler for the build instead of\nthe default compiler.\nA new experimental module unstable_external_project has been added to build\ncode using other build systems than Meson. Currently only supporting projects\nwith a configure script that generates Makefiles.\nwarning_level can now be defined per subproject, in the same way as\ndefault_library and werror.\nA new --types argument has been added to all subcommands to run the command only\non wraps with the specified types. For example this command will only print Hello\nfor each git subproject: meson subprojects foreach --types git echo \"Hello\".\nMultiple types can be set as comma separated list e.g. --types git,file.\nSubprojects with no wrap file are now taken into account as well. This happens\nfor example for subprojects configured as git submodule, or downloaded manually\nby the user and placed into the subprojects/ directory.\nThe checkout subcommand now always stash any pending changes before switching\nbranch. Note that update subcommand was already stashing changes before updating\nthe branch.\nIf the command fails on any subproject the execution continues with other\nsubprojects, but at the end an error code is now returned.\nThe update subcommand has been reworked:\nAdded experimental support for the CompCert formally-verified C compiler. The current state of the implementation is good enough to build the picolibc project with CompCert, but might still need additional adjustments for other projects.\nThe introspection data for tests and benchmarks now includes the target\nids for executables and built files that are needed by the test.  IDEs can\nuse this feature to update the build more quickly before running a test.\nThe dependency() method of the CMake subproject object now also supports the\ninclude_type kwarg which is similar to the sane kwarg in the dependency()\nfunction.\nThese have been replaced with the more versatile get_variable() method\nalready, and shouldn't be used anymore.\n\nIt is not limited to cross builds any more, <lang>_stdlib property can be\nset in native files.\nThe variable name parameter is no longer required as long as the subproject\ncalls meson.override_dependency('c_stdlib', mylibc_dep).\n\n\nIn the case the URL of origin is different as the url set in wrap file,\nthe subproject will not be updated unless --reset is specified (see below).\nIn the case a subproject directory exists and is not a git repository but has\na [wrap-git], meson used to run git commands that would wrongly apply to the\nmain project. It now skip the subproject unless --reset is specified (see below).\nThe --rebase behaviour is now the default for consistency: it was\nalready rebasing when current branch and revision are the same, it is\nless confusing to rebase when they are different too.\nAdd --reset mode that checkout the new branch and hard reset that\nbranch to remote commit. This new mode guarantees that every\nsubproject are exactly at the wrap's revision. In addition the URL of origin\nis updated in case it changed in the wrap file. If the subproject directory is\nnot a git repository but has a [wrap-git] the directory is deleted and the\nnew repository is cloned.\nLocal changes are always stashed first to avoid any data loss. In the\nworst case scenario the user can always check reflog and stash list to\nrollback.\n\n"});