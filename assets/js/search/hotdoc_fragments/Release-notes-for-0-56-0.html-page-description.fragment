fragment_downloaded_cb({"url":"Release-notes-for-0-56-0.html#page-description","fragment":"The final Python 3.5 release was 3.5.10 in\nSeptember. This\nrelease series is now End-of-Life (EOL). The only LTS distribution\nthat still only ships Python 3.5 is Ubuntu 16.04, which will be EOL\nin April 2021.\nPython 3.6 has numerous features that we find useful such as improved\nsupport for the typing module, f-string support, and better\nintegration with the pathlib module.\nAs a result, we will begin requiring Python 3.6 or newer in Meson\n0.57, which is the next release. Starting with Meson 0.56, we now\nprint a NOTICE: when a meson command is run on Python 3.5 to\ninform users about this. This notice has also been backported into the\n0.55.2 stable release.\nYou could always specify a list of tests to run by passing the names\nas arguments to meson test. If there were multiple tests with that\nname (in the same project or different subprojects), all of them would\nbe run. Now you can:\nAs before, these can all be specified multiple times and mixed:\nWhen cross-compiling, native (build machine) compilers for the\nlanguages specified in project() are not required, if no targets use\nthem.\nThe target introspection (meson introspect --targets,\nintro-targets.json) now has the new extra_files key which lists\nall files specified via the extra_files kwarg of a build target (see\nexecutable(), etc.)\nAIX is now supported when compiling with gcc. A number of features are\nnot supported yet. For example, only gcc is supported (not xlC).\nArchives with both 32-bit and 64-bit dynamic libraries are not\ngenerated automatically. The rpath includes both the build and install\nrpath, no attempt is made to change the rpath at install time. Most\nadvanced features (eg. link_whole) are not supported yet.\nIt is not required to promote wrap files for subprojects into the main\nproject any more. When configuring a subproject, Meson will look for\nany wrap file or directory in the subproject's subprojects/\ndirectory and add them into the global list of available subprojects,\nto be used by any future subproject() call or dependency()\nfallback. If a subproject with the same name already exists, the new\nwrap file or directory is ignored. That means that the main project\ncan always override any subproject's wrap files by providing their\nown, it also means the ordering in which subprojects are configured\nmatters, if 2 subprojects provide foo.wrap only the one from the first\nsubproject to be configured will be used.\nThis new behavior can be disabled by passing --wrap-mode=nopromote.\nThose function are common source of issue when used in a subproject\nbecause they point to the parent project root which is rarely what is\nexpected and is a violation of subproject isolation.\nmeson.current_source_dir() and meson.current_build_dir() should be\nused instead and have been available in all Meson versions. New\nfunctions meson.project_source_root() and\nmeson.project_build_root() have been added in Meson 0.56.0 to get\nthe root of the current (sub)project.\nDependencies created with declare_dependency() now has new method\nas_link_whole(). It returns a copy of the dependency object with all\nlink_with arguments changed to link_whole. This is useful for example\nfor fallback dependency from a subproject built with\ndefault_library=static.\nIt is now possible to build things like Windows kernel drivers with\nthe new win_subsystem keyword argument. This replaces the old\ngui_app keyword argument, which is now deprecated. You should update\nyour project to use the new style like this:\nThe argument supports versioning as described on MSDN\ndocumentation.\nThus to build a Windows kernel driver with a specific version you'd\nwrite something like this:\nAdded support for nvidia_hpc NVidia HPC SDK compilers, which are currently in public beta testing.\nA new set of sections has been added to the cross and native files,\n[project options] and [<subproject_name>:project options], where\nsubproject_name is the name of a subproject. Any options that are\nallowed in the project can be set from this section. They have the\nlowest precedent, and will be overwritten by command line arguments.\nWill result in the option foo having the value other val,\nWill result in the option foo having the value different val,\nSubproject options are assigned like this:\nAdditionally Meson level options can be set in the same way, using the\n[built-in options] section.\nThese options can also be set on a per-subproject basis, although only\ndefault_library and werror can currently be set:\nThe unstable-keyval has been renamed to keyval and now promises stability\nguarantees.\nMeson will print a warning when you load an unstable- module that has been\nstabilised (so unstable-keyval is still accepted for example).\nMeson now supports cross compilation for CMake subprojects. Meson will\ntry to automatically guess most of the required CMake toolchain\nvariables from existing entries in the cross and native files. These\nvariables will be stored in an automatically generate CMake toolchain\nfile in the build directory. The remaining variables that can't be\nguessed can be added by the user in the new [cmake] cross/native\nfile section.\nPrevious the keys were always lowered, which worked fine for the\nvalues that were allowed in the machine files. With the addition of\nper-project options we need to make these sensitive to case, as the\noptions in meson_options.txt are sensitive to case already.\nThe variables keyword argument in declare_dependency() used to\nonly support dictionary and pkgconfig.generate() only list of\nstrings. They now both support dictionary and list of strings in the\nformat 'name=value'. This makes easier to share a common set of\nvariables for both:\nWhen using qtmod.preprocess() in combination with\nqtmod.compile_translations() to embed translations using rcc, it is no\nlonger required to do this:\nInstead, use:\nwhich will automatically detect and generate the needed\ncompile_translations targets.\nAs an alternative to the fallback keyword argument to dependency,\nyou may use allow_fallback, which accepts a boolean value. If true\nand the dependency is not found on the system, Meson will fallback to\na subproject that provides this dependency, even if the dependency is\noptional. If false, Meson will not fallback even if a subproject\nprovides this dependency.\nThis method has been extended to use config-tools, and a fallback to\nfind_library for lookup as well as pkg-config.\nHDF5 has been improved so that the internal representations have been\nsplit. This allows selecting pkg-config and config-tool dependencies\nseparately. Both work as proper dependencies of their type, so\nget_variable and similar now work correctly.\nIt has also been fixed to use the selected compiler for the build instead of\nthe default compiler.\nA new experimental module unstable_external_project has been added\nto build code using other build systems than Meson. Currently only\nsupporting projects with a configure script that generates Makefiles.\nwarning_level can now be defined per subproject, in the same way as\ndefault_library and werror.\nA new --types argument has been added to all subcommands to run the\ncommand only on wraps with the specified types. For example this\ncommand will only print Hello for each git subproject: meson subprojects foreach --types git echo \"Hello\". Multiple types can be\nset as comma separated list e.g. --types git,file.\nSubprojects with no wrap file are now taken into account as well. This\nhappens for example for subprojects configured as git submodule, or\ndownloaded manually by the user and placed into the subprojects/\ndirectory.\nThe checkout subcommand now always stash any pending changes before\nswitching branch. Note that update subcommand was already stashing\nchanges before updating the branch.\nIf the command fails on any subproject the execution continues with\nother subprojects, but at the end an error code is now returned.\nThe update subcommand has been reworked:\nAdded experimental support for the CompCert formally-verified C\ncompiler. The current state of\nthe implementation is good enough to build the picolibc\nproject with CompCert, but\nmight still need additional adjustments for other projects.\nThe introspection data for tests and benchmarks now includes the\ntarget ids for executables and built files that are needed by the\ntest. IDEs can use this feature to update the build more quickly\nbefore running a test.\nThe dependency() method of the CMake subproject object now also\nsupports the include_type kwarg which is similar to the sane kwarg\nin the dependency() function.\nThese have been replaced with the more versatile get_variable() method\nalready, and shouldn't be used anymore.\n\nIt is not limited to cross builds any more, <lang>_stdlib property can be\nset in native files.\nThe variable name parameter is no longer required as long as the subproject\ncalls meson.override_dependency('c_stdlib', mylibc_dep).\n\n\nIn the case the URL of origin is different as the url set in wrap file,\nthe subproject will not be updated unless --reset is specified (see below).\nIn the case a subproject directory exists and is not a git repository but has\na [wrap-git], Meson used to run git commands that would wrongly apply to the\nmain project. It now skip the subproject unless --reset is specified (see below).\nThe --rebase behaviour is now the default for consistency: it was\nalready rebasing when current branch and revision are the same, it is\nless confusing to rebase when they are different too.\nAdd --reset mode that checkout the new branch and hard reset that\nbranch to remote commit. This new mode guarantees that every\nsubproject are exactly at the wrap's revision. In addition the URL of origin\nis updated in case it changed in the wrap file. If the subproject directory is\nnot a git repository but has a [wrap-git] the directory is deleted and the\nnew repository is cloned.\nLocal changes are always stashed first to avoid any data loss. In the\nworst case scenario the user can always check reflog and stash list to\nrollback.\n\n"});