fragment_downloaded_cb({"url":"Reference-manual.html#project","fragment":"project()\nThe first argument to this function must be a string defining the name\nof this project.\nThe project name can be any string you want, it's not used for\nanything except descriptive purposes. However since it is written to\ne.g. the dependency manifest is usually makes sense to have it be the\nsame as the project tarball or pkg-config name. So for example you\nwould probably want to use the name libfoobar instead of The Foobar\nLibrary.\nIt may be followed by the list of programming languages that the project uses.\n(since 0.40.0) The list of languages is optional.\nThese languages may be used both for native: false (the default)\n(host machine) targets and for native: true (build machine) targets.\n(since 0.56.0) The build machine compilers for the specified\nlanguages are not required.\nSupported values for languages are c, cpp (for C++), cuda, d,\nobjc, objcpp, fortran, java, cs (for C#), vala and rust.\nProject supports the following keyword arguments.\ndefault_options: takes an array of strings. The strings are in the\nform key=value and have the same format as options to\nmeson configure. For example to set the default project type you would\nset this: default_options : ['buildtype=debugoptimized']. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as buildtype can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\nlicense: takes a string or array of strings describing the license(s) the\ncode is under. To avoid ambiguity it is recommended to use a standardized\nlicense identifier from the SPDX license list.\nUsually this would be something like license : 'GPL-2.0-or-later', but if\nthe code has multiple licenses you can specify them as an array like this:\nlicense : ['proprietary', 'GPL-3.0-only']. Note that the text is informal\nand is only written to the dependency manifest. Meson does not do any license\nvalidation, you are responsible for verifying that you abide by all licensing\nterms. You can access the value in your Meson build files with\nmeson.project_license().\nmeson_version: takes a string describing which Meson version the\nproject requires. Usually something like >=0.28.0.\nsubproject_dir: specifies the top level directory name that holds\nMeson subprojects. This is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\nversion: which is a free form string describing the version of\nthis project. You can access the value in your Meson build files\nwith meson.project_version(). Since 0.57.0 this can also be a\nFile object pointing to a file that contains exactly one line of\ntext.\n\n\ndefault_options: takes an array of strings. The strings are in the\nform key=value and have the same format as options to\nmeson configure. For example to set the default project type you would\nset this: default_options : ['buildtype=debugoptimized']. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as buildtype can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\n\n\nlicense: takes a string or array of strings describing the license(s) the\ncode is under. To avoid ambiguity it is recommended to use a standardized\nlicense identifier from the SPDX license list.\nUsually this would be something like license : 'GPL-2.0-or-later', but if\nthe code has multiple licenses you can specify them as an array like this:\nlicense : ['proprietary', 'GPL-3.0-only']. Note that the text is informal\nand is only written to the dependency manifest. Meson does not do any license\nvalidation, you are responsible for verifying that you abide by all licensing\nterms. You can access the value in your Meson build files with\nmeson.project_license().\n\n\nmeson_version: takes a string describing which Meson version the\nproject requires. Usually something like >=0.28.0.\n\n\nsubproject_dir: specifies the top level directory name that holds\nMeson subprojects. This is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\n\n\nversion: which is a free form string describing the version of\nthis project. You can access the value in your Meson build files\nwith meson.project_version(). Since 0.57.0 this can also be a\nFile object pointing to a file that contains exactly one line of\ntext.\n\n\n"});