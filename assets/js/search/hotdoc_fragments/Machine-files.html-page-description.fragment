fragment_downloaded_cb({"url":"Machine-files.html#page-description","fragment":"Cross and native files are nearly identical, but not completely. This is the\ndocumentation on the common values used by both, for the specific values of\none or the other see the cross compilation and native\nenvironments.\nChanged in 0.56.0 Keys within sections are now case sensitive. This is\n*required to make project options work correctly.\nThere are four basic data types in a machine file:\nA string is specified single quoted:\nAn array is enclosed in square brackets, and must consist of strings or booleans\nA boolean must be either true or false, and unquoted.\nAn integer must be either an unquoted numeric constant;\nThe following sections are allowed:\nSince 0.56.0\nString and list concatenation is supported using the + operator, joining paths\nis supported using the / operator.\nEntries defined in the [constants] section can be used in any other section\n(they are always parsed first), entries in any other section can be used only\nwithin that same section and only after it has been defined.\nThis can be useful with cross file composition as well. A generic cross file\ncould be composed with a platform specific file where constants are defined:\nThis can be used as meson setup --cross-file aarch64.ini --cross-file cross.ini builddir.\nNote that file composition happens before the parsing of values. The example\nbelow results in b being 'HelloWorld':\nThe example below results in an error when file1.ini is included before file2.ini\nbecause b would be defined before a:\nThe binaries section contains a list of binaries. These can be used\ninternally by meson, or by the find_program function.\nThese values must be either strings or an array of strings\nCompilers and linkers are defined here using <lang> and <lang>_ld.\n<lang>_ld is special because it is compiler specific. For compilers like\ngcc and clang which are used to invoke the linker this is a value to pass to\ntheir \"choose the linker\" argument (-fuse-ld= in this case). For compilers\nlike MSVC and Clang-Cl, this is the path to a linker for meson to invoke,\nsuch as link.exe or lld-link.exe. Support for ld is new in 0.53.0\nchanged in 0.53.1 the ld variable was replaced by <lang>_ld, because it\n*regressed a large number of projects. in 0.53.0 the ld variable was used\ninstead.\nNative example:\nCross example:\nAn incomplete list of internally used programs that can be overridden here is:\nDeprecated in 0.56.0 use the built-in section instead.\nAs of 0.50.0 paths and directories such as libdir can be defined in the native\nand cross files in a paths section. These should be strings.\nThese values will only be loaded when not cross compiling. Any arguments on the\ncommand line will override any options in the native file. For example, passing\n--libdir=otherlibdir would result in a prefix of /my prefix and a libdir of\notherlibdir.\nNew in native files in 0.54.0, always in cross files.\nIn addition to special data that may be specified in cross files, this\nsection may contain random key value pairs accessed using the\nmeson.get_external_property(), or meson.get_cross_property().\nChanged in 0.56.0 putting <lang>_args and <lang>_link_args in the\nproperties section has been deprecated, and should be put in the built-in\noptions section.\nNew in 0.56.0\nPath options are not allowed, those must be set in the [paths] section.\nBeing able to set project specific options in a cross or native file can be\ndone using the [project options] section of the specific file (if doing a\ncross build the options from the native file will be ignored)\nFor setting options in subprojects use the [<subproject>:project options]\nsection instead.\nMeson built-in options can be set the same way:\nYou can set some meson built-in options on a per-subproject basis, such as\ndefault_library and werror. The order of precedence is:\nOptions set on a per-subproject basis will inherit the\noption from the parent if the parent has a setting but the subproject\ndoesn't, even when there is a default set meson language.\nwill make subprojects use default_library as static.\nSome options can be set on a per-machine basis (in other words, the value of\nthe build machine can be different than the host machine in a cross compile).\nIn these cases the values from both a cross file and a native file are used.\nAn incomplete list of options is:\nNative files allow layering (cross files can be layered since meson 0.52.0).\nMore than one file can be loaded, with values from a previous file being\noverridden by the next. The intention of this is not overriding, but to allow\ncomposing files. This composition is done by passing the command line\nargument multiple times:\nIn this case first.ini will be loaded, then second.ini, with values from\nsecond.ini replacing first.ini, and so on.\nFor example, if there is a project using C and C++, python 3.4-3.7, and LLVM\n5-7, and it needs to build with clang 5, 6, and 7, and gcc 5.x, 6.x, and 7.x;\nexpressing all of these configurations in monolithic configurations would\nresult in 81 different native files. By layering them, it can be expressed by\njust 12 native files.\n\nstrings\narrays\nbooleans\nintegers\n\n\nconstants\nbinaries\npaths\nproperties\nproject options\nbuilt-in options\n\n\ncmake\ncups-config\ngnustep-config\ngpgme-config\nlibgcrypt-config\nlibwmf-config\nllvm-config\npcap-config\npkgconfig\nsdl2-config\nwx-config (or wx-3.0-config or wx-config-gtk)\n\n\npkg_config_path\ncmake_prefix_path\n\n"});