fragment_downloaded_cb({"url":"Machine-files.html#page-description","fragment":"Cross and native files are nearly identical, but not completely. This\nis the documentation on the common values used by both, for the\nspecific values of one or the other see the cross\ncompilation and native\nenvironments.\nChanged in 0.56.0 Keys within sections are now case sensitive. This\n*is required to make project options work correctly.\nThere are four basic data types in a machine file:\nA string is specified single quoted:\nAn array is enclosed in square brackets, and must consist of strings or booleans\nA boolean must be either true or false, and unquoted.\nAn integer must be an unquoted numeric constant.\nThe following sections are allowed:\nSince 0.56.0\nString and list concatenation is supported using the + operator,\njoining paths is supported using the / operator. Entries defined in\nthe [constants] section can be used in any other section (they are\nalways parsed first), entries in any other section can be used only\nwithin that same section and only after it has been defined.\nThis can be useful with cross file composition as well. A generic\ncross file could be composed with a platform specific file where\nconstants are defined:\nThis can be used as meson setup --cross-file aarch64.ini --cross-file cross.ini builddir.\nNote that file composition happens before the parsing of values. The\nexample below results in b being 'HelloWorld':\nThe example below results in an error when file1.ini is included\nbefore file2.ini because b would be defined before a:\nThe binaries section contains a list of binaries. These can be used\ninternally by Meson, or by the find_program function.\nThese values must be either strings or an array of strings\nCompilers and linkers are defined here using <lang> and <lang>_ld.\n<lang>_ld is special because it is compiler specific. For compilers\nlike gcc and clang which are used to invoke the linker this is a value\nto pass to their \"choose the linker\" argument (-fuse-ld= in this\ncase). For compilers like MSVC and Clang-Cl, this is the path to a\nlinker for Meson to invoke, such as link.exe or lld-link.exe.\nSupport for ld is new in 0.53.0\nchanged in 0.53.1 the ld variable was replaced by <lang>_ld,\n*because it regressed a large number of projects. in 0.53.0 the ld\n*variable was used instead.\nNative example:\nCross example:\nAn incomplete list of internally used programs that can be overridden\nhere is:\nDeprecated in 0.56.0 use the built-in section instead.\nAs of 0.50.0 paths and directories such as libdir can be defined in\nthe native and cross files in a paths section. These should be\nstrings.\nThese values will only be loaded when not cross compiling. Any\narguments on the command line will override any options in the native\nfile. For example, passing --libdir=otherlibdir would result in a\nprefix of /my prefix and a libdir of otherlibdir.\nNew in native files in 0.54.0, always in cross files.\nIn addition to special data that may be specified in cross files, this\nsection may contain random key value pairs accessed using the\nmeson.get_external_property(), or meson.get_cross_property().\nChanged in 0.56.0 putting <lang>_args and <lang>_link_args in\nthe properties section has been deprecated, and should be put in the\nbuilt-in options section.\nThis is a non exhaustive list of supported variables in the [properties]\nsection.\nNew in 0.56.0\nAll variables set in the [cmake] section will be added to the\ngenerate CMake toolchain file used for both CMake dependencies and\nCMake subprojects. The type of each entry must be either a string or a\nlist of strings.\nNote: All occurrences of \\ in the value of all keys will be replaced with\na / since CMake has a lot of issues with correctly escaping \\ when\ndealing with variables (even in cases where a path in CMAKE_C_COMPILER\nis correctly escaped, CMake will still trip up internaly for instance)\nFor instance, the [cmake] section from above will generate the\nfollowing code in the CMake toolchain file:\nNew in 0.56.0\nPath options are not allowed, those must be set in the [paths]\nsection.\nBeing able to set project specific options in a cross or native file\ncan be done using the [project options] section of the specific file\n(if doing a cross build the options from the native file will be\nignored)\nFor setting options in subprojects use the [<subproject>:project options] section instead.\nMeson built-in options can be set the same way:\nYou can set some Meson built-in options on a per-subproject basis,\nsuch as default_library and werror. The order of precedence is:\nOptions set on a per-subproject basis will inherit the option from the\nparent if the parent has a setting but the subproject doesn't, even\nwhen there is a default set Meson language.\nwill make subprojects use default_library as static.\nSome options can be set on a per-machine basis (in other words, the\nvalue of the build machine can be different than the host machine in a\ncross compile). In these cases the values from both a cross file and a\nnative file are used.\nAn incomplete list of options is:\nNative files allow layering (cross files can be layered since Meson\n0.52.0). More than one file can be loaded, with values from a previous\nfile being overridden by the next. The intention of this is not\noverriding, but to allow composing files. This composition is done by\npassing the command line argument multiple times:\nIn this case first.ini will be loaded, then second.ini, with\nvalues from second.ini replacing first.ini, and so on.\nFor example, if there is a project using C and C++, python 3.4-3.7,\nand LLVM 5-7, and it needs to build with clang 5, 6, and 7, and gcc\n5.x, 6.x, and 7.x; expressing all of these configurations in\nmonolithic configurations would result in 81 different native files.\nBy layering them, it can be expressed by just 12 native files.\n\nstrings\narrays\nbooleans\nintegers\n\n\nconstants\nbinaries\npaths\nproperties\ncmake\nproject options\nbuilt-in options\n\n\ncmake\ncups-config\ngnustep-config\ngpgme-config\nlibgcrypt-config\nlibwmf-config\nllvm-config\npcap-config\npkgconfig\nsdl2-config\nwx-config (or wx-3.0-config or wx-config-gtk)\n\n\n\ncmake_toolchain_file specifies an absolute path to an already existing\nCMake toolchain file that will be loaded with include() as the last\ninstruction of the automatically generated CMake toolchain file from Meson.\n(new in 0.56.0)\n\ncmake_defaults is a boolean that specifies whether Meson should automatically\ngenerate default toolchain variables from other sections (binaries,\nhost_machine, etc.) in the machine file. Defaults are always overwritten\nby variables set in the [cmake] section. The default is true. (new in 0.56.0)\n\ncmake_skip_compiler_test is an enum that specifies when Meson should\nautomatically generate toolchain variables to skip the CMake compiler\nsanity checks. This only has an effect if cmake_defaults is true.\nSupported values are always, never, dep_only. The default is dep_only.\n(new in 0.56.0)\n\ncmake_use_exe_wrapper is a boolean that controls whether to use the\nexe_wrapper specified in [binaries] to run generated executables in CMake\nsubprojects. This setting has no effect if the exe_wrapper was not specified.\nThe default value is true. (new in 0.56.0)\n\n\npkg_config_path\ncmake_prefix_path\n\n"});