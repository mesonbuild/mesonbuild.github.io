fragment_downloaded_cb({"url":"Reference-manual_functions.html#test","fragment":"test()\nDefines a test to run with the test harness. Takes two positional\narguments, the first is the name of the test and the second is the\nexecutable to run. The executable can be an exe object returned by\nexecutable() or an external_program object] returned by\nfind_program().\n(since 0.55.0) When cross compiling, if an exe_wrapper is needed and\ndefined the environment variable MESON_EXE_WRAPPER will be set to\nthe string value of that wrapper (implementation detail: using\nmesonlib.join_args). Test scripts may use this to run cross built\nbinaries. If your test needs MESON_EXE_WRAPPER in cross build\nsituations it is your responsibility to return code 77 to tell the\nharness to report \"skip\".\nBy default, environment variable\nMALLOC_PERTURB_\nis automatically set by meson test to a random value between 1..255.\nThis can help find memory leaks on configurations using glibc,\nincluding with non-GCC compilers. However, this can have a performance\nimpact, and may fail a test due to external libraries whose internals\nare out of the user's control. To check if this feature is causing an\nexpected runtime crash, disable the feature by temporarily setting\nenvironment variable MALLOC_PERTURB_=0. While it's preferable to\nonly temporarily disable this check, if a project requires permanent\ndisabling of this check in meson.build do like:\nBy default, the environment variables ASAN_OPTIONS and UBSAN_OPTIONS are\nset to enable aborting on detected violations and to give a backtrace. To suppress\nthis, ASAN_OPTIONS and UBSAN_OPTIONS can be set in the environment.\nIn addition to running individual executables as test cases, test()\ncan also be used to invoke an external test harness.  In this case,\nit is best to use verbose: true (since 0.62.0) and, if supported\nby the external harness, protocol: 'tap' (since 0.50.0).  This will\nensure that Meson logs each subtest as it runs, instead of including\nthe whole log at the end of the run.\nDefined tests can be run in a backend-agnostic way by calling\nmeson test inside the build dir, or by using backend-specific\ncommands, such as ninja test or msbuild RUN_TESTS.vcxproj.\n\n\n"});