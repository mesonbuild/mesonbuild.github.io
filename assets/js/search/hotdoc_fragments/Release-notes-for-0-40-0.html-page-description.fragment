fragment_downloaded_cb({"url":"Release-notes-for-0-40-0.html#page-description","fragment":"This has been possible with the Ninja backend for a long time but now\nthe Visual Studio backend works too.\nThis method can be used to evaluate the value of an expression. As an\nexample:\nThere is now a VS2017 backend (--backend=vs2017) as well as a\ngeneric VS backend (--backend=vs) that autodetects the currently\nactive VS version.\nIf you have a directory inside your subprojects directory (usually\nsubprojects/) that is a git submodule, meson will automatically\ninitialize it if your build files refer to it. This will be done\nwithout needing a wrap file since git contains all the information\nneeded.\nAdded a new option wrap-mode that can be toggled to prevent Meson\nfrom downloading dependency projects. Attempting to do so will cause\nan error. This is useful for distro packagers and other cases where\nyou must explicitly enforce that nothing is downloaded from the net\nduring configuration or build.\nBuild targets got a new keyword argument override_options that can\nbe used to override system options. As an example if you have a target\nthat you know can't be built with -Werror enabled you can override\nthe value of the option like this:\nNote that this does not affect project options, only those options\nthat come from Meson (language standards, unity builds etc).\nCompiler objects got a new method get_define() that returns the\ngiven preprocessor symbol as a string.\nMeson now works under Cygwin and we have added it to our CI test\nmatrix.\nCustom targets can produce many output files. Previously it was only\npossible to install all of them in the same directory, but now you can\ninstall each output in its own directory like this:\nFor backwards compatibility and for conciseness, if you only specify\none directory all outputs will be installed into it.\nThe same feature is also available for Vala build targets. For\ninstance, to install a shared library built by valac, the generated\nheader, and the generated VAPI (respectively) into the default\nlocations, you can do:\nTo install any of the three in a custom directory, just pass it as a\nstring instead of true. To not install it, pass false. You can\nalso pass a single string (as before) and it will cause only the\nlibrary to be installed, so this is a backwards-compatible change.\nSome dependencies have many ways of being provided. As an example Qt\ncan either be detected via pkg-config or qmake. Until now Meson\nhas had a heuristic for selecting which method to choose but sometimes\nit does the wrong thing. This can now be overridden with the method\nkeyword like this:\nThe default behavior of static libraries is to discard all symbols\nthat are not not directly referenced. This may lead to exported\nsymbols being lost. Most compilers support \"whole archive\" linking\nthat includes all symbols and code of a given static library. This is\nexposed with the link_whole keyword.\nNote that Visual Studio compilers only support this functionality on\nVS 2015 and newer.\nUp until now unity builds were either done for every target or none of\nthem. Now unity builds can be specified to be enabled only for\nsubprojects, which change seldom, and not for the master project,\nwhich changes a lot. This is enabled by setting the unity option to\nsubprojects.\nMeson now sets the MESONINTROSPECT environment variable in addition\nto MESON_SOURCE_ROOT and other variables when running scripts. It is\nguaranteed to point to the correct mesonintrospect script, which is\nimportant when running meson uninstalled from git or when your PATHs\nmay not be set up correctly.\nSpecifically, the following meson functions will set it:\nmeson.add_install_script(), meson.add_postconf_script(),\nrun_command(), run_target().\n"});