fragment_downloaded_cb({"url":"Pkgconfig-module.html#pkggenerate","fragment":"pkg.generate()\nThe generated file's properties are specified with the following\nkeyword arguments.\nSince 0.46 a StaticLibrary or SharedLibrary object can optionally\nbe passed as first positional argument. If one is provided a default\nvalue will be provided for all required fields of the pc file:\nSince 0.54.0 uninstalled pkg-config files are generated as well. They\nare located in <build dir>/meson-uninstalled/. It is sometimes\nuseful to build projects against libraries built by Meson without\nhaving to install them into a prefix. In order to do so, just set\nPKG_CONFIG_PATH=<builddir>/meson-uninstalled before building your\napplication. That will cause pkg-config to prefer those\n-uninstalled.pc files and find libraries and headers from the Meson\nbuilddir. This is an experimental feature provided on a best-effort\nbasis, it might not work in all use-cases.\nSince 1.9.0 you can specify a license identifier. To use the current project\nlicence, simply use license: meson.project_license() as argument to generate().\n\n\ndescription a string describing the library, used to set the Description: field\n\nextra_cflags a list of extra compiler flags to be added to the\nCflags field after the header search path\n\nfilebase the base name to use for the pkg-config file; as an\nexample, the value of libfoo would produce a pkg-config file called\nlibfoo.pc\n\n\ninstall_dir the directory to install to, defaults to the value of\noption libdir followed by /pkgconfig\n\n\nlibraries a list of built libraries (usually results of\nshared_library) that the user needs to link against. Arbitrary strings can\nalso be provided and they will be added into the Libs field. Since 0.45.0\ndependencies of built libraries will be automatically added, see the\nImplicit dependencies section below for the exact\nrules. Since 0.58.0 custom_target() objects are supported as long as they are\nlinkable (has known extension such as .a, .so, etc).\n\nlibraries_private list of built libraries or strings to put in the\nLibs.private field. Since 0.45.0 dependencies of built libraries will be\nautomatically added, see the Implicit dependencies\nsection below for the exact rules. Since 0.58.0 custom_target() objects are\nsupported as long as they are linkable (has known extension such as .a,\n.so, etc).\n\nname the name of this library, used to set the Name: field\n\nsubdirs which subdirs of include should be added to the header\nsearch path, for example if you install headers into\n${PREFIX}/include/foobar-1, the correct value for this argument\nwould be foobar-1\n\n\nrequires list of strings, pkgconfig-dependencies or libraries that\npkgconfig.generate() was used on to put in the Requires field.\nSince 1.9.0 internal dependencies are supported if pkgconfig.generate()\nwas used on the underlying library.\n\nrequires_private the same as requires but for the Requires.private field\n\nurl a string with a url for the library\n\nlicense (Since 1.9.0) a string with a SPDX license to add to the generated file.\n\nvariables a list of strings with custom variables to add to the\ngenerated file. The strings must be in the form name=value and may\nreference other pkgconfig variables,\ne.g. datadir=${prefix}/share. The names prefix, libdir and\nincludedir are reserved and may not be used. Since 0.56.0 it can also be a\ndictionary but ordering of Meson dictionaries are not guaranteed, which could\ncause issues when some variables reference other variables.\nSpaces in values are escaped with \\, this is required in the case the value is\na path that and is used in cflags or libs arguments. Since 0.59.0 if\nescaping is not desired (e.g. space separate list of values) unescaped_variables\nkeyword argument should be used instead. Since 0.62.0 builtin directory variables\nthat are referenced are automatically created by default.\n\nuninstalled_variables used instead of the variables keyword argument, when\ngenerating the uninstalled pkg-config file. Since 0.54.0\nSpaces in values are escaped with \\, this is required in the case the value is\na path that and is used in cflags or libs arguments. Since 0.59.0 if\nescaping is not desired (e.g. space separate list of values)\nunescaped_uninstalled_variables keyword argument should be used instead.\n\nversion a string describing the version of this library, used to set the\nVersion: field. (since 0.46.0) Defaults to the project version if unspecified.\n\nd_module_versions a list of module version flags used when compiling\nD sources referred to by this pkg-config file\n\ndataonly field. (since 0.54.0) this is used for architecture-independent\npkg-config files in projects which also have architecture-dependent outputs.\n\nconflicts (since 0.36.0, incorrectly issued a warning prior to 0.54.0) list of strings to be put in the Conflicts field.\n\n\n\ninstall_dir is set to pkgconfig folder in the same location than the provided library.\n\ndescription is set to the project's name followed by the library's name.\n\nname is set to the library's name.\n\n"});