fragment_downloaded_cb({"url":"Rust-module.html#bindgen-input-string-buildtarget-string-buildtarget-output-string-include_directories-include_directories-string-c_args-string-args-string-dependencies-dependency","fragment":"bindgen(*, input: string | BuildTarget | [](string | BuildTarget), output: string, include_directories: [](include_directories | string), c_args: []string, args: []string, dependencies: []Dependency)\nThis function wraps bindgen to simplify creating rust bindings around C\nlibraries. This has two advantages over hand-rolling ones own with a\ngenerator or custom_target:\nIt takes the following keyword arguments\nIf the header depends on generated headers, those headers must be passed to\nbindgen as well to ensure proper dependency ordering, static headers do not\nneed to be passed, as a proper depfile is generated:\nSince 1.1.0 Meson will synchronize assertions for Rust and C/C++  when the\nb_ndebug option is set (via -DNDEBUG for C/C++, and -C debug-assertions=on for Rust), and will pass -DNDEBUG as an extra argument\nto clang. This allows for reliable wrapping of -DNDEBUG controlled behavior\nwith #[cfg(debug_asserions)] and or cfg!(). Before 1.1.0, assertions for Rust\nwere never turned on by Meson.\n\nIt handles include_directories, so one doesn't have to manually convert them to -I...\n\nIt automatically sets up a depfile, making the results more reliable\nIt automatically handles assertions, synchronizing Rust and C/C++ to have the same behavior\n\n\ninput — A list of Files, Strings, or CustomTargets. The first element is\nthe header bindgen will parse, additional elements are dependencies.\noutput — the name of the output rust file\ninclude_directories — A list of include_directories or string objects,\nthese are passed to clang as -I arguments (string since 1.0.0)\n\nc_args — A list of string arguments to pass to clang untouched\nargs — A list of string arguments to pass to bindgen untouched.\ndependencies — A list of Dependency objects to pass to the underlying clang call (since 1.0.0)\n\n"});