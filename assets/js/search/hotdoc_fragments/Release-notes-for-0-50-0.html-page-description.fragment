fragment_downloaded_cb({"url":"Release-notes-for-0-50-0.html#page-description","fragment":"The CMake dependency backend can now make use of existing\nFind<name>.cmake files by setting the CMAKE_MODULE_PATH with the\nnew dependency() property cmake_module_path. The paths given to\ncmake_module_path should be relative to the project source\ndirectory.\nFurthermore the property cmake_args was added to give CMake\nadditional parameters.\nNvidia / PGI C, C++ and Fortran\nno-cost compilers are\nnow supported. They have been tested on Linux so far.\nFortran 2008 / 2018 coarray support was added via dependency('coarray')\nPreviously libdir defaulted to the value of the build machine such\nas lib/x86_64-linux-gnu, which is almost always incorrect when cross\ncompiling. It now defaults to plain lib when cross compiling. Native\nbuilds remain unchanged and will point to the current system's library\ndir.\nA new [paths] section has been added to native and cross files. This\ncan be used to set paths such a prefix and libdir in a persistent way.\nAdds support for a warning level 0 which does not enable any static\nanalysis checks from the compiler\nIf you have clang-format installed and there is a .clang-format\nfile in the root of your master project, Meson will generate a run\ntarget called clang-format so you can reformat all files with one\ncommand:\nExternalProgram objects as well as the object returned by the\npython3 module provide this method, but the new python module did\nnot.\nThis resolves issue\n#4760 where a\ngenerator with multiple output nodes printed an empty string to the\nconsole\nIt is now possible to run meson introspect --buildoptions /path/to/meson.build\nwithout a configured build directory.\nRunning --buildoptions without a build directory produces the same\noutput as running it with a freshly configured build directory.\nHowever, this behavior is not guaranteed if subprojects are\npresent. Due to internal limitations all subprojects are processed\neven if they are never used in a real Meson run.  Because of this\noptions for the subprojects can differ.\nThe include_directories keyword argument now accepts plain strings\nrather than an include directory object. Meson will transparently\nexpand it so that a declaration like this:\nIs equivalent to this:\nInitial support for Fortran submodule was added, where the submodule\nis in the same or different file than the parent module. The\nsubmodule hierarchy specified in the source Fortran code submodule\nstatements are used by Meson to resolve source file dependencies. For\nexample:\nThis allows applications interfacing with Meson (such as IDEs) to know\nabout an overridden subproject directory.\nThe find_library() method can now also verify if the library's\nheaders are found in a single call, using the has_header() method\ninternally.\nAny keyword argument with the header_ prefix passed to\nfind_library() will be passed to the has_header() method with the\nprefix removed.\nNetCDF support for C, C++ and Fortran is added via pkg-config.\nFlang Fortran\ncompiler support was added.  As with other Fortran compilers, flang is\nspecified using FC=flang meson .. or similar.\nYou can now specify a not_found_message that will be printed if the\nspecified dependency was not found. The point is to convert constructs\nthat look like this:\nInto this:\nOr constructs like this:\ninto this:\nWhich works, because the default value of required is true.\nCompiling Cuda source code is now supported, though only with the\nNinja backend. This has been tested only on Linux for now.\nBecause NVidia's Cuda compiler does not produce .d dependency files,\ndependency tracking does not work.\nYou can pass environment\nobject to run_command, just\nlike to test:\nThe extract_objects function now supports File objects to tell it\nwhat to extract. Previously, file paths could only be passed as strings.\nAll paths used in the Meson introspection JSON format are now\nabsolute. This affects the filename key in the targets introspection\nand the output of --buildsystem-files.\nFurthermore, the filename and install_filename keys in the targets\nintrospection are now lists of strings with identical length.\nThe --target-files option is now deprecated, since the same information\ncan be acquired from the --tragets introspection API.\nThis release adds the functionality to perform some basic modification\non the meson.build files from the command line. The currently\nsupported operations are:\nFor more information see the rewriter documentation.\nIt is now possible to run meson introspect --scan-dependencies /path/to/meson.build without a configured build directory to scan for\ndependencies.\nThe output format is as follows:\nThe required keyword specifies whether the dependency is marked as\nrequired in the meson.build (all dependencies are required by\ndefault). The conditional key indicates whether the dependency()\nfunction was called inside a conditional block. In a real Meson run\nthese dependencies might not be used, thus they may not be required,\neven if the required key is set. The has_fallback key just\nindicates whether a fallback was directly set in the dependency()\nfunction.\nIt is now possible to run meson introspect --targets /path/to/meson.build without a configured build directory.\nThe generated output is similar to running the introspection with a\nbuild directory. However, there are some key differences:\nThere is no guarantee that the sources list in target_sources is\ncorrect. There might be differences, due to internal limitations. It\nis also not guaranteed that all targets will be listed in the output.\nIt might even be possible that targets are listed, which won't exist\nwhen Meson is run normally. This can happen if a target is defined\ninside an if statement. Use this feature with care.\nMeson introspect can now print the results of multiple introspection\ncommands in a single call. The results are then printed as a single\nJSON object.\nThe format for a single command was not changed to keep backward\ncompatibility.\nFurthermore the option -a,--all, -i,--indent and\n-f,--force-object-output were added to print all introspection\ninformation in one go, format the JSON output (the default is still\ncompact JSON) and force use the new output format, even if only one\nintrospection command was given.\nA complete introspection dump is also stored in the meson-info\ndirectory. This dump will be (re)generated each time meson updates the\nconfiguration of the build directory.\nAdditionlly the format of meson introspect target was changed:\nWith this release, it is also possible to get a list of all build\noptions by invoking meson configure with the project source\ndirectory or the path to the root meson.build. In this case, Meson\nwill print the default values of all options.\nHDF5 support is added via pkg-config.\nMeson now generates a meson-info.json file in the meson-info\ndirectory to provide introspection information about the latest Meson\nrun. This file is updated when the build configuration is changed and\nthe build files are (re)generated.\nPreviously when using configure_file(), you could install the\noutputted file by setting the install_dir: keyword argument. Now,\nthere is an explicit kwarg install: to enable/disable it. Omitting\nit will maintain the old behaviour.\n\nFor build targets:\n\nAdd/Remove source files\nAdd/Remove targets\nModify a select set of kwargs\nPrint some JSON information\n\n\nFor dependencies:\n\nModify a select set of kwargs\n\n\nFor the project function:\n\nModify a select set of kwargs\nModify the default options list\n\n\n\n\nAdd/Remove source files\nAdd/Remove targets\nModify a select set of kwargs\nPrint some JSON information\n\n\nModify a select set of kwargs\n\n\nModify a select set of kwargs\nModify the default options list\n\n\nThe paths in filename now are relative to the future build directory\nThe install_filename key is completely missing\nThere is only one entry in target_sources:\n\nWith the language set to unknown\n\nEmpty lists for compiler and parameters and generated_sources\n\nThe sources list should contain all sources of the target\n\n\n\n\nWith the language set to unknown\n\nEmpty lists for compiler and parameters and generated_sources\n\nThe sources list should contain all sources of the target\n\n\nNew: the sources key. It stores the source files of a target and their compiler parameters.\nNew: the defined_in key. It stores the Meson file where a target is defined\nNew: the subproject key. It stores the name of the subproject where a target is defined.\nAdded new target types (jar, shared module).\n\n"});