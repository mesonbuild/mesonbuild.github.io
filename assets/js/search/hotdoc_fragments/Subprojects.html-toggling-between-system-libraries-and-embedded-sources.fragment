fragment_downloaded_cb({"url":"Subprojects.html#toggling-between-system-libraries-and-embedded-sources","fragment":"Toggling between system libraries and embedded sources\nWhen building distro packages it is very important that you do not\nembed any sources. Some distros have a rule forbidding embedded\ndependencies so your project must be buildable without them or\notherwise the packager will hate you.\nHere's how you would use system libraries and fall back to embedding sources\nif the dependency is not available.\nBecause this is such a common operation, Meson provides a shortcut for\nthis use case.\nThe fallback keyword argument takes two items, the name of the\nsubproject and the name of the variable that holds the dependency. If\nyou need to do something more complicated, such as extract several\ndifferent variables, then you need to do it yourself with the manual\nmethod described above.\nUsing this shortcut the build definition would look like this.\nYou may change default options of the\nsubproject by\nadding a keyword argument to the invocation. For example, to change the\ndefault library type:\nWith this setup, when libsimple is provided by the system we use it and\ncompletely ignore subproject options (i.e. we link to a shared system\nlibrary). When that is not the case, we use the embedded version (the\none from subprojects).\nNote that libsimple_dep can point to an external or an internal\ndependency but you don't have to worry about their differences. Meson\nwill take care of the details for you.\n"});