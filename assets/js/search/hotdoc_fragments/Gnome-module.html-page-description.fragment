fragment_downloaded_cb({"url":"Gnome-module.html#page-description","fragment":"This module provides helper tools for build operations needed when\nbuilding Gnome/GLib programs.\nNote: the compilation commands here might not work properly when\nyou change the source files. This is a bug in the respective\ncompilers which do not expose the required dependency\ninformation. This has been reported upstream in this bug. Until\nthis is fixed you need to be careful when changing your source\nfiles.\nTo use this module, just do: gnome = import('gnome'). The\nfollowing functions will then be available as methods on the object\nwith the name gnome. You can, of course, replace the name gnome\nwith anything else.\nThis function compiles resources specified in an XML file into code\nthat can be embedded inside the main binary. Similar a build target it\ntakes two positional arguments. The first one is the name of the\nresource and the second is the XML file containing the resource\ndefinitions. If the name is foobar, Meson will generate a header\nfile called foobar.h, which you can then include in your sources.\nReturns an array containing: [c_source, header_file] or\n[gresource_bundle]\nExample:\nGenerates GObject introspection data.\nTakes one or more positional arguments:\nEither one or more library objects you want to build gir data for, or a single\nexecutable object.\nThere are several keyword arguments. Many of these map directly to the\ng-ir-scanner tool so see its documentation for more information.\nReturns an array of two elements which are: [gir_target, typelib_target]\nGenerates a marshal file using the glib-genmarshal tool. The first\nargument is the basename of the output files.\nAdded 0.35.0\nReturns an array of two elements which are: [c_source, header_file]\nGenerates enum files for GObject using the glib-mkenums tool. The\nfirst argument is the base name of the output files, unless\nc_template and h_template are specified. In this case, the output\nfiles will be the base name of the values passed as templates.\nThis method is essentially a wrapper around the glib-mkenums tool's\ncommand line API. It is the most featureful method for enum creation.\nTypically you either provide template files or you specify the various\ntemplate sections manually as strings.\nMost libraries and applications will be using the same standard\ntemplate with only minor tweaks, in which case the\ngnome.mkenums_simple() convenience method can be used instead.\nNote that if you #include the generated header in any of the sources\nfor a build target, you must add the generated header to the build\ntarget's list of sources to codify the dependency. This is true for\nall generated sources, not just mkenums.\nAdded 0.35.0\nReturns an array of two elements which are: [c_source, header_file]\nGenerates enum .c and .h files for GObject using the\nglib-mkenums tool with the standard template used by most\nGObject-based C libraries. The first argument is the base name of the\noutput files.\nNote that if you #include the generated header in any of the sources\nfor a build target, you must add the generated header to the build\ntarget's list of sources to codify the dependency. This is true for\nall generated sources, not just mkenums_simple.\nExample:\nAdded 0.42.0\nReturns an array of two elements which are: [c_source, header_file]\nWhen called, this method will compile the gschemas in the current\ndirectory. Note that this is not for installing schemas and is only\nuseful when running the application locally for example during tests.\nCompiles the given XML schema into gdbus source code. Takes two\npositional arguments, the first one specifies the base name to use\nwhile creating the output source and header and the second specifies\none XML file.\nStarting 0.46.0, this function returns a list of at least two custom\ntargets (in order): one for the source code and one for the header.\nThe list will contain a third custom target for the generated docbook\nfiles if that keyword argument is passed.\nEarlier versions return a single custom target representing all the\noutputs. Generally, you should just add this list of targets to a top\nlevel target's source list.\nExample:\nCreates a VAPI file from gir. The first argument is the name of the\nlibrary.\nReturns a custom dependency that can be included when building other\nVAPI or Vala binaries.\nAdded 0.36.0\nInstalls help documentation using Yelp. The first argument is the\nproject id.\nThis also creates two targets for translations\nhelp-$project-update-po and help-$project-pot.\nNote that very old versions of yelp may not support symlinked media;\nAt least 3.10 should work.\nAdded 0.36.0\nCompiles and installs gtkdoc documentation into\nprefix/share/gtk-doc/html. Takes one positional argument: The name\nof the module.\nThis also creates a $module-doc target that can be run to build\ndocumentation. Normally the documentation is only built on install.\nSince 0.52.0 Returns a target object that can be passed as\ndependency to other targets using generated doc files (e.g. in\ncontent_files of another doc).\nTakes as argument a module name and returns the path where that\nmodule's HTML files will be installed. Usually used with\ninstall_data to install extra files, such as images, to the output\ndirectory.\nSince 0.57.0\nPost-install update of various system wide caches. Each script will be executed\nonly once even if gnome.post_install() is called multiple times from multiple\nsubprojects. If DESTDIR is specified during installation all scripts will be\nskipped.\nIt takes the following keyword arguments:\n\n\nc_name: passed to the resource compiler as an argument after\n--c-name\n\n\ndependencies: extra targets to depend upon for building\n\nexport: (Added 0.37.0) if true, export the symbols of the\ngenerated sources\n\nextra_args: extra command line arguments to pass to the resource\n\ngresource_bundle: (Added 0.37.0) if true, output a .gresource\nfile instead of source\n\ninstall: (Added 0.37.0) if true, install the gresource file\n\ninstall_dir: (Added 0.37.0) location to install the header or\nbundle depending on previous options\n\ninstall_header: (Added 0.37.0) if true, install the header file\n\nsource_dir: a list of directories where the resource compiler\nshould look up the files\n\n\n\ndependencies: deps to use during introspection scanning\n\nextra_args: command line arguments to pass to gir compiler\n\nexport_packages: extra packages the gir file exports\n\nsources: the list of sources to be scanned for gir data\n\nnsversion: namespace version\n\nnamespace: the namespace for this gir object which determines\noutput files\n\nidentifier_prefix: the identifier prefix for the gir object,\ne.g. Gtk\n\n\nincludes: list of gir names to be included, can also be a GirTarget\n\nheader: (Added 0.43.0) name of main c header to include for the library, e.g. glib.h\n\n\ninclude_directories: extra include paths to look for gir files\n\ninstall: if true, install the generated files\n\ninstall_dir_gir: (Added 0.35.0) which directory to install the\ngir file into\n\ninstall_dir_typelib: (Added 0.35.0) which directory to install\nthe typelib file into\n\nlink_with: list of libraries to link with\n\nsymbol_prefix: the symbol prefix for the gir object, e.g. gtk,\n(Since 0.43.0) an ordered list of multiple prefixes is allowed\n\nfatal_warnings: Since 0.55.0 turn scanner warnings into fatal errors.\n\n\n\nextra_args: (Added 0.42.0) additional command line arguments to\npass\n\ninstall_header: if true, install the generated header\n\ninstall_dir: directory to install header to\n\nnostdinc: if true, don't include the standard marshallers from\nglib\n\ninternal: if true, mark generated sources as internal to\nglib-genmarshal (Requires GLib 2.54)\n\nprefix: the prefix to use for symbols\n\nskip_source: if true, skip source location comments\n\nstdinc: if true, include the standard marshallers from glib\n\nsources: the list of sources to use as inputs\n\nvalist_marshallers: if true, generate va_list marshallers\n\n\n\nc_template: template to use for generating the source\n\ncomments: comment passed to the command\n\nh_template: template to use for generating the header\n\nidentifier_prefix: prefix to use for the identifiers\n\ninstall_header: if true, install the generated header\n\ninstall_dir: directory to install the header\n\nsources: the list of sources to make enums with\n\nsymbol_prefix: prefix to use for the symbols\n\neprod: enum text\n\nfhead: file header\n\nfprod: file text\n\nftail: file tail\n\nvhead: value text\n\nvtail: value tail\n\n\n\nbody_prefix: additional prefix at the top of the body file,\ne.g. for extra includes\n\ndecorator: optional decorator for the function declarations,\ne.g. GTK_AVAILABLE or GST_EXPORT\n\n\nfunction_prefix: additional prefix for function names, e.g. in\ncase you want to add a leading underscore to functions used only\ninternally\n\nheader_prefix: additional prefix at the top of the header file,\ne.g. for extra includes (which may be needed if you specify a\ndecorator for the function declarations)\n\ninstall_header: if true, install the generated header\n\ninstall_dir: directory to install the header\n\nidentifier_prefix: prefix to use for the identifiers\n\nsources: the list of sources to make enums with\n\nsymbol_prefix: prefix to use for the symbols\n\n\n\nbuild_by_default: causes, when set to true, to have this target be\nbuilt by default, that is, when invoking plain meson compile, the default\nvalue is true for all built target types\n\ndepend_files: files (string,\nfiles(), or\nconfigure_file()) of\nschema source XML files that should trigger a re-compile if changed.\n\n\n\nsources: list of XML files\n\ninterface_prefix: prefix for the interface\n\nnamespace: namespace of the interface\n\nextra_args: (Added 0.47.0) additional command line arguments to pass\n\nautocleanup: (Added 0.47.0) if set generates autocleanup code. Can be one of none, objects or all\n\n\nobject_manager: (Added 0.40.0) if true generates object manager code\n\nannotations: (Added 0.43.0) list of lists of 3 strings for the annotation for 'ELEMENT', 'KEY', 'VALUE'\n\n\ndocbook: (Added 0.43.0) prefix to generate 'PREFIX'-NAME.xml docbooks\n\nbuild_by_default: causes, when set to true, to have this target be\nbuilt by default, that is, when invoking plain meson compile, the default\nvalue is true for all built target types\n\ninstall_dir: (Added 0.46.0) location to install the header or\nbundle depending on previous options\n\ninstall_header: (Added 0.46.0) if true, install the header file\n\n\n\ngir_dirs: extra directories to include for gir files\n\ninstall: if true, install the VAPI file\n\ninstall_dir: location to install the VAPI file (defaults to datadir/vala/vapi)\n\nmetadata_dirs: extra directories to include for metadata files\n\npackages: VAPI packages that are depended upon\n\nsources: the gir source to generate the VAPI from\n\nvapi_dirs: extra directories to include for VAPI files\n\n\n\nlanguages: list of languages for translations\n\nmedia: list of media such as images\n\nsources: list of pages\n\nsymlink_media: if media should be symlinked not copied (defaults to true since 0.42.0)\n\n\n\ncontent_files: a list of content files\n\ndependencies: a list of dependencies\n\nfixxref_args: a list of arguments to pass to gtkdoc-fixxref\n\n\ngobject_typesfile: a list of type files\n\ninclude_directories: extra include paths to pass to gtkdoc-scangobj\n\n\nignore_headers: a list of header files to ignore\n\nhtml_assets: a list of assets for the HTML pages\n\nhtml_args a list of arguments to pass to gtkdoc-mkhtml\n\n\ninstall: if true, installs the generated docs\n\ninstall_dir: the directory to install the generated docs relative\nto the gtk-doc html dir or an absolute path (default: module name)\n\nmain_xml: specifies the main XML file\n\nmain_sgml: equal to main_xml\n\n\nmkdb_args: a list of arguments to pass to gtkdoc-mkdb\n\n\nnamespace: specifies the name space to pass to gtkdoc-mkdb\n\n\nmodule_version: the version of the module, affects the installed location and the devhelp2 file location\n\nscan_args: a list of arguments to pass to gtkdoc-scan\n\n\nscanobjs_args: a list of arguments to pass to gtkdoc-scangobj\n\n\nc_args: (Added 0.48.0) additional compile arguments to pass\n\nsrc_dir: include_directories to include\n\ncheck: (Since 0.52.0) if true runs gtkdoc-check when running unit tests.\nNote that this has the downside of rebuilding the doc for each build, which is\noften very slow. It usually should be enabled only in CI.\n\n\n\nglib_compile_schemas: If set to true, update gschemas.compiled file in\n<prefix>/<datadir>/glib-2.0/schemas.\n\ngio_querymodules: List of directories relative to prefix where\ngiomodule.cache file will be updated.\n\ngtk_update_icon_cache: If set to true, update icon-theme.cache file in\n<prefix>/<datadir>/icons/hicolor.\n\n"});