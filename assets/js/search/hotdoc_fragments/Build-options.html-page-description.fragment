fragment_downloaded_cb({"url":"Build-options.html#page-description","fragment":"Most non-trivial builds require user-settable options. As an example a\nprogram may have two different data backends that are selectable at\nbuild time. Meson provides for this by having a option definition\nfile. Its name is meson_options.txt and it is placed at the root of\nyour source tree.\nHere is a simple option file.\nFor built-in options, see Built-in options.\nAll types allow a description value to be set describing the option,\nif no description is set then the name of the option will be used instead.\nThe string type is a free form string. If the default value is not set\nthen an empty string will be used as the default.\nBooleans may have values of either true or false. If no default\nvalue is supplied then true will be used as the default.\nA combo allows any one of the values in the choices parameter to be\nselected.  If no default value is set then the first value will be the\ndefault.\nAn integer option contains a single integer with optional upper and\nlower values that are specified with the min and max keyword\narguments.\nThis type is available since Meson version 0.45.0.\nArrays represent an array of strings. By default the array can contain\narbitrary strings. To limit the possible values that can used set the\nchoices parameter. Meson will then only allow the value array to\ncontain strings that are in the given list. The array may be\nempty. The value parameter specifies the default value of the option\nand if it is unset then the values of choices will be used as the\ndefault.\nAs of 0.47.0 -Dopt= and -Dopt=[] both pass an empty list, before this\n-Dopt= would pass a list with an empty string.\nThis type is available since version 0.44.0\nA feature option has three states: enabled, disabled or auto.\nIt is intended to be passed as value for the required keyword\nargument of most functions. Currently supported in\ndependency(),\nfind_library(),\nfind_program() and\nadd_languages() functions.\nWhen getting the value of this type of option using get_option(), a\nspecial feature option\nobject is returned instead\nof the string representation of the option's value. This object can be\npassed to required:\nTo check the value of the feature, the object has three methods\nreturning a boolean and taking no argument:\nThis is useful for custom code depending on the feature:\nIf the value of a feature option is set to auto, that value is\noverridden by the global auto_features option (which defaults to\nauto). This is intended to be used by packagers who want to have\nfull control on which dependencies are required and which are\ndisabled, and not rely on build-deps being installed (at the right\nversion) to get a feature enabled. They could set\nauto_features=enabled to enable all features and disable explicitly\nonly the few they don't want, if any.\nThis type is available since version 0.47.0\nThis function also allows you to query the value of Meson's built-in\nproject options. For example, to get the installation prefix you would\nissue the following command:\nIt should be noted that you can not set option values in your Meson\nscripts. They have to be set externally with the meson configure\ncommand line tool. Running meson configure without arguments in a\nbuild dir shows you all options you can set.\nTo change their values use the -D\noption:\nSetting the value of arrays is a bit special. If you only pass a\nsingle string, then it is considered to have all values separated by\ncommas. Thus invoking the following command:\nwould set the value to an array of two elements, foo and bar.\nIf you need to have commas in your string values, then you need to\npass the value with proper shell quoting like this:\nThe inner values must always be single quotes and the outer ones\ndouble quotes.\nTo change values in subprojects prepend the name of the subproject and\na colon:\nNOTE: If you cannot call meson configure you likely have a old\nversion of Meson. In that case you can call mesonconf instead, but\nthat is deprecated in newer versions\nSuppose you have a master project and a subproject. In some cases it\nmight be useful to have an option that has the same value in both of\nthem. This can be achieved with the yield keyword. Suppose you have\nan option definition like this:\nIf you build this project on its own, this option behaves like\nusual. However if you build this project as a subproject of another\nproject which also has an option called some_option, then calling\nget_option returns the value of the superproject. If the value of\nyield is false, get_option returns the value of the subproject's\noption.\nThere are a number of built-in options. To get the\ncurrent list execute meson configure in the build directory.\nThe backend_startup_project option can be set to define the default\nproject that will be executed with the \"Start debugging F5\" action in\nvisual studio. It should be the same name as an executable target\nname.\nThe backend_max_links can be set to limit the number of processes\nthat ninja will use to link.\n\n\nenabled is the same as passing required : true.\n\nauto is the same as passing required : false.\n\ndisabled do not look for the dependency and always return 'not-found'.\n\n\n.enabled()\n.disabled()\n.auto()\n\n"});