fragment_downloaded_cb({"url":"Meson-sample.html#page-description","fragment":"A Meson file that builds an executable looks like this.\nAll Meson build definitions begin with the project command. It\nspecifies the name of the project and what programming languages it\nuses. Here the project is called simple and it uses only the C\nprogramming language. All strings are single-quoted.\nOn the next line we define a build target, in this case an\nexecutable called myexe. It consists of one source file. This is all\nthe code that a user needs to write to compile an executable with\nMeson.\nVariables are fully supported. The above code snippet could also have\nbeen declared like this.\nMost executables consist of more than one source file. The easiest way\nto deal with this is to put them in an array.\nMeson also supports the notion of keyword arguments. Indeed most\narguments to functions can only be passed using them. The above\nsnippet could be rewritten like this.\nThese two formats are equivalent and choosing one over the other is\nmostly a question of personal preference.\nThe executable command actually returns an executable object,\nwhich represents the given build target. It can be passed on to other\nfunctions, like this.\nHere we create a unit test called simple test, and which uses the\nbuilt executable. When the tests are run with the meson test\ncommand, the built executable is run. If it returns zero, the test\npasses. A non-zero return value indicates an error, which Meson will\nthen report to the user.\nThere's a slight terminology difference between Meson and Visual\nStudio. A Meson project is the equivalent to a Visual Studio\nsolution. That is, the topmost thing that encompasses all things to\nbe built. A Visual Studio project on the other hand is the\nequivalent of a Meson top level build target, such as an executable or\na shared library.\n"});