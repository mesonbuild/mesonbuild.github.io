fragment_downloaded_cb({"url":"Release-notes-for-0-49-0.html#page-description","fragment":"Earlier, dependency('libgcrypt') could only detect the library with\npkg-config files. Now, if pkg-config files are not found, Meson will\nlook for libgcrypt-config and if it's found, will use that to find\nthe library.\nMeson now has a new section key in each build option. This allows\nIDEs to group these options similar to meson configure.\nThe possible values for section are:\nCross-compilation is now supported for Renesas RX targets with the\nCC-RX compiler.\nThe environment path should be set properly for the CC-RX compiler\nexecutables. The -cpu option with the appropriate value should be\nmentioned in the cross-file as shown in the snippet below.\nThe default extension of the executable output is .abs. Other target\nspecific arguments to the compiler and linker will need to be added\nexplicitly from the\ncross-file(c_args/c_link_args/cpp_args/cpp_link_args) or some\nother way. Refer to the CC-RX User's manual for additional compiler\nand linker options.\nMeson can now use the CMake find_package ecosystem to detect\ndependencies. Both the old-style <NAME>_LIBRARIES variables as well\nas imported targets are supported. Meson can automatically guess the\ncorrect CMake target in most cases but it is also possible to manually\nspecify a target with the modules property.\nCMake is automatically used after pkg-config fails when\nno method (or auto) was provided in the dependency options.\nThe compiler object now has get_argument_syntax method, which\nreturns a string value of gcc, msvc, or an undefined value string\nvalue. This can be used to determine if a compiler uses gcc syntax\n(-Wfoo), msvc syntax (/w1234), or some other kind of arguments.\nFunctions such as dependency(), find_library(), find_program(),\nand python.find_installation() have a new keyword argument:\ndisabler. When set to true those functions return Disabler()\nobjects instead of not-found objects.\nThis allows IDE integration to get information about the project\nbefore the user has configured a build directory.\nBefore you could use meson.py introspect --projectinfo build-directory. Now you also can use meson.py introspect --projectinfo project-dir/meson.build.\nThe output is similar to the output with a build directory but\nadditionally also includes information from introspect --buildsystem-files.\nFor example meson.py introspect --projectinfo test\\ cases/common/47\\ subproject\\ options/meson.build This outputs (pretty printed for\nreadability):\nBoth usages now include a new descriptive_name property which always\nshows the name set in the project.\nYou can now specify keyword arguments for any function and method call\nwith the kwargs keyword argument. This is perhaps best described\nwith an example:\nThe above code is identical to this:\nThat is, Meson will expand the dictionary given to kwargs as if the\nentries in it had been given as keyword arguments directly.\nNote that any individual argument can be specified either directly or\nwith the kwarg dict but not both. If a key is specified twice, it\nis a hard error.\nEarlier, the install_man command has automatically compressed\ninstalled manpages into .gz format. This collided with manpage\ncompression hooks already used by various distributions. Now, manpages\nare installed uncompressed and distributors are expected to handle\ncompressing them according to their own compression preferences.\nNative files (--native-file) are the counterpart to cross files\n(--cross-file), and allow specifying information about the build\nmachine, both when cross compiling and when not.\nCurrently the native files only allow specifying the names of\nbinaries, similar to the cross file, for example:\nWill override the llvm-config used for native binaries. Targets for\nthe host machine will continue to use the cross file.\nbreak and continue keywords can be used inside foreach loops.\nYou can check if an array contains an element like this:\nYou can check if a dictionary contains a key like this:\nFor clarity and conciseness, we recommend using the / operator to separate\npath elements:\nBefore Meson 0.49, joining path elements was done with the legacy\njoin_paths function, but the / syntax above is now recommended.\nThis only works for strings.\nWhen b_pie option, or executable()'s pie keyword argument is set\nto true, position-independent executables are built. All their\nobjects are built with -fPIE and the executable is linked with\n-pie. Any static library they link must be built with pic set to\ntrue (see b_staticpic option).\nAll libraries passed to the libraries keyword argument of the\ngenerate() method used to be associated with that generated\npkg-config file. That means that any subsequent call to generate()\nwhere those libraries appear would add the filebase of the\ngenerate() that first contained them into Requires: or\nRequires.private: field instead of adding an -l to Libs: or\nLibs.private:.\nThis behaviour is now deprecated. The library that should be\nassociated with the generated pkg-config file should be passed as\nfirst positional argument instead of in the libraries keyword\nargument. The previous behaviour is maintained but prints a\ndeprecation warning and support for this will be removed in a future\nMeson release. If you can not create the needed pkg-config file\nwithout this warning, please file an issue with as much details as\npossible about the situation.\nFor example this sample will write Requires: liba into libb.pc but\nprint a deprecation warning:\nIt can be fixed by passing liba as first positional argument::\nNew command-line tool has been added to manage subprojects:\nThe keyword argument is_default may be used to set whether the test\nsetup should be used by default whenever meson test is run without\nthe --setup option.\nFor the example above, running meson test and meson test --setup=default is now equivalent.\n\ncore\nbackend\nbase\ncompiler\ndirectory\nuser\ntest\n\n\n\nmeson subprojects download to download all subprojects that have a wrap file.\n\nmeson subprojects update to update all subprojects to latest version.\n\nmeson subprojects checkout to checkout or create a branch in all git subprojects.\n\n"});