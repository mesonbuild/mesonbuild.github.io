fragment_downloaded_cb({"url":"Release-notes-for-0-49-0.html#page-description","fragment":"Earlier, dependency('libgcrypt') could only detect the library with pkg-config\nfiles. Now, if pkg-config files are not found, Meson will look for\nlibgcrypt-config and if it's found, will use that to find the library.\nMeson now has a new section key in each build option. This allows\nIDEs to group these options similar to meson configure.\nThe possible values for section are:\nCross-compilation is now supported for Renesas RX targets with the\nCC-RX compiler.\nThe environment path should be set properly for the CC-RX compiler\nexecutables.  The -cpu option with the appropriate value should be\nmentioned in the cross-file as shown in the snippet below.\nThe default extension of the executable output is .abs.  Other\ntarget specific arguments to the compiler and linker will need to be\nadded explicitly from the\ncross-file(c_args/c_link_args/cpp_args/cpp_link_args) or some\nother way.  Refer to the CC-RX User's manual for additional compiler\nand linker options.\nMeson can now use the CMake find_package ecosystem to\ndetect dependencies. Both the old-style <NAME>_LIBRARIES\nvariables as well as imported targets are supported. Meson\ncan automatically guess the correct CMake target in most\ncases but it is also possible to manually specify a target\nwith the modules property.\nCMake is automatically used after pkg-config fails when\nno method (or auto) was provided in the dependency options.\nThe compiler object now has get_argument_syntax method, which returns a\nstring value of gcc, msvc, or an undefined value string value. This can be\nused to determine if a compiler uses gcc syntax (-Wfoo), msvc syntax\n(/w1234), or some other kind of arguments.\nFunctions such as dependency(), find_library(), find_program(), and\npython.find_installation() have a new keyword argument: disabler. When set\nto true those functions return Disabler() objects instead of not-found\nobjects.\nThis allows IDE integration to get information about the project before the user has configured a build directory.\nBefore you could use meson.py introspect --projectinfo build-directory.\nNow you also can use meson.py introspect --projectinfo project-dir/meson.build.\nThe output is similar to the output with a build directory but additionally also includes information from introspect --buildsystem-files.\nFor example meson.py introspect --projectinfo test\\ cases/common/47\\ subproject\\ options/meson.build\nThis outputs (pretty printed for readability):\nBoth usages now include a new descriptive_name property which always\nshows the name set in the project.\nYou can now specify keyword arguments for any function and method call\nwith the kwargs keyword argument. This is perhaps best described\nwith an example:\nThe above code is identical to this:\nThat is, Meson will expand the dictionary given to kwargs as if the\nentries in it had been given as keyword arguments directly.\nNote that any individual argument can be specified either directly or\nwith the kwarg dict but not both. If a key is specified twice, it\nis a hard error.\nEarlier, the install_man command has automatically compressed installed\nmanpages into .gz format. This collided with manpage compression hooks\nalready used by various distributions. Now, manpages are installed uncompressed\nand distributors are expected to handle compressing them according to their own\ncompression preferences.\nNative files (--native-file) are the counterpart to cross files (--cross-file),\nand allow specifying information about the build machine, both when cross compiling\nand when not.\nCurrently the native files only allow specifying the names of binaries, similar\nto the cross file, for example:\nWill override the llvm-config used for native binaries. Targets for the host\nmachine will continue to use the cross file.\nbreak and continue keywords can be used inside foreach loops.\nYou can check if an array contains an element like this:\nYou can check if a dictionary contains a key like this:\nFor clarity and conciseness, we recommend using the / operator to separate\npath elements:\nBefore Meson 0.49, joining path elements was done with the legacy join_paths\nfunction, but the / syntax above is now recommended.\nThis only works for strings.\nWhen b_pie option, or executable()'s pie keyword argument is set to\ntrue, position-independent executables are built. All their objects are built\nwith -fPIE and the executable is linked with -pie. Any static library they\nlink must be built with pic set to true (see b_staticpic option).\nAll libraries passed to the libraries keyword argument of the generate()\nmethod used to be associated with that generated pkg-config file. That means\nthat any subsequent call to generate() where those libraries appear would add\nthe filebase of the generate() that first contained them into Requires: or\nRequires.private: field instead of adding an -l to Libs: or Libs.private:.\nThis behaviour is now deprecated. The library that should be associated with\nthe generated pkg-config file should be passed as first positional argument\ninstead of in the libraries keyword argument. The previous behaviour is\nmaintained but prints a deprecation warning and support for this will be removed\nin a future Meson release. If you can not create the needed pkg-config file\nwithout this warning, please file an issue with as much details as possible\nabout the situation.\nFor example this sample will write Requires: liba into libb.pc but print a\ndeprecation warning:\nIt can be fixed by passing liba as first positional argument::\nNew command-line tool has been added to manage subprojects:\nThe keyword argument is_default may be used to set whether the test\nsetup should be used by default whenever meson test is run without\nthe --setup option.\nFor the example above, running meson test and meson test --setup=default is now equivalent.\n\ncore\nbackend\nbase\ncompiler\ndirectory\nuser\ntest\n\n\n\nmeson subprojects download to download all subprojects that have a wrap file.\n\nmeson subprojects update to update all subprojects to latest version.\n\nmeson subprojects checkout to checkout or create a branch in all git subprojects.\n\n"});