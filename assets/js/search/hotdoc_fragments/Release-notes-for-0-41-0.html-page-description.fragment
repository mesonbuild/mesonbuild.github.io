fragment_downloaded_cb({"url":"Release-notes-for-0-41-0.html#page-description","fragment":"Native support for linking against LLVM using the dependency function.\nThe fallback keyword in vcs_tag() is now optional. If not given,\nits value defaults to the return value of meson.project_version().\nThe ninja backend now quotes special characters that may be\ninterpreted by ninja itself, providing better interoperability with\ncustom commands. This support may not be perfect; please report any\nissues found with special characters to the issue tracker.\nThe Pkgconfig module object can add arbitrary variables to the generated .pc\nfile with the new variables keyword:\nCreating distribution tarballs is simple:\nThis will create a .tar.xz archive of the source code including\nsubmodules without any revision control information. This command also\nverifies that the resulting archive can be built, tested and\ninstalled. This is roughly equivalent to the distcheck target in\nother build systems. Currently this only works for projects using Git\nand only with the Ninja backend.\nTargets for building rust now take a rust_args keyword.\nCode coverage can be generated for tests by passing the --cov argument to\nthe run_tests.py test runner. Note, since multiple processes are used,\ncoverage must be combined before producing a report (coverage3 combine).\nAll known issues have been fixed and Meson can now build reproducible Debian\npackages out of the box.\nThe output argument of configure_file() is parsed for @BASENAME@ and\n@PLAINNAME@ substitutions.\nThe new needs_exe_wrapper property allows overriding auto-detection for\ncases where build_machine appears to be compatible with host_machine,\nbut actually isn't. For example when:\nconfigure_file() now supports a new keyword - capture. When this argument\nis set to true, Meson captures stdout of the command and writes it to\nthe target file specified as output.\n\n\nbuild_machine is macOS and host_machine is the iOS Simulator\nthe build_machine's libc is glibc but the host_machine libc is uClibc\ncode relies on kernel features not available on the build_machine\n\n\n"});