fragment_downloaded_cb({"url":"Reference-manual.html#build-target-object","fragment":"\nbuild target object\nA build target is either an executable, shared\nlibrary, static library, both\nshared and static library or shared\nmodule.\nextract_all_objects(): is same as extract_objects but returns all\nobject files generated by this target. (since 0.46.0) keyword argument\nrecursive must be set to true to also return objects passed to\nthe object argument of this target. By default only objects built\nfor this target are returned to maintain backward compatibility with\nprevious versions.  The default will eventually be changed to true\nin a future version.\nextract_objects(source1, source2, ...): takes as its arguments\na number of source files as string or\nfiles() and returns an opaque value representing the\nobject files generated for those source files. This is typically used\nto take single object files and link them to unit tests or to compile\nsome source files with custom flags. To use the object file(s)\nin another build target, use the objects: keyword argument.\nfull_path(): returns a full path pointing to the result target file.\nNOTE: In most cases using the object itself will do the same job as\nthis and will also allow Meson to setup inter-target dependencies\ncorrectly. Please file a bug if that doesn't work for you.\nprivate_dir_include(): returns a opaque value that works like\ninclude_directories but points to the private directory of this\ntarget, usually only needed if an another target needs to access\nsome generated internal headers of this target\nname() (since 0.54.0): returns the target name.\n\n\nextract_all_objects(): is same as extract_objects but returns all\nobject files generated by this target. (since 0.46.0) keyword argument\nrecursive must be set to true to also return objects passed to\nthe object argument of this target. By default only objects built\nfor this target are returned to maintain backward compatibility with\nprevious versions.  The default will eventually be changed to true\nin a future version.\n\n\nextract_objects(source1, source2, ...): takes as its arguments\na number of source files as string or\nfiles() and returns an opaque value representing the\nobject files generated for those source files. This is typically used\nto take single object files and link them to unit tests or to compile\nsome source files with custom flags. To use the object file(s)\nin another build target, use the objects: keyword argument.\n\n\nfull_path(): returns a full path pointing to the result target file.\nNOTE: In most cases using the object itself will do the same job as\nthis and will also allow Meson to setup inter-target dependencies\ncorrectly. Please file a bug if that doesn't work for you.\n\n\nprivate_dir_include(): returns a opaque value that works like\ninclude_directories but points to the private directory of this\ntarget, usually only needed if an another target needs to access\nsome generated internal headers of this target\n\n\nname() (since 0.54.0): returns the target name.\n\n\n"});