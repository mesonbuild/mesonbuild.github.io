fragment_downloaded_cb({"url":"Reference-manual_returned_compiler.html#arguments4","fragment":"Arguments\nThe method compiler.find_library() accepts the following positional arguments:\nThe library to find.\n\nFinally, compiler.find_library()\naccepts the following keyword arguments:\nUsed to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia -Isome/path/to/header is generally supported, however, usually not\nrecommended.\nThis is because include directories can also be specified via the\ninclude_directories or the dependency kwarg (if present).\nThe same is also true for passing libraries to link with -lfoo.\nAdditionally dependencies required for compiling and / or linking.\nAdditional directories to search in.\nBy default the library is searched for in the system library directory\n(e.g. /usr/lib). Specifying more directories here, causes Meson to search\nin those directories as well as the system directories.\nIf true, this method will return a disabler on a failed check.\n(since 0.49.0)\ndefault =\n  false\nList of headers that must be found as well.\nThis is check is equivalent to checking each herader with an\ncompiler.has_header() call.\n(since 0.50.0)\nExtra directories for header searches.\n(since 0.38.0)\nWhen set to true, the compiler arguments controlled by built-in configuration options are not added.\ndefault =\n  false\nUsed to add #includes and other things that are required\nfor the symbol to be declared. System definitions should be\npassed via compiler args (eg: _GNU_SOURCE is often required for\nsome symbols to be exposed on Linux, and it should be passed via\nargs keyword argument).\nIf set true, Meson will abort with an error if the library could not\nbe found. Otherwise, Meson will continue and the found method of the\nreturned object will return false.\n(since 0.47.0) The value of a feature\noption can also be passed here.\ndefault =\n  true\nIf true, the search is limited to static libraries only.\nSetting this value to false (the default) will search for both shared\nand static libraries.\n(since 0.51.0)\ndefault =\n  false\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        libname\n        str\n        \n        \nThe library to find.\n  \n        \n\n  \n  \n      \n    \n  \n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        args\n        \nlist[str]\n        \n        \nUsed to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia -Isome/path/to/header is generally supported, however, usually not\nrecommended.\nThis is because include directories can also be specified via the\ninclude_directories or the dependency kwarg (if present).\nThe same is also true for passing libraries to link with -lfoo.\n  \n        \n\n  \n  \n      \n      \n        dependencies\n        \ndep | list[dep]\n        \n        \nAdditionally dependencies required for compiling and / or linking.\n  \n        \n\n  \n  \n      \n      \n        dirs\n        \nlist[str]\n        \n        \nAdditional directories to search in.\nBy default the library is searched for in the system library directory\n(e.g. /usr/lib). Specifying more directories here, causes Meson to search\nin those directories as well as the system directories.\n  \n        \n\n  \n  \n      \n      \n        disabler\n        bool\n        \n        \nIf true, this method will return a disabler on a failed check.\n  \n        \n\n  (since 0.49.0)\n  default =\n  false\n  \n  \n      \n      \n        has_headers\n        \nlist[str]\n        \n        \nList of headers that must be found as well.\nThis is check is equivalent to checking each herader with an\ncompiler.has_header() call.\n  \n        \n\n  (since 0.50.0)\n  \n  \n      \n      \n        include_directories\n        \ninc | list[inc]\n        \n        \nExtra directories for header searches.\n  \n        \n\n  (since 0.38.0)\n  \n  \n      \n      \n        no_builtin_args\n        bool\n        \n        \nWhen set to true, the compiler arguments controlled by built-in configuration options are not added.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        prefix\n        str\n        \n        \nUsed to add #includes and other things that are required\nfor the symbol to be declared. System definitions should be\npassed via compiler args (eg: _GNU_SOURCE is often required for\nsome symbols to be exposed on Linux, and it should be passed via\nargs keyword argument).\n  \n        \n\n  \n  \n      \n      \n        required\n        \nbool | feature\n\n        \n        \nIf set true, Meson will abort with an error if the library could not\nbe found. Otherwise, Meson will continue and the found method of the\nreturned object will return false.\n(since 0.47.0) The value of a feature\noption can also be passed here.\n  \n        \n\n  default =\n  true\n  \n  \n      \n      \n        static\n        bool\n        \n        \nIf true, the search is limited to static libraries only.\nSetting this value to false (the default) will search for both shared\nand static libraries.\n  \n        \n\n  (since 0.51.0)\n  default =\n  false\n  \n  \n      \n    \n  \n"});