fragment_downloaded_cb({"url":"Running-Meson.html#configuring-the-build-directory","fragment":"Configuring the build directory\nLet us assume that we have a source tree that has a Meson build\nsystem. This means that at the topmost directory has a file called\nmeson.build. We run the following commands to get the build started.\nWe invoke Meson with the setup command, giving it the location of the build\ndirectory. Meson uses out of source\nbuilds.\nHint: The syntax of Meson is meson [command] [arguments] [options].\nThe setup command takes a builddir and a srcdir argument. If no\nsrcdir is given Meson will deduce the srcdir based on pwd and\nthe location of meson.build.\nMeson then loads the build configuration file and writes the\ncorresponding build backend in the build directory. By default Meson\ngenerates a debug build, which turns on basic warnings and debug\ninformation and disables compiler optimizations.\nAdditionally, the invocation can pass options to Meson. The list of\noptions is documented here.\nYou can specify a different type of build with the --buildtype command line\nargument. It can have one of the following values.\nThe build directory is mandatory. The reason for this is that it\nsimplifies the build process immensely. Meson will not, under any\ncircumstances, write files inside the source directory (if it does, it\nis a bug and should be fixed). This means that the user does not need\nto add a bunch of files to their revision control's ignore list. It\nalso means that you can create arbitrarily many build directories for\nany given source tree.\nFor example, if we wanted to test building the source code with the\nClang compiler instead of the system default, we could just type the\nfollowing commands:\nThis separation is even more powerful if your code has multiple\nconfiguration options (such as multiple data backends). You can create\na separate subdirectory for each of them. You can also have build\ndirectories for optimized builds, code coverage, static analysis and\nso on. They are all neatly separated and use the same source tree.\nChanging between different configurations is just a question of\nchanging to the corresponding directory.\nUnless otherwise mentioned, all following command line invocations are\nmeant to be run in the source directory.\nBy default, Meson will use the Ninja backend to build your project. If\nyou wish to use any of the other backends, you need to pass the\ncorresponding argument during configuration time. As an example, here\nis how you would use Meson to generate a Visual Studio solution.\nYou can then open the generated solution with Visual Studio and\ncompile it in the usual way. A list of backends can be obtained with\nmeson setup --help.\n\n\n\n value\n meaning\n\n\n\n\n plain\n\n no extra build flags are used, even for compiler warnings, useful for distro packagers and other cases where you need to specify all arguments by yourself\n\n\n debug\n\n debug info is generated but the result is not optimized, this is the default\n\n\n debugoptimized\n\n debug info is generated and the code is optimized (on most compilers this means -g -O2)\n\n\n release\n\n full optimization, no debug info\n\n\n\n"});