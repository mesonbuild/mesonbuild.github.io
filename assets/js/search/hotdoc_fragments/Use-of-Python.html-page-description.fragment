fragment_downloaded_cb({"url":"Use-of-Python.html#page-description","fragment":"Meson is implemented in Python. This has both positive and negative\nsides. The main thing people seem to be mindful about is the\ndependency on Python to build source code. This page discusses various\naspects of this problem.\nThere have been many Python programs that are difficult to maintain on\nmultiple platforms. The reasons come mostly from dependencies. The\nprogram may use dependencies that are hard to compile on certain\nplatforms, are outdated, conflict with other dependencies, not\navailable on a given Python version and so on.\nMeson avoids dependency problems with one simple rule: Meson is not\nallowed to have any dependencies outside the Python basic library. The\nonly thing you need is Python 3 (and possibly Ninja).\nMeson has been designed in such a way that the implementation language\nis never exposed in the build definitions. This makes it possible (and\nmaybe even easy) to reimplement Meson in any other programming\nlanguage. There are currently no plans to reimplement Meson, but we\nwill make sure that Python is not exposed inside the build\ndefinitions.\nThere is no one technical solution or programming language that works\nnatively on all operating systems currently in use. When Autotools was\ndesigned in the late 80s, Unix shell was available pretty much\nanywhere. This is no longer the case.\nIt is also the case that as any project gets larger, sooner or later\nit requires code generation, scripting or other tooling. This seems to\nbe inevitable. Because there is no scripting language that would be\navailable everywhere, these tools either need to be rewritten for each\nplatform (which is a lot of work and is prone to errors) or the\nproject needs to take a dependency on something.\nAny project that uses Meson (at least the current version) can rely on\nthe fact that Python 3 will always be available, because you can't\ncompile the project without it. All tooling can then be done in Python\n3 with the knowledge that it will run on any platform without any\nextra dependencies (modulo the usual porting work). This reduces\nmaintenance effort on multiplatform projects by a fair margin.\n"});