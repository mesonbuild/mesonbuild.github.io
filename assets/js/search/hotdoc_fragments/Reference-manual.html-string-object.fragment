fragment_downloaded_cb({"url":"Reference-manual.html#string-object","fragment":"\nstring object\nAll strings have the following methods. Strings\nare immutable, all operations return their results as a new string.\ncontains(string): returns true if string contains the string\nspecified as the argument.\nendswith(string): returns true if string ends with the string\nspecified as the argument.\nformat(): formats text, see the Syntax\nmanual for usage info.\njoin(list_of_strings): the opposite of split, for example\n'.'.join(['a', 'b', 'c'] yields 'a.b.c'.\n(Since 0.60.0) more than one argument is supported and lists will be flattened.\nreplace('old_substr', 'new_str') (since 0.58.0): replaces instances of\nold_substr in the string with new_str and returns a new string\nsplit(split_character): splits the string at the specified\ncharacter (or whitespace if not set) and returns the parts in an\narray.\nstartswith(string): returns true if string starts with the string\nspecified as the argument\nsubstring(start,end) (since 0.56.0): returns a substring specified from start to end.\nBoth start and end arguments are optional, so, for example, 'foobar'.substring() will return 'foobar'.\nstrip(): removes whitespace at the beginning and end of the string.\n(since 0.43.0) Optionally can take one positional string argument,\nand all characters in that string will be stripped.\nto_int(): returns the string converted to an integer (error if string\nis not a number).\nto_lower(): creates a lower case version of the string.\nto_upper(): creates an upper case version of the string.\nunderscorify(): creates a string where every non-alphabetical\nnon-number character is replaced with _.\nversion_compare(comparison_string): does semantic version\ncomparison, if x = '1.2.3' then x.version_compare('>1.0.0')\nreturns true.\n\n\ncontains(string): returns true if string contains the string\nspecified as the argument.\n\n\nendswith(string): returns true if string ends with the string\nspecified as the argument.\n\n\nformat(): formats text, see the Syntax\nmanual for usage info.\n\n\njoin(list_of_strings): the opposite of split, for example\n'.'.join(['a', 'b', 'c'] yields 'a.b.c'.\n(Since 0.60.0) more than one argument is supported and lists will be flattened.\n\n\nreplace('old_substr', 'new_str') (since 0.58.0): replaces instances of\nold_substr in the string with new_str and returns a new string\n\n\nsplit(split_character): splits the string at the specified\ncharacter (or whitespace if not set) and returns the parts in an\narray.\n\n\nstartswith(string): returns true if string starts with the string\nspecified as the argument\n\n\nsubstring(start,end) (since 0.56.0): returns a substring specified from start to end.\nBoth start and end arguments are optional, so, for example, 'foobar'.substring() will return 'foobar'.\n\n\nstrip(): removes whitespace at the beginning and end of the string.\n(since 0.43.0) Optionally can take one positional string argument,\nand all characters in that string will be stripped.\n\n\nto_int(): returns the string converted to an integer (error if string\nis not a number).\n\n\nto_lower(): creates a lower case version of the string.\n\n\nto_upper(): creates an upper case version of the string.\n\n\nunderscorify(): creates a string where every non-alphabetical\nnon-number character is replaced with _.\n\n\nversion_compare(comparison_string): does semantic version\ncomparison, if x = '1.2.3' then x.version_compare('>1.0.0')\nreturns true.\n\n\n"});