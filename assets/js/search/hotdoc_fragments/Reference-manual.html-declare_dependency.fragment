fragment_downloaded_cb({"url":"Reference-manual.html#declare_dependency","fragment":"declare_dependency()\nThis function returns a dependency object that\nbehaves like the return value of dependency but is\ninternal to the current build. The main use case for this is in\nsubprojects. This allows a subproject to easily specify how it should\nbe used. This makes it interchangeable with the same dependency that\nis provided externally by the system. This function has the following\nkeyword arguments:\n\n\ncompile_args: compile arguments to use.\n\ndependencies: other dependencies needed to use this dependency.\n\ninclude_directories: the directories to add to header search path,\nmust be include_directories objects or (since 0.50.0) plain strings\n\nlink_args: link arguments to use.\n\nlink_with: libraries to link against.\n\nlink_whole (since 0.46.0): libraries to link fully, same as executable.\n\nsources: sources to add to targets (or generated header files\nthat should be built before sources including them are built)\n\nversion: the version of this dependency, such as 1.2.3. Defaults to the\nproject version.\n\nvariables (since 0.54.0): a dictionary of arbitrary strings, this is meant to be used\nin subprojects where special variables would be provided via cmake or\npkg-config. since 0.56.0 it can also be a list of 'key=value' strings.\n\n"});