fragment_downloaded_cb({"url":"Release-notes-for-0-48-0.html#page-description","fragment":"Since the very beginning Meson has provided different project types to\nuse, such as debug and minsize. There is also a plain type that\nadds nothing by default but instead makes it the user's responsibility\nto add everything by hand. This works but is a bit tedious.\nIn this release we have added new new options to manually toggle\ne.g. optimization levels and debug info so those can be changed\nindependently of other options. For example by default the debug\nbuildtype has no optmization enabled at all. If you wish to use GCC's\n-Og instead, you could set it with the following command:\nSimilarly we have added a toggle option to select the version of\nVisual Studio C runtime to use. By default it uses the debug runtime\nDLL debug builds and release DLL for release builds but this can be\nmanually changed with the new base option b_vscrt.\nIf two calls to configure_file()\nwrite to the same file Meson will print a WARNING: message during\nconfiguration. For example:\nThis will output:\nThis keyword argument conflicts with capture, and is meant for\ncommands that are resource-intensive and take a long time to\nfinish. With the Ninja backend, setting this will add this target to\nNinja's console\npool,\nwhich has special properties such as not buffering stdout and\nserializing all targets in this pool.\nThe primary use-case for this is to be able to run external commands\nthat take a long time to exeute. Without setting this, the user does\nnot receive any feedback about what the program is doing.\nPreviously, version constraints were only enforced for dependencies found using\nthe pkg-config dependency provider.  These constraints now apply to dependencies\nfound using any dependency provider.\nSome combinations of dependency, host and method do not currently support\ndiscovery of the version.  In these cases, the dependency will not be found if a\nversion constraint is applied, otherwise the version() method for the\ndependency object will return 'unknown'.\n(If discovering the version in one of these combinations is important to you,\nand a method exists to determine the version in that case, please file an issue\nwith as much information as possible.)\nA generic module python has been added in Meson 0.46.0 and has a superset of\nthe features implemented by the previous python3 module.\nIn most cases, it is a simple matter of renaming:\nbecomes\nDictionaries can now be added, values from the second dictionary overrides values\nfrom the first\nYou can now specify scripts that are run as part of the dist\ntarget. An example usage would go like this:\nA new command line option has been added: --fatal-meson-warnings. When enabled, any\nwarning message printed by Meson will be fatal and raise an exception. It is\nintended to be used by developers and CIs to easily catch deprecation warnings,\nor any other potential issues.\nA set of new helpers have been added to the C and C++ compiler objects for\nchecking GNU style function attributes. These are not just simpler to use, they\nmay be optimized to return fast on compilers that don't support these\nattributes. Currently this is true for MSVC.\nWould replace code like:\nAdditionally, a multi argument version has been added:\nThe GNOME module can now generate a single gir for multiple libraries, which\nis something g-ir-scanner supported, but had not been exposed yet.\ngnome.generate_gir() will now accept multiple positional arguments, if none\nof these arguments are an Executable instance.\nA new module has been written to ease generation of\nhotdoc based documentation. It supports\ncomplex use cases such as hotdoc subprojects (to create documentation\nportals) and makes it straight forward to leverage full capabilities\nof hotdoc.\nSimple usage:\nFilename substitutions like @BASENAME@ and @PLAINNAME@ were previously\naccepted but the name of the build target wasn't altered leading to\ncolliding target names when using the substitution twice.\ni18n.merge_file() now behaves as custom_target() in this regard.\nIt has been a longstanding bug (or let's call it a \"delayed bug fix\")\nthat if you do this:\nThen the flag is used both in native and cross compilations. This is\nvery confusing and almost never what you want. To fix this a new\nkeyword native has been added to all functions that add arguments,\nnamely add_global_arguments, add_global_link_arguments,\nadd_project_arguments and add_project_link_arguments that behaves\nlike the following:\nAlso remember that cross compilation is a property of each\ntarget. There can be target that are compiled with the native compiler\nand some which are compiled with the cross compiler.\nUnfortunately this change is backwards incompatible and may cause some\nprojects to fail building. However this should be very rare in practice.\nIt is now possible to pass an executable to\noverride_find_program() if the overridden program is not used during\nconfigure.\nThis is particularly useful for fallback dependencies like Protobuf\nthat also provide a tool like protoc.\nNow, by default shared_library() sets -compatibility_version and\n-current_version of a macOS dylib using the soversion.\nThis can be overridden by using the darwin_versions: kwarg to\nshared_library(). As usual, you can\nalso pass this kwarg to library() or build_target() and it will be used in\nthe appropriate circumstances.\ndependency(version:) and other version constraints now handle versions\ncontaining non-numeric characters better, comparing versions using the rpmvercmp\nalgorithm (as using the pkg-config autoconf macro PKG_CHECK_MODULES does).\nThis is a breaking change for exact comparison constraints which rely on the\nprevious comparison behaviour of extending the compared versions with '0'\nelements, up to the same length of '.'-separated elements.\nFor example, a version of '0.11.0' would previously match a version constraint\nof '==0.11', but no longer does, being instead considered strictly greater.\nInstead, use a version constraint which exactly compares with the precise\nversion required, e.g. '==0.11.0'.\nBuild targets got a new keyword, gnu_symbol_visibility that controls\nhow symbols are exported from shared libraries. This is most commonly\nused to hide implementation symbols like this:\nIn this case only symbols explicitly marked as visible in the source\nfiles get exported.\nTo enable this, the following needs to be added to the .wrap file:\nThis allows you to declare an optional subproject. You can now call found()\non the return value of the subproject() call to see if the subproject is\navailable before calling get_variable() to fetch information from it.\nYou can now fetch the name of the dependency that was searched like so:\n"});