fragment_downloaded_cb({"url":"Mixing-build-systems.html#page-description","fragment":"Meson has been designed with the principle that all dependencies are\neither provided by \"the platform\" via a mechanism such as Pkg-Config\nor that they are built as Meson subprojects under the main project.\nThere are several projects that would like to mix build systems, that\nis, build dependencies in the same build directory as the other build\nsystem by having one build system call the other. The build\ndirectories do not necessarily need to be inside each other, but that\nis the common case.\nThis page lists the Meson project's stance on mixing build systems.\nThe tl/dr version is that while we do provide some functionality for\nthis use case, it only works for simple cases. Anything more complex\ncan not be made reliable and trying to do that would burden Meson\ndevelopers with an effectively infinite maintenance burden. Thus these\nuse cases are not guaranteed to work, and even if a project using them\nworks today there are no guarantees that it will work in any future\nversion.\nFor the purposes of this page, mixing build systems means any and all\nmechanisms where one build system uses build artifacts from a\ndifferent build system's build directory in any way.\nNote that this definition does not specify what the dependencies are\nand how they are built, only how they are consumed. For example\nsuppose you have a standalone dependency library that builds with\nbuild system X. In this case having Meson call the build system to\nbuild the dependency at build time would be interpreted as mixing\nbuild systems. On the other hand a \"Flatpak-like\" approach of building\nand installing the library with an external mechanism and consuming it\nvia a standard build-system agnostic method such as Pkg-Config would\nnot be considered build system mixing. Use of uninstalled-pkgconfig\nfiles is considered mixing, though.\nThe Meson project will not take on any maintenance burden to ensure\nanything other than the simple builds setups as discussed above will\nwork. Nor will we make changes to support these use cases that would\nworsen the user experience of users of plain Meson. This includes, but\nis not limited to, the following:\nAny changes in other build systems that cause mixed project breakage\nwill not be considered a bug in Meson.\nBreakages in mixed build projects will not be considered regressions\nand such problems will never be considered release blockers,\nregardless of what the underlying issue is.\nAny use case that would require major changes in Meson to work\naround missing or broken functionality in the other build system is\nnot supported. These issues must be fixed upstream.\n\n\nAny changes in other build systems that cause mixed project breakage\nwill not be considered a bug in Meson.\n\n\nBreakages in mixed build projects will not be considered regressions\nand such problems will never be considered release blockers,\nregardless of what the underlying issue is.\n\n\nAny use case that would require major changes in Meson to work\naround missing or broken functionality in the other build system is\nnot supported. These issues must be fixed upstream.\n\n\n"});