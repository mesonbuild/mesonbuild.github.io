fragment_downloaded_cb({"url":"Dependencies.html#dependencies","fragment":"Dependencies\nVery few applications are fully self-contained, but rather they use\nexternal libraries and frameworks to do their work. Meson makes it\nvery easy to find and use external dependencies. Here is how one would\nuse the zlib compression library.\nFirst Meson is told to find the external library zlib and error out\nif it is not found. The version keyword is optional and specifies a\nversion requirement for the dependency. Then an executable is built\nusing the specified dependency. Note how the user does not need to\nmanually handle compiler or linker flags or deal with any other\nminutiae.\nIf you have multiple dependencies, pass them as an array:\nIf the dependency is optional, you can tell Meson not to error out if\nthe dependency is not found and then do further configuration.\nYou can pass the opt_dep variable to target construction functions\nwhether the actual dependency was found or not. Meson will ignore\nnon-found dependencies.\nMeson also allows to get variables that are defined in the\npkg-config file. This can be done by using the\nget_pkgconfig_variable function.\nThese variables can also be redefined by passing the define_variable\nparameter, which might be useful in certain situations:\nThe dependency detector works with all libraries that provide a\npkg-config file. Unfortunately several packages don't provide\npkg-config files. Meson has autodetection support for some of these,\nand they are described later in this\npage.\n"});