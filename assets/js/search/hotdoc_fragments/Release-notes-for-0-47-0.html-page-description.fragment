fragment_downloaded_cb({"url":"Release-notes-for-0-47-0.html#page-description","fragment":"Added the function subdir_done(). Its invocation exits the current\nscript at the point of invocation. All previously invoked build\ntargets and commands are build/executed. All following ones are\nignored. If the current script was invoked via subdir() the parent\nscript continues normally.\nAfter obtaining the value of a preprocessor symbol consecutive string\nliterals are merged into a single string literal. For example a\npreprocessor symbol's value \"ab\" \"cd\" is returned as \"abcd\".\nCross-compilation is now supported for ARM targets using ARM compiler\nversion 6 - ARMCLANG. The required ARMCLANG compiler options for\nbuilding a shareable library are not included in the current Meson\nimplementation for ARMCLANG support, so it can not build shareable\nlibraries. This current Meson implementation for ARMCLANG support can\nnot build assembly files with arm syntax (we need to use armasm\ninstead of ARMCLANG for the .s files with this syntax) and only\nsupports GNU syntax.\nThe default extension of the executable output is .axf. The\nenvironment path should be set properly for the ARM compiler\nexecutables. The --target, -mcpu options with the appropriate\nvalues should be mentioned in the cross file as shown in the snippet\nbelow.\nNote:\nWhen building with clang on macOS, you can now build your static and\nshared binaries with embedded bitcode by enabling the b_bitcode\nbase option by passing\n-Db_bitcode=true to Meson.\nThis is better than passing the options manually in the environment\nsince Meson will automatically disable conflicting options such as\nb_asneeded, and will disable bitcode support on targets that don't\nsupport it such as shared_module().\nSince this requires support in the linker, it is currently only\nenabled when using Apple ld. In the future it can be extended to clang\non other platforms too.\nThe existing compiler check has_header() only checks if the header\nexists, either with the __has_include C++11 builtin, or by running\nthe pre-processor.\nHowever, sometimes the header you are looking for is unusable on some\nplatforms or with some compilers in a way that is only detectable at\ncompile-time. For such cases, you should use check_header() which\nwill include the header and run a full compile.\nNote that has_header() is much faster than check_header(), so it\nshould be used whenever possible.\nIn addition to the existing actions configuration: and command:,\nconfigure_file() now accepts a\nkeyword argument copy: which specifies a new action to copy the file\nspecified with the input: keyword argument to a file in the build\ndirectory with the name specified with the output: keyword argument.\nThese three keyword arguments are, as before, mutually exclusive. You\ncan only do one action at a time.\nAdd a new keyword to\nconfigure_file() that allows\nthe developer to specify the input and output file encoding. The\ndefault value is the same as before: UTF-8.\nIn the past, Meson would not handle non-UTF-8/ASCII files correctly,\nand in the worst case would try to coerce it to UTF-8 and mangle the\ndata. UTF-8 is the standard encoding now, but sometimes it is\nnecessary to process files that use a different encoding.\nFor additional details see #3135.\nWhen called without an input file, configure_file generates a C\nheader file by default. A keyword argument was added to allow\nspecifying the output format, for example for use with nasm or yasm:\nThe depfile keyword argument to custom_target now accepts the @BASENAME@\nand @PLAINNAME@ substitutions.\nSetting build_always to true for a custom target not only marks\nthe target to be always considered out of date, but also adds it to\nthe set of default targets. This option is therefore deprecated and\nthe new option build_always_stale is introduced.\nbuild_always_stale only marks the target to be always considered\nout of date, but does not add it to the set of default targets. The\nold behaviour can be achieved by combining build_always_stale with\nbuild_by_default.\nThe documentation has been updated accordingly.\nMeson dictionaries use a syntax similar to python's dictionaries, but\nhave a narrower scope: they are immutable, keys can only be string\nliterals, and initializing a dictionary with duplicate keys causes a\nfatal error.\nExample usage:\nPrior to this change passing -Dopt= to an array opt would be\ninterpreted as [''] (an array with an empty string), now -Dopt= is\nthe same as -Dopt=[], an empty list.\nMeson will now print a WARNING: message during configuration if you\nuse a function or a keyword argument that was added in a Meson version\nthat's newer than the version specified inside project(). For\nexample:\nThis will output:\nA new type of option called feature can\nbe defined in meson_options.txt for the traditional enabled / disabled / auto tristate. The value of this option can be passed to\nthe required keyword argument of functions dependency(),\nfind_library(), find_program() and add_languages().\nA new global option auto_features has been added to override the\nvalue of all auto features. It is intended to be used by packagers\nto have full control on which feature must be enabled or disabled.\nYou can now pass additional arguments to gdbus-codegen using the\nextra_args keyword. This is the same for the other gnome function\ncalls.\nMeson now automatically adds autocleanup support to the generated\ncode. This can be modified by setting the autocleanup keyword.\nFor example:\nYou can now run meson install in your build directory and it will do\nthe install. It has several command line options you can toggle the\nbehaviour that is not in the default ninja install invocation. This\nis similar to how meson test already works.\nFor example, to install only the files that have changed, you can do:\nIt is now possible to pass an install_mode argument to all\ninstallable targets, such as executable(), libraries, headers, man\npages and custom/generated targets.\nThe install_mode argument can be used to specify the file mode in\nsymbolic format and optionally the owner/uid and group/gid for the\ninstalled files.\nThis umask is used to define the default permissions of files and\ndirectories created in the install tree. Files will preserve their\nexecutable mode, but the exact permissions will obey the\ninstall_umask.\nThe install_umask can be overridden in the Meson command-line:\nA project can also override the default in the project() call:\nTo disable the install_umask, set it to preserve, in which case\npermissions are copied from the files in their origin.\nOctal and binary integer literals can now be used in build and option files.\nIf check: is true, then the configuration will fail if the command\nreturns a non-zero exit status. The default value is false for\ncompatibility reasons.\nrun_command() used to always capture the output and stored it for\nuse in build files. However, sometimes the stdout is in a binary\nformat which is meant to be discarded. For that case, you can now set\nthe capture: keyword argument to false.\nThe compile_resources() function of the windows module now takes\nthe depend_files: and depends: keywords.\nWhen using binutils's windres, dependencies on files #include'd by\nthe preprocessor are now automatically tracked.\nWhen running install, if installation fails with a permission error\nand pkexec is available, Meson will attempt to use it to spawn a\npermission dialog for privileged installation and retry the\ninstallation.\nIf pkexec is not available, the old behaviour is retained and you\nwill need to explicitly run the install step with sudo.\n\nThe current changes are tested on Windows only.\nPIC support is not enabled by default for ARM,\nif users want to use it, they need to add the required arguments\nexplicitly from cross-file(c_args/cpp_args) or some other way.\n\n"});