fragment_downloaded_cb({"url":"Simple-comparison.html#a-simple-comparison","fragment":"A simple comparison\nIn this experiment we generated one thousand C files with contents\nthat looked like this.\nThe function number was different in each file. In addition there was\na main C file that just called each function in turn. We then\ngenerated build system files for Meson, CMake, SCons, Premake\nand Autotools that compiled these files into a single executable.\nWith this we measured three different things. The first is\nconfiguration time, that is, the time the build system takes to\ngenerate necessary build files. This is usually called the configure\nstep. The time was measured in seconds.\nThe second thing to measure was the build time. This should be limited\nby the compiler and in the optimal case should be the same for every\nbuild system. Four parallel processes were used in this test.\nThe third thing we measured was the empty build time. This measures\nhow much time the build system takes to check the states of all source\nfiles because if any of them could potentially cause a rebuild.\nSince CMake has two different backends, Make and Ninja, we ran the\ntests on both of them. All tests were run on a 2011 era MacBook Pro\nrunning Ubuntu 13/04. The tests were run multiple times and we always\ntook the fastest time.\nHere are the results for configuration time.\n\nThe reason SCons got zero seconds on this test is because you cannot\nseparate configure and build steps. They run as one unit. Autotools is\nthe clear loser of this test as it is over an order of magnitude\nslower than the second slowest one. This configuration time includes\nboth autogen and configure. All other systems take less than one\nsecond to do this setup, which is fast enough for a human being to\ninterpret as instantaneous.\n\nBuild times are a bit more even. SCons is the slowest, being almost\nten seconds slower than the second slowest. Some of it is work from\nthe configure step but it still has the worst performance. Premake is\nthe fastest Make-based build system narrowly beating out Autotools.\nBoth Ninja-based build systems are faster than all non-Ninja ones with\nMeson being slightly faster. In practice the difference is minimal.\nThe advantages of Ninja can be seen by comparing CMake's times when\nusing Make or Ninja. It is possible to shave off 3.5 seconds (over\n20%) of the total build time just by changing the backend. The\nproject's CMake configuration files don't need any changes.\n\nEmpty build times reflect the performance of regular build times.\nSCons is again the slowest taking over three seconds compared to\nMeson, which takes only 0.03 seconds, a difference of two orders of\nmagnitude. Even Autotools, the fastest Make-based system, is almost\none order of magnitude slower. Ninja holds the top spots just like in\nthe previous test.\n"});