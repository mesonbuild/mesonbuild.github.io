fragment_downloaded_cb({"url":"IndepthTutorial.html#an-indepth-tutorial","fragment":"An in-depth tutorial\nIn this tutorial we set up a project with multiple targets, unit tests\nand dependencies between targets. Our main product is a shared library\ncalled foo that is written in C++11. We are going to ignore the\ncontents of the source files, as they are not really important from a\nbuild definition point of view. The library makes use of the GLib\nlibrary so we need to detect and link it properly. We also make the\nresulting library installable.\nThe source tree contains three subdirectories src, include and\ntest that contain, respectively, the source code, headers and unit\ntests of our project.\nTo start things up, here is the top level meson.build file.\nThe definition always starts with a call to the project function. In\nit you must specify the project's name and programming languages to\nuse, in this case only C++. We also specify two additional\narguments, the project's version and the license it is under. Our\nproject is version 1.0.0 and is specified to be under the MIT\nlicense.\nThen we find GLib, which is an external dependency. The dependency\nfunction tells Meson to find the library (by default using\npkg-config). If the library is not found, Meson will raise an error\nand stop processing the build definition.\nThen we add a global compiler argument -DSOME_TOKEN=value. This flag\nis used for all C++ source file compilations. It is not possible to\nunset it for some targets. The reason for this is that it is hard to\nkeep track of what compiler flags are in use if global settings change\nper target.\nSince include directory contains the header files, we need a way to\ntell compilations to add that directory to the compiler command line.\nThis is done with the include_directories command that takes a\ndirectory and returns an object representing this directory. It is\nstored in variable inc which makes it accessible later on.\nAfter this are three subdir commands. These instruct Meson to go to\nthe specified subdirectory, open the meson.build file that's in\nthere and execute it. The last few lines are a stanza to generate a\npkg-config file. We'll skip that for now and come back to it at the\nend of this document.\nThe first subdirectory we go into is include. In it we have a\nheader file for the library that we want to install. This requires one\nline.\nThis installs the given header file to the system's header directory.\nThis is by default /[install prefix]/include, but it can be changed\nwith a command line argument.\nThe Meson definition of src subdir is simple.\nHere we just tell Meson to build the library with the given sources.\nWe also tell it to use the include directories we stored to variable\ninc earlier. Since this library uses GLib, we tell Meson to add all\nnecessary compiler and linker flags with the dependencies keyword\nargument. Its value is glib_dep which we set at the top level\nmeson.build file. The install argument tells Meson to install the\nresult. As with the headers, the shared library is installed to the\nsystem's default location (usually /[install prefix]/lib) but is\nagain overridable.\nThe resulting library is stored in variable foolib just like the\ninclude directory was stored in the previous file.\nOnce Meson has processed the src subdir it returns to the main Meson\nfile and executes the next line that moves it into the test subdir.\nIts contents look like this.\nFirst we build a test executable that has the same include directory\nas the main library and which also links against the freshly built\nshared library. Note that you don't need to specify glib_dep here\njust to be able to use the built library foolib. If the executable\nused GLib functionality itself, then we would of course need to add it\nas a keyword argument here.\nFinally we define a test with the name foolib test. It consists of\nrunning the binary we just built. If the executable exits with a zero\nreturn value, the test is considered passed. Nonzero return values\nmark the test as failed.\nAt this point we can return to the pkg-config generator line. All\nshared libraries should provide a pkg-config file, which explains how\nthat library is used. Meson provides this simple generator that should\nbe sufficient for most simple projects. All you need to do is list a\nfew basic pieces of information and Meson takes care of generating an\nappropriate file. More advanced users might want to create their own\npkg-config files using Meson's configuration file generator\nsystem.\nWith these four files we are done. To configure, build and run the\ntest suite, we just need to execute the following commands (starting\nat source tree root directory).\nTo then install the project you only need one command.\n"});