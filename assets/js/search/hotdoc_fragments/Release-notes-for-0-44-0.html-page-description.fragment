fragment_downloaded_cb({"url":"Release-notes-for-0-44-0.html#page-description","fragment":"This function prints its argument to the console prefixed by\n\"WARNING:\" in yellow color. A simple example:\nwarning('foo is deprecated, please use bar instead')\nWhen moc-ing sources, the moc tool does not know about any\npreprocessor macros. The generated code might not match the input\nfiles when the linking with the moc input sources happens.\nThis amendment allows to specify a a list of additional arguments\npassed to the moc tool. They are called moc_extra_arguments.\nThese options now default in a way consistent with\nFHS and common usage.\nIf prefix is /usr, default sysconfdir to /etc, localstatedir to /var and\nsharedstatedir to /var/lib.\nIf prefix is /usr/local (the default), default localstatedir to\n/var/local and sharedstatedir to /var/local/lib.\nPreviously to have an option that took more than one value a string\nvalue would have to be created and split, but validating this was\ndifficult. A new array type has been added to the meson_options.txt\nfor this case. It works like a 'combo', but allows more than one\noption to be passed. The values can optionally be validated against a\nlist of valid values. When used on the command line (with -D), values\nare passed as a comma separated list.\nThese can be overwritten on the command line,\nThe LLVM dependency has been improved to consistently use dynamic\nlinking. Previously recent version (>= 3.9) would link dynamically\nwhile older versions would link statically.\nNow LLVM also accepts the static keyword to enable statically\nlinking to LLVM modules instead of dynamically linking.\nAdded a new keyword argument to the subdir command. It is given a\nlist of dependency objects and the function will only recurse in the\nsubdirectory if they are all found. Typical usage goes like this.\nIn this case the subdirectory would not be entered since d2 could\nnot be found.\nNew convenience method that allows reusing a variable value\ndefined quoted. Useful in C for config.h strings for example.\nA disabler object is a new kind of object that has very specific\nsemantics. If it is used as part of any other operation such as an\nargument to a function call, logical operations etc, it will cause the\noperation to not be evaluated. Instead the return value of said\noperation will also be the disabler object.\nFor example if you have an setup like this:\nIf you replace the dependency with a disabler object like this:\nThen the shared library, executable and unit test are not\ncreated. This is a handy mechanism to cut down on the number of if\nstatements.\nA number of dependencies (CUPS, LLVM, pcap, WxWidgets, GnuStep) use a\nconfig tool instead of pkg-config. As of this version they now have a\nget_configtool_variable method, which is analogous to the\nget_pkgconfig_variable for pkg config.\nMeson now ships an internal version of Python in the MSI installer\npackages. This means that it can run Python scripts that are part of\nyour build transparently. That is, if you do the following:\nThen Meson will run the script with its internal Python version if necessary.\nEarlier, dependency('libwmf') could only detect the library with\npkg-config files. Now, if pkg-config files are not found, Meson will\nlook for libwmf-config and if it's found, will use that to find the\nlibrary.\n"});