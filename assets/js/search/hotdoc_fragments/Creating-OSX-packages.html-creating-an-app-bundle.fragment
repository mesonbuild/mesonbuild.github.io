fragment_downloaded_cb({"url":"Creating-OSX-packages.html#creating-an-app-bundle","fragment":"Creating an app bundle\nOSX app bundles are actually extremely simple. They are just a\ndirectory of files in a certain format. All the details you need to\nknow are on this\npage\nand it is highly recommended that you read it first.\nLet's assume that we are creating our app bundle into\n/tmp/myapp.app. Suppose we have one executable, so we need to\ninstall that into Contents/MacOS. If we define the executable like\nthis:\nthen we just need to initialize our build tree with this command:\nNow when we do meson install the bundle is properly staged. If you\nhave any resource files or data, you need to install them into\nContents/Resources either by custom install commands or specifying\nmore install paths to the Meson command.\nNext we need to install an Info.plist file and an icon. For those we\nneed the following two Meson definitions.\nThe format of Info.plist can be found in the link or the sample\nproject linked above. The simplest way to get an icon in the icns\nformat is to save your image as a tiff an then use the tiff2icns helper\napplication that comes with XCode.\nSome applications assume that the working directory of the app process\nis the same where the binary executable is. If this is the case for\nyou, then you need to create a wrapper script that looks like this:\ninstall it with this:\nand make sure that you specify myapp.sh as the executable to run in\nyour Info.plist.\nIf you are not using any external libraries, this is all you need to\ndo. You now have a full app bundle in /tmp/myapp.app that you can\nuse. Most applications use third party frameworks and libraries,\nthough, so you need to add them to the bundle so it will work on other\npeoples' machines.\nAs an example we are going to use the SDL2\nframework. In order to bundle it in our app, we first specify an\ninstaller script to run.\nThe install script does two things. First it copies the whole\nframework into our bundle.\nThen it needs to alter the library search path of our\nexecutable(s). This tells OSX that the libraries your app needs are\ninside your bundle. In the case of SDL2, the invocation goes like\nthis:\nThis is the part of OSX app bundling that you must always do\nmanually. OSX dependencies come in many shapes and forms and\nunfortunately there is no reliable automatic way to determine how each\ndependency should be handled. Frameworks go to the Frameworks\ndirectory while plain .dylib files usually go to\nContents/Resources/lib (but you can put them wherever you like). To\nget this done you have to check what your program links against with\notool -L /path/to/binary and manually add the copy and fix steps to\nyour install script. Do not copy system libraries inside your bundle,\nthough.\nAfter this you have a fully working, self-contained OSX app bundle\nready for distribution.\n"});