fragment_downloaded_cb({"url":"Reference-manual.html#generator","fragment":"generator()\nSee also: custom_target\nThis function creates a generator object that can\nbe used to run custom compilation commands. The only positional\nargument is the executable to use. It can either be a self-built\nexecutable or one returned by find_program. Keyword arguments are the\nfollowing:\nThe returned object also has methods that are documented in the\nobject methods section below.\nThe template strings passed to all the above keyword arguments accept\nthe following special substitutions:\nEach string passed to the output keyword argument must be\nconstructed using one or both of these two substitutions.\nIn addition to the above substitutions, the arguments keyword\nargument also accepts the following:\nNOTE: Generators should only be used for outputs that will only\nbe used as inputs for a build target or a custom\ntarget. When you use the processed output of a\ngenerator in multiple targets, the generator will be run multiple\ntimes to create outputs for each target. Each output will be created\nin a target-private directory @BUILD_DIR@.\nIf you want to generate files for general purposes such as for\ngenerating headers to be used by several sources, or data that will be\ninstalled, and so on, use a custom_target instead.\n\n\narguments: a list of template strings that will be the command line\narguments passed to the executable\n\ndepends (since 0.51.0): is an array of build targets that must be built before this\ngenerator can be run. This is used if you have a generator that calls\na second executable that is built in this project.\n\ndepfile: is a template string pointing to a dependency file that a\ngenerator can write listing all the additional files this target\ndepends on, for example a C compiler would list all the header files\nit included, and a change in any one of these files triggers a\nrecompilation\n\noutput: a template string (or list of template strings) defining\nhow an output file name is (or multiple output names are) generated\nfrom a single source file name\n\ncapture (since 0.43.0): when this argument is set to true, Meson\ncaptures stdout of the executable and writes it to the target file\nspecified as output.\n\n\n\n@PLAINNAME@: the complete input file name, e.g: foo.c becomes foo.c (unchanged)\n\n@BASENAME@: the base of the input filename, e.g.: foo.c.y becomes foo.c (extension is removed)\n\n\n\n@OUTPUT@: the full path to the output file\n\n@INPUT@: the full path to the input file\n\n@DEPFILE@: the full path to the depfile\n\n@SOURCE_DIR@: the full path to the root of the source tree\n\n@CURRENT_SOURCE_DIR@: this is the directory where the currently processed meson.build is located in\n\n@BUILD_DIR@: the full path to the root of the build dir where the output will be placed\n\n"});