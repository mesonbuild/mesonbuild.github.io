fragment_downloaded_cb({"url":"RefMan_functions.html#arguments15","fragment":"Arguments\nThe\nfunction accepts between 1 and infinity variadic\narguments (names...) of type str.\nThe names of the dependency too look up. The dependencies are looked up in\nthe order they are provided here. The first found dependency will then be\nused. The fallback subproject will be used only if none of the names are\nfound on the system. Once one of the name has been found, all other names\nare added into the cache so subsequent calls for any of those name will\nreturn the same value. This is useful in case a dependency could have\ndifferent names, such as png and libpng.\nNOTE: Before 0.60.0 only a single dependency name was allowed.\n(since 0.60.0)\n\nThe function dependency()\naccepts the following keyword arguments:\nSpecifies whether Meson should automatically pick a fallback subproject\nin case the dependency\nis not found in the system.  If true and the dependency is not found\non the system, Meson will fallback to a subproject that provides this\ndependency. If false, Meson will not fallback even if a subproject\nprovides this dependency.  By default, Meson will do so if required\nis true or  enabled; see the Wrap\ndocumentation\nfor more details.\n(since 0.56.0)\nAn array of default option values\nthat override those set in the subproject's meson_options.txt\n(like default_options in project(), they only have\neffect when Meson is run for the first time, and command line\narguments override any default options in build files)\n(since 0.37.0)\nReturns a disabler() object instead of a not-found dependency\nif this kwarg is set to true and the dependency couldn't be found.\n(since 0.49.0)\ndefault =\n  false\nManually specifies a subproject fallback\nto use in case the dependency is not found in the system.\nThis is useful if the automatic search is not applicable or if you\nwant to support versions of Meson older than 0.55.0.  If the value is an\narray ['subproj_name', 'subproj_dep'], the first value is the name\nof the subproject and the second is the variable name in that\nsubproject that contains a dependency object such as the return\nvalue of declare_dependency() or\ndependency(), etc. Note that this means the\nfallback dependency may be a not-found dependency, in which\ncase the value of the required: kwarg will be obeyed.\nSince 0.54.0 the value can be a single string, the subproject name;\nin this case the subproject must use\nmeson.override_dependency('dependency_name', subproj_dep)\nto specify the dependency object used in the superproject.\nIf the value is an empty list, it has the same effect as\nallow_fallback: false.\nAn enum flag, marking how the dependency\nflags should be converted. Supported values are 'preserve', 'system' and\n'non-system'. System dependencies may be handled differently on some\nplatforms, for instance, using -isystem instead of -I, where possible.\nIf include_type is set to 'preserve', no additional conversion will be\nperformed.\n(since 0.52.0)\ndefault =\n  'preserve'\nDefines what language-specific dependency to find\nif it's available for multiple languages.\n(since 0.42.0)\nDefines the way the dependency is detected, the default is\nauto but can be overridden to be e.g. qmake for Qt development,\nand different dependencies support different values\nfor this (though auto will work on all of them)\ndefault =\n  'auto'\nIf set to true, causes Meson to find the dependency on\nthe build machine system rather than the host system (i.e. where the\ncross compiled binary will run on), usually only needed if you build\na tool to be used during compilation.\ndefault =\n  false\nAn optional string that will be printed as a message() if the dependency was not found.\n(since 0.50.0)\nwhen set to false, Meson will proceed with the build\neven if the dependency is not found. (since 0.47.0) The value of a\nfeature option can also be passed.\ndefault =\n  true\nTells the dependency provider to try to get static\nlibraries instead of dynamic ones (note that this is not supported\nby all dependency backends)\nSince 0.60.0 it also sets default_library option accordingly on the fallback\nsubproject if it was not set explicitly in default_options keyword argument.\ndefault =\n  false\nSpecifies the required version,\na string containing a\ncomparison operator followed by the version string, examples include\n>1.0.0, <=2.3.5 or 3.1.4 for exact matching.\nYou can also specify multiple restrictions by passing a list to this\nkeyword argument, such as: ['>=3.14.0', '<=4.1.0'].\nThese requirements are never met if the version is unknown.\n(since 0.37.0)\n\n\n\n    \n      \n        Name\n        Type\n        Description\n        Tags\n      \n    \n    \n      \n        allow_fallback\n        bool\n        \n        \nSpecifies whether Meson should automatically pick a fallback subproject\nin case the dependency\nis not found in the system.  If true and the dependency is not found\non the system, Meson will fallback to a subproject that provides this\ndependency. If false, Meson will not fallback even if a subproject\nprovides this dependency.  By default, Meson will do so if required\nis true or  enabled; see the Wrap\ndocumentation\nfor more details.\n  \n        \n\n  (since 0.56.0)\n  \n  \n      \n      \n        default_options\n        \nlist[str]\n        \n        \nAn array of default option values\nthat override those set in the subproject's meson_options.txt\n(like default_options in project(), they only have\neffect when Meson is run for the first time, and command line\narguments override any default options in build files)\n  \n        \n\n  (since 0.37.0)\n  \n  \n      \n      \n        disabler\n        bool\n        \n        \nReturns a disabler() object instead of a not-found dependency\nif this kwarg is set to true and the dependency couldn't be found.\n  \n        \n\n  (since 0.49.0)\n  default =\n  false\n  \n  \n      \n      \n        fallback\n        \nlist[str] | str\n\n        \n        \nManually specifies a subproject fallback\nto use in case the dependency is not found in the system.\nThis is useful if the automatic search is not applicable or if you\nwant to support versions of Meson older than 0.55.0.  If the value is an\narray ['subproj_name', 'subproj_dep'], the first value is the name\nof the subproject and the second is the variable name in that\nsubproject that contains a dependency object such as the return\nvalue of declare_dependency() or\ndependency(), etc. Note that this means the\nfallback dependency may be a not-found dependency, in which\ncase the value of the required: kwarg will be obeyed.\nSince 0.54.0 the value can be a single string, the subproject name;\nin this case the subproject must use\nmeson.override_dependency('dependency_name', subproj_dep)\nto specify the dependency object used in the superproject.\nIf the value is an empty list, it has the same effect as\nallow_fallback: false.\n  \n        \n\n  \n  \n      \n      \n        include_type\n        str\n        \n        \nAn enum flag, marking how the dependency\nflags should be converted. Supported values are 'preserve', 'system' and\n'non-system'. System dependencies may be handled differently on some\nplatforms, for instance, using -isystem instead of -I, where possible.\nIf include_type is set to 'preserve', no additional conversion will be\nperformed.\n  \n        \n\n  (since 0.52.0)\n  default =\n  'preserve'\n  \n  \n      \n      \n        language\n        str\n        \n        \nDefines what language-specific dependency to find\nif it's available for multiple languages.\n  \n        \n\n  (since 0.42.0)\n  \n  \n      \n      \n        method\n        str\n        \n        \nDefines the way the dependency is detected, the default is\nauto but can be overridden to be e.g. qmake for Qt development,\nand different dependencies support different values\nfor this (though auto will work on all of them)\n  \n        \n\n  default =\n  'auto'\n  \n  \n      \n      \n        native\n        bool\n        \n        \nIf set to true, causes Meson to find the dependency on\nthe build machine system rather than the host system (i.e. where the\ncross compiled binary will run on), usually only needed if you build\na tool to be used during compilation.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        not_found_message\n        str\n        \n        \nAn optional string that will be printed as a message() if the dependency was not found.\n  \n        \n\n  (since 0.50.0)\n  \n  \n      \n      \n        required\n        \nbool | feature\n\n        \n        \nwhen set to false, Meson will proceed with the build\neven if the dependency is not found. (since 0.47.0) The value of a\nfeature option can also be passed.\n  \n        \n\n  default =\n  true\n  \n  \n      \n      \n        static\n        bool\n        \n        \nTells the dependency provider to try to get static\nlibraries instead of dynamic ones (note that this is not supported\nby all dependency backends)\nSince 0.60.0 it also sets default_library option accordingly on the fallback\nsubproject if it was not set explicitly in default_options keyword argument.\n  \n        \n\n  default =\n  false\n  \n  \n      \n      \n        version\n        str\n        \n        \nSpecifies the required version,\na string containing a\ncomparison operator followed by the version string, examples include\n>1.0.0, <=2.3.5 or 3.1.4 for exact matching.\nYou can also specify multiple restrictions by passing a list to this\nkeyword argument, such as: ['>=3.14.0', '<=4.1.0'].\nThese requirements are never met if the version is unknown.\n  \n        \n\n  (since 0.37.0)\n  \n  \n      \n    \n  \n"});