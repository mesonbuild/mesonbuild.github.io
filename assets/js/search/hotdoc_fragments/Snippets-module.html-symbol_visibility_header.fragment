fragment_downloaded_cb({"url":"Snippets-module.html#symbol_visibility_header","fragment":"symbol_visibility_header()\nGenerate a header file that defines macros to be used to mark all public APIs\nof a library. Depending on the platform, this will typically use\n__declspec(dllexport), __declspec(dllimport) or\n__attribute__((visibility(\"default\"))). It is compatible with C, C++,\nObjC and ObjC++ languages. The content of the header is static regardless\nof the compiler used.\nThe first positional argument is the name of the header file to be generated.\nIt also takes the following keyword arguments:\nProjects that define multiple shared libraries should typically have\none header per library, with a different namespace.\nThe generated header file should be installed using install_headers().\nmeson.build:\nmylib/meson.build:\nmylib/lib.h\nmylib/lib.c\n\n\nnamespace: Prefix for generated macros, defaults to the current project name.\nIt will be converted to upper case with all non-alphanumeric characters replaced\nby an underscore _. It is only used for api, compilation and\nstatic_compilation default values.\n\napi: Name of the macro used to mark public APIs. Defaults to <NAMESPACE>_API.\n\ncompilation: Name of a macro defined only when compiling the library.\nDefaults to <NAMESPACE>_COMPILATION.\n\nstatic_compilation: Name of a macro defined only when compiling or using\nstatic library. Defaults to <NAMESPACE>_STATIC_COMPILATION.\n\nstatic_only: If set to true, <NAMESPACE>_STATIC_COMPILATION is defined\ninside the generated header. In that case the header can only be used for\nbuilding a static library. By default it is true when default_library=static,\nand false otherwise. See below for more information\n\n\n"});