fragment_downloaded_cb({"url":"Release-notes-for-0-55-0.html#page-description","fragment":"On Linux-like systems, meson adds rpath entries to allow running apps\nin the build tree, and then removes those build-time-only rpath\nentries when installing. Rpath entries may also come in via LDFLAGS\nand via .pc files. Meson used to remove those latter rpath entries by\naccident, but is now more careful.\nIt's now possible to specify targets in meson compile, which will\nresult in building only the requested targets.\nUsage: meson compile [TARGET [TARGET...]]\nTARGET has the following syntax: [PATH/]NAME[:TYPE].\nNAME: name of the target from meson.build (e.g. foo from executable('foo', ...)).\nPATH: path to the target relative to the root meson.build file. Note: relative path for a target specified in the root meson.build is ./.\nTYPE: type of the target (e.g. shared_library, executable and etc)\nPATH and/or TYPE can be omitted if the resulting TARGET can be used to uniquely identify the target in meson.build.\nFor example targets from the following code:\ncan be invoked with meson compile foo:shared_library foo:static_library bar.\nDue to the popularity of Gtest (google test) among C and C++\ndevelopers meson now supports a special protocol for gtest. With this\nprotocol meson injects arguments to gtests to output JUnit, reads that\nJUnit, and adds the output to the JUnit it generates.\nAll three (add_install_script, add_dist_script, and\nadd_postconf_script) now accept ExternalPrograms (as returned by\nfind_program), Files, and the output of configure_file. The dist and\npostconf methods cannot accept other types because of when they are run.\nWhile dist could, in theory, take other dependencies, it would require more\nextensive changes, particularly to the backend.\nThe install script variant is also able to accept custom_targets,\ncustom_target indexes, and build targets (executables, libraries), and\ncan use built executables a the script to run\nNative and cross files now support string and list concatenation using\nthe + operator, and joining paths using the / operator. Entries\ndefined in the [constants] section can be used in any other section.\nAn entry defined in any other section can be used only within that\nsame section and only after it has been defined.\nMeson now supports passing configuration options to CMake and\noverriding certain build details extracted from the CMake subproject.\nThe new CMake configuration options object is very similar to the\nconfiguration data\nobject object returned\nby configuration_data. It\nis generated by the subproject_options function\nAll configuration options have to be set before the subproject is\nconfigured and must be passed to the subproject method via the\noptions key. Altering the configuration object won't have any effect\non previous cmake.subproject calls.\nNote: The cmake_options kwarg for the subproject function is\nnow deprecated since it is replaced by the new options system.\nWhen a program has been overridden by an executable, the returned\nobject of find_program() had some issues:\nMeson used to always use response files on Windows,\nbut never on Linux.\nIt now strikes a happier balance, using them on both platforms,\nbut only when needed to avoid command line length limits.\nThe unstable-kconfig module is now renamed to unstable-keyval. We\nexpect this module to become stable once it has some usage experience,\nspecifically in the next or the following release\ngnome.generate_gir() now has fatal_warnings keyword argument to\nabort when a warning is produced. This is useful for example in CI\nenvironment where it's important to catch potential issues.\nD Language compilers will now set -release/--release/-frelease (depending on\nthe compiler) when the b_ndebug flag is set.\nMeson will now generate a JUnit compatible XML file from test results.\nit will be in the meson-logs directory and is called\ntestlog.junit.xml.\nBefore 0.55.0 config tool based dependencies (llvm-config,\ncups-config, etc), would search system $PATH if they weren't defined\nin the cross file. This has been a source of bugs and has been\ndeprecated. It is now removed, config tool binaries must be specified\nin the cross file now or the dependency will not be found.\nThe old name was confusing as it didn't really match the behavior of\nthe function. The old name remains as an alias (the behavior hasn't\nchanged), but is now deprecated.\nIt is now possible to use string concatenation (with the +\nopperator) in the meson_options.txt file. This allows splitting long\noption descriptions.\nWrap files can now define source_fallback_url and\npatch_fallback_url to be used in case the main server is temporaly\ndown.\nllvm-cov is now used to generate coverage information when clang is\nused as the compiler.\nIt is now possible to use the patch_filename and source_filename\nvalue in a .wrap file without *_url to specify a local source /\npatch file. All local files must be located in the\nsubprojects/packagefiles directory. The *_hash entries are\noptional with this setup.\nWrap files can now specify patch_directory instead of\npatch_filename in the case overlay files are local. Every files in\nthat directory, and subdirectories, will be copied to the subproject\ndirectory. This can be used for example to add meson.build files to\na project not using Meson build system upstream. The patch directory\nmust be placed in subprojects/packagefiles directory.\npatch_* keys are not limited to wrap-file any more, they can be\nspecified for all wrap types.\nPreviously the link_language argument was only supposed to be\nallowed in executables, because the linker used needs to be the linker\nfor the language that implements the main function. Unfortunately it\ndidn't work in that case, and, even worse, if it had been implemented\nproperly it would have worked for all targets. In 0.55.0 this\nrestriction has been removed, and the bug fixed. It now is valid for\nexecutable and all derivative of library.\nmeson dist has a new option --no-tests to skip build and tests of\ngenerated packages. It can be used to not waste time for example when\ndone in CI that already does its own testing.\nA newly-added --force-fallback-for command line option can now be\nused to force fallback for specific subprojects.\nExample:\ndependency('foo') now automatically fallback if the dependency is\nnot found on the system but a subproject wrap file or directory exists\nwith the same name.\nThat means that simply adding subprojects/foo.wrap is enough to add\nfallback to any dependency('foo') call. It is however requires that\nthe subproject call meson.override_dependency('foo', foo_dep) to\nspecify which dependency object should be used for foo.\nWrap files can define the dependencies it provides in the [provide]\nsection. When foo.wrap provides the dependency foo-1.0 any call do\ndependency('foo-1.0') will automatically fallback to that subproject\neven if no fallback keyword argument is given. See Wrap\ndocumentation.\nWhen a program cannot be found on the system but a wrap file has its\nname in the [provide] section, that subproject will be used as\nfallback.\nMeson will now set the MESON_EXE_WRAPPER as the properly wrapped and\njoined representation. For Unix-like OSes this means python's\nshelx.join, on Windows an implementation that attempts to properly\nquote windows argument is used. This allow wrapper scripts to run test\nbinaries, instead of just skipping.\nfor example, if the wrapper is ['emulator', '--script'], it will be passed\nas MESON_EXE_WRAPPER=\"emulator --script\".\nIt's now possible to specify backend specific arguments in meson compile.\nUsage: meson compile [--vs-args=args] [--ninja-args=args]\nThese arguments use the following syntax:\nIf you only pass a single string, then it is considered to have all\nvalues separated by commas. Thus invoking the following command:\nwould add -n, -d and explain arguments to ninja invocation.\nIf you need to have commas or spaces in your string values, then you\nneed to pass the value with proper shell quoting like this:\ndumping the AST (--ast): new in 0.55.0\nWhen --buildtype=debugoptimized is used with the Ninja backend, the\nVS CRT option used is /MD, which is the behaviour documented for\nall\nbackends.\nHowever, the Visual Studio backend was pass /MT in that case, which\nis inconsistent.\nIf you need to use the MultiThreaded CRT, you should explicitly pass\n-Db_vscrt=mt\n\nprints the AST of a meson.build as JSON\n\n"});