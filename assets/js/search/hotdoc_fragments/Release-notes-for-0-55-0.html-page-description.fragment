fragment_downloaded_cb({"url":"Release-notes-for-0-55-0.html#page-description","fragment":"On Linux-like systems, meson adds rpath entries to allow running apps\nin the build tree, and then removes those build-time-only\nrpath entries when installing.  Rpath entries may also come\nin via LDFLAGS and via .pc files.  Meson used to remove those\nlatter rpath entries by accident, but is now more careful.\nIt's now possible to specify targets in meson compile, which will result in building only the requested targets.\nUsage: meson compile [TARGET [TARGET...]]\nTARGET has the following syntax: [PATH/]NAME[:TYPE].\nNAME: name of the target from meson.build (e.g. foo from executable('foo', ...)).\nPATH: path to the target relative to the root meson.build file. Note: relative path for a target specified in the root meson.build is ./.\nTYPE: type of the target (e.g. shared_library, executable and etc)\nPATH and/or TYPE can be ommited if the resulting TARGET can be used to uniquely identify the target in meson.build.\nFor example targets from the following code:\ncan be invoked with meson compile foo:shared_library foo:static_library bar.\nDue to the popularity of Gtest (google test) among C and C++ developers meson\nnow supports a special protocol for gtest. With this protocol meson injects\narguments to gtests to output JUnit, reads that JUnit, and adds the output to\nthe JUnit it generates.\nAll three (add_install_script, add_dist_script, and\nadd_postconf_script) now accept ExternalPrograms (as returned by\nfind_program), Files, and the output of configure_file. The dist and\npostconf methods cannot accept other types because of when they are run.\nWhile dist could, in theory, take other dependencies, it would require more\nextensive changes, particularly to the backend.\nThe install script variant is also able to accept custom_targets,\ncustom_target indexes, and build targets (executables, libraries), and can\nuse built executables a the script to run\nNative and cross files now support string and list concatenation using the +\noperator, and joining paths using the / operator.\nEntries defined in the [constants] section can be used in any other section.\nAn entry defined in any other section can be used only within that same section and only\nafter it has been defined.\nMeson now supports passing configuration options to CMake and overriding\ncertain build details extracted from the CMake subproject.\nThe new CMake configuration options object is very similar to the\nconfiguration data object object\nreturned by configuration_data. It\nis generated by the subproject_options function\nAll configuration options have to be set before the subproject is configured\nand must be passed to the subproject method via the options key. Altering\nthe configuration object won't have any effect on previous cmake.subproject\ncalls.\nNote: The cmake_options kwarg for the subproject function is now\ndeprecated since it is replaced by the new options system.\nWhen a program has been overridden by an executable, the returned object of\nfind_program() had some issues:\nMeson used to always use response files on Windows,\nbut never on Linux.\nIt now strikes a happier balance, using them on both platforms,\nbut only when needed to avoid command line length limits.\nThe unstable-kconfig module is now renamed to unstable-keyval.\nWe expect this module to become stable once it has some usage experience,\nspecifically in the next or the following release\ngnome.generate_gir() now has fatal_warnings keyword argument to abort when\na warning is produced. This is useful for example in CI environment where it's\nimportant to catch potential issues.\nD Language compilers will now set -release/--release/-frelease (depending on\nthe compiler) when the b_ndebug flag is set.\nMeson will now generate a JUnit compatible XML file from test results. it\nwill be in the meson-logs directory and is called testlog.junit.xml.\nBefore 0.55.0 config tool based dependencies (llvm-config, cups-config, etc),\nwould search system $PATH if they weren't defined in the cross file. This has\nbeen a source of bugs and has been deprecated. It is now removed, config tool\nbinaries must be specified in the cross file now or the dependency will not\nbe found.\nThe old name was confusing as it didn't really match the behavior of the\nfunction. The old name remains as an alias (the behavior hasn't changed), but\nis now deprecated.\nIt is now possible to use string concatenation (with the + opperator) in the\nmeson_options.txt file. This allows splitting long option descriptions.\nWrap files can now define source_fallback_url and patch_fallback_url to be\nused in case the main server is temporaly down.\nllvm-cov is now used to generate coverage information when clang is used as\nthe compiler.\nIt is now possible to use the patch_filename and source_filename value in a\n.wrap file without *_url to specify a local source / patch file. All local\nfiles must be located in the subprojects/packagefiles directory. The *_hash\nentries are optional with this setup.\nWrap files can now specify patch_directory instead of patch_filename in the\ncase overlay files are local. Every files in that directory, and subdirectories,\nwill be copied to the subproject directory. This can be used for example to add\nmeson.build files to a project not using Meson build system upstream.\nThe patch directory must be placed in subprojects/packagefiles directory.\npatch_* keys are not limited to wrap-file any more, they can be specified for\nall wrap types.\nPreviously the link_language argument was only supposed to be allowed in\nexecutables, because the linker used needs to be the linker for the language\nthat implements the main function. Unfortunately it didn't work in that case,\nand, even worse, if it had been implemented properly it would have worked for\nall targets. In 0.55.0 this restriction has been removed, and the bug fixed.\nIt now is valid for executable and all derivative of library.\nmeson dist has a new option --no-tests to skip build and tests of generated\npackages. It can be used to not waste time for example when done in CI that\nalready does its own testing.\nA newly-added --force-fallback-for command line option can now be used to\nforce fallback for specific subprojects.\nExample:\ndependency('foo') now automatically fallback if the dependency is not found on\nthe system but a subproject wrap file or directory exists with the same name.\nThat means that simply adding subprojects/foo.wrap is enough to add fallback\nto any dependency('foo') call. It is however requires that the subproject call\nmeson.override_dependency('foo', foo_dep) to specify which dependency object\nshould be used for foo.\nWrap files can define the dependencies it provides in the [provide] section.\nWhen foo.wrap provides the dependency foo-1.0 any call do dependency('foo-1.0')\nwill automatically fallback to that subproject even if no fallback keyword\nargument is given. See Wrap documentation.\nWhen a program cannot be found on the system but a wrap file has its name in the\n[provide] section, that subproject will be used as fallback.\nMeson will now set the MESON_EXE_WRAPPER as the properly wrapped and joined\nrepresentation. For Unix-like OSes this means python's shelx.join, on Windows\nan implementation that attempts to properly quote windows argument is used.\nThis allow wrapper scripts to run test binaries, instead of just skipping.\nfor example, if the wrapper is ['emulator', '--script'], it will be passed\nas MESON_EXE_WRAPPER=\"emulator --script\".\nIt's now possible to specify backend specific arguments in meson compile.\nUsage: meson compile [--vs-args=args] [--ninja-args=args]\nThese arguments use the following syntax:\nIf you only pass a single string, then it is considered to have all values separated by commas. Thus invoking the following command:\nwould add -n, -d and explain arguments to ninja invocation.\nIf you need to have commas or spaces in your string values, then you need to pass the value with proper shell quoting like this:\ndumping the AST (--ast): new in 0.55.0\nWhen --buildtype=debugoptimized is used with the Ninja backend, the VS CRT\noption used is /MD, which is the behaviour documented for all\nbackends.\nHowever, the Visual Studio backend was pass /MT in that case, which is inconsistent.\nIf you need to use the MultiThreaded CRT, you should explicitly pass -Db_vscrt=mt\n\nprints the AST of a meson.build as JSON\n\n"});