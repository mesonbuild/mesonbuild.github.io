urls_downloaded_cb({"token":"kind","urls":[{"url":"CMake-module.html#cmakewrite_basic_package_version_file","node_type":"ul","page":"CMake module","sections":["CMake module","CMake configuration files","cmake.write_basic_package_version_file()"],"context":{"gi-language":["default"]}},{"url":"Contributing.html#acceptance-and-merging","node_type":"p","page":"Contributing to Meson","sections":["Contributing to Meson","Acceptance and merging"],"context":{"gi-language":["default"]}},{"url":"Contributing.html#external-dependencies","node_type":"p","page":"Contributing to Meson","sections":["Contributing to Meson","External dependencies"],"context":{"gi-language":["default"]}},{"url":"Cross-compilation.html#binaries","node_type":"p","page":"Cross compilation","sections":["Cross compilation","Defining the environment","Binaries"],"context":{"gi-language":["default"]}},{"url":"Design-rationale.html#3-must-enforce-established-best-practices","node_type":"p","page":"Design rationale","sections":["This is the original design rationale for Meson. The syntax it\ndescribes does not match the released version","Can we do better?","3. Must enforce established best practices"],"context":{"gi-language":["default"]}},{"url":"Design-rationale.html#can-we-do-better","node_type":"p","page":"Design rationale","sections":["This is the original design rationale for Meson. The syntax it\ndescribes does not match the released version","Can we do better?"],"context":{"gi-language":["default"]}},{"url":"Design-rationale.html#this-is-the-original-design-rationale-for-meson-the-syntax-it-describes-does-not-match-the-released-version","node_type":"p","page":"Design rationale","sections":["This is the original design rationale for Meson. The syntax it\ndescribes does not match the released version"],"context":{"gi-language":["default"]}},{"url":"Release-notes-for-0-44-0.html#added-disabler-object","node_type":"p","page":"Release 0.44","sections":["New features","Added disabler object"],"context":{"gi-language":["default"]}},{"url":"Release-notes-for-0-49-0.html#new-compiler-method-get_argument_syntax","node_type":"p","page":"Release 0.49","sections":["New features","New compiler method get_argument_syntax\n"],"context":{"gi-language":["default"]}},{"url":"Release-notes-for-0-51-0.html#dependency-objects-now-have-a-get_variable-method","node_type":"p","page":"Release 0.51.0","sections":["New features","Dependency objects now have a get_variable method"],"context":{"gi-language":["default"]}},{"url":"Release-notes-for-1-6-0.html#new-builtin-option-for-default-both_libraries","node_type":"p","page":"Release 1.6.0","sections":["New features","New built-in option for default both_libraries"],"context":{"gi-language":["default"]}},{"url":"Subprojects.html#adding-variables-to-the-dependency","node_type":"p","page":"Subprojects","sections":["Subprojects","A subproject example","Adding variables to the dependency"],"context":{"gi-language":["default"]}},{"url":"Wrap-dependency-system-manual.html#how-it-works","node_type":"p","page":"Wrap dependency system manual","sections":["Wrap dependency system manual","How it works"],"context":{"gi-language":["default"]}}]});